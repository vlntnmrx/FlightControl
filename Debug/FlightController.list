
FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8cc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800aa58  0800aa58  0001aa58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aeb8  0800aeb8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aeb8  0800aeb8  0001aeb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aec0  0800aec0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aec0  0800aec0  0001aec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aec4  0800aec4  0001aec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800aec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  2000007c  0800af44  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  0800af44  00020768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017503  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003037  00000000  00000000  000375af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001428  00000000  00000000  0003a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c0  00000000  00000000  0003ba10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023abf  00000000  00000000  0003ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a31  00000000  00000000  0006078f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d359c  00000000  00000000  000711c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014475c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b34  00000000  00000000  001447d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800aa3c 	.word	0x0800aa3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800aa3c 	.word	0x0800aa3c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b972 	b.w	8000ecc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9e08      	ldr	r6, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	4688      	mov	r8, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14b      	bne.n	8000ca6 <__udivmoddi4+0xa6>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4615      	mov	r5, r2
 8000c12:	d967      	bls.n	8000ce4 <__udivmoddi4+0xe4>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0720 	rsb	r7, r2, #32
 8000c1e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c22:	fa20 f707 	lsr.w	r7, r0, r7
 8000c26:	4095      	lsls	r5, r2
 8000c28:	ea47 0803 	orr.w	r8, r7, r3
 8000c2c:	4094      	lsls	r4, r2
 8000c2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c38:	fa1f fc85 	uxth.w	ip, r5
 8000c3c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c40:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c44:	fb07 f10c 	mul.w	r1, r7, ip
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x60>
 8000c4c:	18eb      	adds	r3, r5, r3
 8000c4e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c52:	f080 811b 	bcs.w	8000e8c <__udivmoddi4+0x28c>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 8118 	bls.w	8000e8c <__udivmoddi4+0x28c>
 8000c5c:	3f02      	subs	r7, #2
 8000c5e:	442b      	add	r3, r5
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c68:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c74:	45a4      	cmp	ip, r4
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x8c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	f080 8107 	bcs.w	8000e90 <__udivmoddi4+0x290>
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	f240 8104 	bls.w	8000e90 <__udivmoddi4+0x290>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	442c      	add	r4, r5
 8000c8c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c90:	eba4 040c 	sub.w	r4, r4, ip
 8000c94:	2700      	movs	r7, #0
 8000c96:	b11e      	cbz	r6, 8000ca0 <__udivmoddi4+0xa0>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d909      	bls.n	8000cbe <__udivmoddi4+0xbe>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	f000 80eb 	beq.w	8000e86 <__udivmoddi4+0x286>
 8000cb0:	2700      	movs	r7, #0
 8000cb2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cb6:	4638      	mov	r0, r7
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	fab3 f783 	clz	r7, r3
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d147      	bne.n	8000d56 <__udivmoddi4+0x156>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xd0>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 80fa 	bhi.w	8000ec4 <__udivmoddi4+0x2c4>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	4698      	mov	r8, r3
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d0e0      	beq.n	8000ca0 <__udivmoddi4+0xa0>
 8000cde:	e9c6 4800 	strd	r4, r8, [r6]
 8000ce2:	e7dd      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000ce4:	b902      	cbnz	r2, 8000ce8 <__udivmoddi4+0xe8>
 8000ce6:	deff      	udf	#255	; 0xff
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	f040 808f 	bne.w	8000e10 <__udivmoddi4+0x210>
 8000cf2:	1b49      	subs	r1, r1, r5
 8000cf4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf8:	fa1f f885 	uxth.w	r8, r5
 8000cfc:	2701      	movs	r7, #1
 8000cfe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d02:	0c23      	lsrs	r3, r4, #16
 8000d04:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x124>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x122>
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2bc>
 8000d22:	4684      	mov	ip, r0
 8000d24:	1a59      	subs	r1, r3, r1
 8000d26:	b2a3      	uxth	r3, r4
 8000d28:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d2c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d30:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d34:	fb08 f800 	mul.w	r8, r8, r0
 8000d38:	45a0      	cmp	r8, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x14c>
 8000d3c:	192c      	adds	r4, r5, r4
 8000d3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x14a>
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	f200 80b6 	bhi.w	8000eb6 <__udivmoddi4+0x2b6>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	eba4 0408 	sub.w	r4, r4, r8
 8000d50:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d54:	e79f      	b.n	8000c96 <__udivmoddi4+0x96>
 8000d56:	f1c7 0c20 	rsb	ip, r7, #32
 8000d5a:	40bb      	lsls	r3, r7
 8000d5c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d60:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d64:	fa01 f407 	lsl.w	r4, r1, r7
 8000d68:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d6c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d70:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d74:	4325      	orrs	r5, r4
 8000d76:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d7a:	0c2c      	lsrs	r4, r5, #16
 8000d7c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d80:	fa1f fa8e 	uxth.w	sl, lr
 8000d84:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d88:	fb09 f40a 	mul.w	r4, r9, sl
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d92:	fa00 f107 	lsl.w	r1, r0, r7
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b0>
 8000d98:	eb1e 0303 	adds.w	r3, lr, r3
 8000d9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da0:	f080 8087 	bcs.w	8000eb2 <__udivmoddi4+0x2b2>
 8000da4:	429c      	cmp	r4, r3
 8000da6:	f240 8084 	bls.w	8000eb2 <__udivmoddi4+0x2b2>
 8000daa:	f1a9 0902 	sub.w	r9, r9, #2
 8000dae:	4473      	add	r3, lr
 8000db0:	1b1b      	subs	r3, r3, r4
 8000db2:	b2ad      	uxth	r5, r5
 8000db4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dbc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dc0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dc4:	45a2      	cmp	sl, r4
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1da>
 8000dc8:	eb1e 0404 	adds.w	r4, lr, r4
 8000dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd0:	d26b      	bcs.n	8000eaa <__udivmoddi4+0x2aa>
 8000dd2:	45a2      	cmp	sl, r4
 8000dd4:	d969      	bls.n	8000eaa <__udivmoddi4+0x2aa>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4474      	add	r4, lr
 8000dda:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dde:	fba0 8902 	umull	r8, r9, r0, r2
 8000de2:	eba4 040a 	sub.w	r4, r4, sl
 8000de6:	454c      	cmp	r4, r9
 8000de8:	46c2      	mov	sl, r8
 8000dea:	464b      	mov	r3, r9
 8000dec:	d354      	bcc.n	8000e98 <__udivmoddi4+0x298>
 8000dee:	d051      	beq.n	8000e94 <__udivmoddi4+0x294>
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d069      	beq.n	8000ec8 <__udivmoddi4+0x2c8>
 8000df4:	ebb1 050a 	subs.w	r5, r1, sl
 8000df8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dfc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e00:	40fd      	lsrs	r5, r7
 8000e02:	40fc      	lsrs	r4, r7
 8000e04:	ea4c 0505 	orr.w	r5, ip, r5
 8000e08:	e9c6 5400 	strd	r5, r4, [r6]
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	e747      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000e10:	f1c2 0320 	rsb	r3, r2, #32
 8000e14:	fa20 f703 	lsr.w	r7, r0, r3
 8000e18:	4095      	lsls	r5, r2
 8000e1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e26:	4338      	orrs	r0, r7
 8000e28:	0c01      	lsrs	r1, r0, #16
 8000e2a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e2e:	fa1f f885 	uxth.w	r8, r5
 8000e32:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3a:	fb07 f308 	mul.w	r3, r7, r8
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x256>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e4c:	d22f      	bcs.n	8000eae <__udivmoddi4+0x2ae>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d92d      	bls.n	8000eae <__udivmoddi4+0x2ae>
 8000e52:	3f02      	subs	r7, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1acb      	subs	r3, r1, r3
 8000e58:	b281      	uxth	r1, r0
 8000e5a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb00 f308 	mul.w	r3, r0, r8
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x27e>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e74:	d217      	bcs.n	8000ea6 <__udivmoddi4+0x2a6>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d915      	bls.n	8000ea6 <__udivmoddi4+0x2a6>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	4429      	add	r1, r5
 8000e7e:	1ac9      	subs	r1, r1, r3
 8000e80:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e84:	e73b      	b.n	8000cfe <__udivmoddi4+0xfe>
 8000e86:	4637      	mov	r7, r6
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e709      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000e8c:	4607      	mov	r7, r0
 8000e8e:	e6e7      	b.n	8000c60 <__udivmoddi4+0x60>
 8000e90:	4618      	mov	r0, r3
 8000e92:	e6fb      	b.n	8000c8c <__udivmoddi4+0x8c>
 8000e94:	4541      	cmp	r1, r8
 8000e96:	d2ab      	bcs.n	8000df0 <__udivmoddi4+0x1f0>
 8000e98:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e9c:	eb69 020e 	sbc.w	r2, r9, lr
 8000ea0:	3801      	subs	r0, #1
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	e7a4      	b.n	8000df0 <__udivmoddi4+0x1f0>
 8000ea6:	4660      	mov	r0, ip
 8000ea8:	e7e9      	b.n	8000e7e <__udivmoddi4+0x27e>
 8000eaa:	4618      	mov	r0, r3
 8000eac:	e795      	b.n	8000dda <__udivmoddi4+0x1da>
 8000eae:	4667      	mov	r7, ip
 8000eb0:	e7d1      	b.n	8000e56 <__udivmoddi4+0x256>
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e77c      	b.n	8000db0 <__udivmoddi4+0x1b0>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	442c      	add	r4, r5
 8000eba:	e747      	b.n	8000d4c <__udivmoddi4+0x14c>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	442b      	add	r3, r5
 8000ec2:	e72f      	b.n	8000d24 <__udivmoddi4+0x124>
 8000ec4:	4638      	mov	r0, r7
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xda>
 8000ec8:	4637      	mov	r7, r6
 8000eca:	e6e9      	b.n	8000ca0 <__udivmoddi4+0xa0>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_Init+0x40>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_Init+0x40>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_Init+0x40>)
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 f96f 	bl	80011dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 f808 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f007 fb2a 	bl	800855c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x54>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x58>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f995 	bl	8001262 <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 f94f 	bl	80011f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_InitTick+0x5c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000010 	.word	0x20000010
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	20000000 	.word	0x20000000

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000004 	.word	0x20000004
 8000f98:	20000350 	.word	0x20000350

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000350 	.word	0x20000350

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff ffee 	bl	8000f9c <HAL_GetTick>
 8000fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_Delay+0x40>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fda:	bf00      	nop
 8000fdc:	f7ff ffde 	bl	8000f9c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102a:	4a04      	ldr	r2, [pc, #16]	; (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	60d3      	str	r3, [r2, #12]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <__NVIC_GetPriorityGrouping+0x18>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	f003 0307 	and.w	r3, r3, #7
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	db0b      	blt.n	8001086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f003 021f 	and.w	r2, r3, #31
 8001074:	4907      	ldr	r1, [pc, #28]	; (8001094 <__NVIC_EnableIRQ+0x38>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	095b      	lsrs	r3, r3, #5
 800107c:	2001      	movs	r0, #1
 800107e:	fa00 f202 	lsl.w	r2, r0, r2
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000e100 	.word	0xe000e100

08001098 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db10      	blt.n	80010cc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4909      	ldr	r1, [pc, #36]	; (80010d8 <__NVIC_DisableIRQ+0x40>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	3320      	adds	r3, #32
 80010c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010c8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	; (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <__NVIC_SetPriority+0x50>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
         );
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a8:	d301      	bcc.n	80011ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00f      	b.n	80011ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <SysTick_Config+0x40>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b6:	210f      	movs	r1, #15
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f7ff ff8e 	bl	80010dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <SysTick_Config+0x40>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SysTick_Config+0x40>)
 80011c8:	2207      	movs	r2, #7
 80011ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	e000e010 	.word	0xe000e010

080011dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff07 	bl	8000ff8 <__NVIC_SetPriorityGrouping>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001204:	f7ff ff1c 	bl	8001040 <__NVIC_GetPriorityGrouping>
 8001208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	f7ff ff8e 	bl	8001130 <NVIC_EncodePriority>
 8001214:	4602      	mov	r2, r0
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff5d 	bl	80010dc <__NVIC_SetPriority>
}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff0f 	bl	800105c <__NVIC_EnableIRQ>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff1f 	bl	8001098 <__NVIC_DisableIRQ>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ff94 	bl	8001198 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001288:	f7ff fe88 	bl	8000f9c <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e099      	b.n	80013cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2202      	movs	r2, #2
 80012a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0201 	bic.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b8:	e00f      	b.n	80012da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ba:	f7ff fe6f 	bl	8000f9c <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	d908      	bls.n	80012da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2220      	movs	r2, #32
 80012cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2203      	movs	r2, #3
 80012d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e078      	b.n	80013cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1e8      	bne.n	80012ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	4b38      	ldr	r3, [pc, #224]	; (80013d4 <HAL_DMA_Init+0x158>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001306:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001312:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	4313      	orrs	r3, r2
 800132a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	2b04      	cmp	r3, #4
 8001332:	d107      	bne.n	8001344 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	4313      	orrs	r3, r2
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	4313      	orrs	r3, r2
 8001342:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f023 0307 	bic.w	r3, r3, #7
 800135a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	4313      	orrs	r3, r2
 8001364:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	2b04      	cmp	r3, #4
 800136c:	d117      	bne.n	800139e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	4313      	orrs	r3, r2
 8001376:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00e      	beq.n	800139e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 fb23 	bl	80019cc <DMA_CheckFifoParam>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d008      	beq.n	800139e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2240      	movs	r2, #64	; 0x40
 8001390:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800139a:	2301      	movs	r3, #1
 800139c:	e016      	b.n	80013cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 fada 	bl	8001960 <DMA_CalcBaseAndBitshift>
 80013ac:	4603      	mov	r3, r0
 80013ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	223f      	movs	r2, #63	; 0x3f
 80013b6:	409a      	lsls	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	f010803f 	.word	0xf010803f

080013d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HAL_DMA_Start_IT+0x26>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e048      	b.n	8001490 <HAL_DMA_Start_IT+0xb8>
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d137      	bne.n	8001482 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2202      	movs	r2, #2
 8001416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	68b9      	ldr	r1, [r7, #8]
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 fa6c 	bl	8001904 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001430:	223f      	movs	r2, #63	; 0x3f
 8001432:	409a      	lsls	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0216 	orr.w	r2, r2, #22
 8001446:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001456:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	2b00      	cmp	r3, #0
 800145e:	d007      	beq.n	8001470 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0208 	orr.w	r2, r2, #8
 800146e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e005      	b.n	800148e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800148a:	2302      	movs	r3, #2
 800148c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800148e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014a6:	f7ff fd79 	bl	8000f9c <HAL_GetTick>
 80014aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d008      	beq.n	80014ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2280      	movs	r2, #128	; 0x80
 80014bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e052      	b.n	8001570 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0216 	bic.w	r2, r2, #22
 80014d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d103      	bne.n	80014fa <HAL_DMA_Abort+0x62>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0208 	bic.w	r2, r2, #8
 8001508:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0201 	bic.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800151a:	e013      	b.n	8001544 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800151c:	f7ff fd3e 	bl	8000f9c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b05      	cmp	r3, #5
 8001528:	d90c      	bls.n	8001544 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2220      	movs	r2, #32
 800152e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2203      	movs	r2, #3
 800153c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e015      	b.n	8001570 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1e4      	bne.n	800151c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001556:	223f      	movs	r2, #63	; 0x3f
 8001558:	409a      	lsls	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d004      	beq.n	8001596 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e00c      	b.n	80015b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2205      	movs	r2, #5
 800159a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015c8:	4b92      	ldr	r3, [pc, #584]	; (8001814 <HAL_DMA_IRQHandler+0x258>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a92      	ldr	r2, [pc, #584]	; (8001818 <HAL_DMA_IRQHandler+0x25c>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0a9b      	lsrs	r3, r3, #10
 80015d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e6:	2208      	movs	r2, #8
 80015e8:	409a      	lsls	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01a      	beq.n	8001628 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d013      	beq.n	8001628 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0204 	bic.w	r2, r2, #4
 800160e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	2208      	movs	r2, #8
 8001616:	409a      	lsls	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162c:	2201      	movs	r2, #1
 800162e:	409a      	lsls	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d012      	beq.n	800165e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00b      	beq.n	800165e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	2201      	movs	r2, #1
 800164c:	409a      	lsls	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001656:	f043 0202 	orr.w	r2, r3, #2
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	2204      	movs	r2, #4
 8001664:	409a      	lsls	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d012      	beq.n	8001694 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00b      	beq.n	8001694 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	2204      	movs	r2, #4
 8001682:	409a      	lsls	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168c:	f043 0204 	orr.w	r2, r3, #4
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	2210      	movs	r2, #16
 800169a:	409a      	lsls	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d043      	beq.n	800172c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d03c      	beq.n	800172c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b6:	2210      	movs	r2, #16
 80016b8:	409a      	lsls	r2, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d018      	beq.n	80016fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d108      	bne.n	80016ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d024      	beq.n	800172c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4798      	blx	r3
 80016ea:	e01f      	b.n	800172c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d01b      	beq.n	800172c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
 80016fc:	e016      	b.n	800172c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d107      	bne.n	800171c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0208 	bic.w	r2, r2, #8
 800171a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001730:	2220      	movs	r2, #32
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 808e 	beq.w	800185a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 8086 	beq.w	800185a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001752:	2220      	movs	r2, #32
 8001754:	409a      	lsls	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b05      	cmp	r3, #5
 8001764:	d136      	bne.n	80017d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0216 	bic.w	r2, r2, #22
 8001774:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	695a      	ldr	r2, [r3, #20]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001784:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	2b00      	cmp	r3, #0
 800178c:	d103      	bne.n	8001796 <HAL_DMA_IRQHandler+0x1da>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0208 	bic.w	r2, r2, #8
 80017a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017aa:	223f      	movs	r2, #63	; 0x3f
 80017ac:	409a      	lsls	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d07d      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	4798      	blx	r3
        }
        return;
 80017d2:	e078      	b.n	80018c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d01c      	beq.n	800181c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d108      	bne.n	8001802 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d030      	beq.n	800185a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	4798      	blx	r3
 8001800:	e02b      	b.n	800185a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001806:	2b00      	cmp	r3, #0
 8001808:	d027      	beq.n	800185a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	4798      	blx	r3
 8001812:	e022      	b.n	800185a <HAL_DMA_IRQHandler+0x29e>
 8001814:	20000010 	.word	0x20000010
 8001818:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10f      	bne.n	800184a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0210 	bic.w	r2, r2, #16
 8001838:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	2b00      	cmp	r3, #0
 8001860:	d032      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d022      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2205      	movs	r2, #5
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	3301      	adds	r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	429a      	cmp	r2, r3
 8001890:	d307      	bcc.n	80018a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f2      	bne.n	8001886 <HAL_DMA_IRQHandler+0x2ca>
 80018a0:	e000      	b.n	80018a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	4798      	blx	r3
 80018c4:	e000      	b.n	80018c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80018c6:	bf00      	nop
    }
  }
}
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop

080018d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018de:	b2db      	uxtb	r3, r3
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001920:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b40      	cmp	r3, #64	; 0x40
 8001930:	d108      	bne.n	8001944 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001942:	e007      	b.n	8001954 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	60da      	str	r2, [r3, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	3b10      	subs	r3, #16
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <DMA_CalcBaseAndBitshift+0x64>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	091b      	lsrs	r3, r3, #4
 8001978:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800197a:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <DMA_CalcBaseAndBitshift+0x68>)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b03      	cmp	r3, #3
 800198c:	d909      	bls.n	80019a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001996:	f023 0303 	bic.w	r3, r3, #3
 800199a:	1d1a      	adds	r2, r3, #4
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	659a      	str	r2, [r3, #88]	; 0x58
 80019a0:	e007      	b.n	80019b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019aa:	f023 0303 	bic.w	r3, r3, #3
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	aaaaaaab 	.word	0xaaaaaaab
 80019c8:	0800aa84 	.word	0x0800aa84

080019cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d11f      	bne.n	8001a26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d855      	bhi.n	8001a98 <DMA_CheckFifoParam+0xcc>
 80019ec:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <DMA_CheckFifoParam+0x28>)
 80019ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f2:	bf00      	nop
 80019f4:	08001a05 	.word	0x08001a05
 80019f8:	08001a17 	.word	0x08001a17
 80019fc:	08001a05 	.word	0x08001a05
 8001a00:	08001a99 	.word	0x08001a99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d045      	beq.n	8001a9c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a14:	e042      	b.n	8001a9c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a1e:	d13f      	bne.n	8001aa0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a24:	e03c      	b.n	8001aa0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a2e:	d121      	bne.n	8001a74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d836      	bhi.n	8001aa4 <DMA_CheckFifoParam+0xd8>
 8001a36:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <DMA_CheckFifoParam+0x70>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001a53 	.word	0x08001a53
 8001a44:	08001a4d 	.word	0x08001a4d
 8001a48:	08001a65 	.word	0x08001a65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a50:	e02f      	b.n	8001ab2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d024      	beq.n	8001aa8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a62:	e021      	b.n	8001aa8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a6c:	d11e      	bne.n	8001aac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a72:	e01b      	b.n	8001aac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d902      	bls.n	8001a80 <DMA_CheckFifoParam+0xb4>
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d003      	beq.n	8001a86 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a7e:	e018      	b.n	8001ab2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
      break;
 8001a84:	e015      	b.n	8001ab2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00e      	beq.n	8001ab0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	73fb      	strb	r3, [r7, #15]
      break;
 8001a96:	e00b      	b.n	8001ab0 <DMA_CheckFifoParam+0xe4>
      break;
 8001a98:	bf00      	nop
 8001a9a:	e00a      	b.n	8001ab2 <DMA_CheckFifoParam+0xe6>
      break;
 8001a9c:	bf00      	nop
 8001a9e:	e008      	b.n	8001ab2 <DMA_CheckFifoParam+0xe6>
      break;
 8001aa0:	bf00      	nop
 8001aa2:	e006      	b.n	8001ab2 <DMA_CheckFifoParam+0xe6>
      break;
 8001aa4:	bf00      	nop
 8001aa6:	e004      	b.n	8001ab2 <DMA_CheckFifoParam+0xe6>
      break;
 8001aa8:	bf00      	nop
 8001aaa:	e002      	b.n	8001ab2 <DMA_CheckFifoParam+0xe6>
      break;   
 8001aac:	bf00      	nop
 8001aae:	e000      	b.n	8001ab2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ab0:	bf00      	nop
    }
  } 
  
  return status; 
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	e16b      	b.n	8001db4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001adc:	2201      	movs	r2, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	f040 815a 	bne.w	8001dae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x4a>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b12      	cmp	r3, #18
 8001b08:	d123      	bne.n	8001b52 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	69b9      	ldr	r1, [r7, #24]
 8001b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0203 	and.w	r2, r3, #3
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_GPIO_Init+0xe6>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d007      	beq.n	8001ba6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9a:	2b11      	cmp	r3, #17
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b12      	cmp	r3, #18
 8001ba4:	d130      	bne.n	8001c08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 0201 	and.w	r2, r3, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80b4 	beq.w	8001dae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b5f      	ldr	r3, [pc, #380]	; (8001dc8 <HAL_GPIO_Init+0x308>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a5e      	ldr	r2, [pc, #376]	; (8001dc8 <HAL_GPIO_Init+0x308>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b5c      	ldr	r3, [pc, #368]	; (8001dc8 <HAL_GPIO_Init+0x308>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c62:	4a5a      	ldr	r2, [pc, #360]	; (8001dcc <HAL_GPIO_Init+0x30c>)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	220f      	movs	r2, #15
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a51      	ldr	r2, [pc, #324]	; (8001dd0 <HAL_GPIO_Init+0x310>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d02b      	beq.n	8001ce6 <HAL_GPIO_Init+0x226>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a50      	ldr	r2, [pc, #320]	; (8001dd4 <HAL_GPIO_Init+0x314>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d025      	beq.n	8001ce2 <HAL_GPIO_Init+0x222>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4f      	ldr	r2, [pc, #316]	; (8001dd8 <HAL_GPIO_Init+0x318>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01f      	beq.n	8001cde <HAL_GPIO_Init+0x21e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4e      	ldr	r2, [pc, #312]	; (8001ddc <HAL_GPIO_Init+0x31c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d019      	beq.n	8001cda <HAL_GPIO_Init+0x21a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4d      	ldr	r2, [pc, #308]	; (8001de0 <HAL_GPIO_Init+0x320>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <HAL_GPIO_Init+0x216>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4c      	ldr	r2, [pc, #304]	; (8001de4 <HAL_GPIO_Init+0x324>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_GPIO_Init+0x212>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4b      	ldr	r2, [pc, #300]	; (8001de8 <HAL_GPIO_Init+0x328>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d007      	beq.n	8001cce <HAL_GPIO_Init+0x20e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4a      	ldr	r2, [pc, #296]	; (8001dec <HAL_GPIO_Init+0x32c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d101      	bne.n	8001cca <HAL_GPIO_Init+0x20a>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	e00e      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cca:	2308      	movs	r3, #8
 8001ccc:	e00c      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cce:	2306      	movs	r3, #6
 8001cd0:	e00a      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	e008      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e004      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	f002 0203 	and.w	r2, r2, #3
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cf8:	4934      	ldr	r1, [pc, #208]	; (8001dcc <HAL_GPIO_Init+0x30c>)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d2a:	4a31      	ldr	r2, [pc, #196]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d30:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d54:	4a26      	ldr	r2, [pc, #152]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d5a:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da8:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <HAL_GPIO_Init+0x330>)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3301      	adds	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	2b0f      	cmp	r3, #15
 8001db8:	f67f ae90 	bls.w	8001adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3724      	adds	r7, #36	; 0x24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40013800 	.word	0x40013800
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40020400 	.word	0x40020400
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	40020c00 	.word	0x40020c00
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40021400 	.word	0x40021400
 8001de8:	40021800 	.word	0x40021800
 8001dec:	40021c00 	.word	0x40021c00
 8001df0:	40013c00 	.word	0x40013c00

08001df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e001      	b.n	8001e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e40:	e003      	b.n	8001e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	041a      	lsls	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	619a      	str	r2, [r3, #24]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	401a      	ands	r2, r3
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d104      	bne.n	8001e7a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e70:	887b      	ldrh	r3, [r7, #2]
 8001e72:	041a      	lsls	r2, r3, #16
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e10f      	b.n	80020be <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f006 fb7a 	bl	80085ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2224      	movs	r2, #36	; 0x24
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ed0:	f003 f866 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8001ed4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4a7b      	ldr	r2, [pc, #492]	; (80020c8 <HAL_I2C_Init+0x23c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d807      	bhi.n	8001ef0 <HAL_I2C_Init+0x64>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4a7a      	ldr	r2, [pc, #488]	; (80020cc <HAL_I2C_Init+0x240>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	bf94      	ite	ls
 8001ee8:	2301      	movls	r3, #1
 8001eea:	2300      	movhi	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	e006      	b.n	8001efe <HAL_I2C_Init+0x72>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4a77      	ldr	r2, [pc, #476]	; (80020d0 <HAL_I2C_Init+0x244>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	bf94      	ite	ls
 8001ef8:	2301      	movls	r3, #1
 8001efa:	2300      	movhi	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0db      	b.n	80020be <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4a72      	ldr	r2, [pc, #456]	; (80020d4 <HAL_I2C_Init+0x248>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0c9b      	lsrs	r3, r3, #18
 8001f10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4a64      	ldr	r2, [pc, #400]	; (80020c8 <HAL_I2C_Init+0x23c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d802      	bhi.n	8001f40 <HAL_I2C_Init+0xb4>
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	e009      	b.n	8001f54 <HAL_I2C_Init+0xc8>
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f46:	fb02 f303 	mul.w	r3, r2, r3
 8001f4a:	4a63      	ldr	r2, [pc, #396]	; (80020d8 <HAL_I2C_Init+0x24c>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	099b      	lsrs	r3, r3, #6
 8001f52:	3301      	adds	r3, #1
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4956      	ldr	r1, [pc, #344]	; (80020c8 <HAL_I2C_Init+0x23c>)
 8001f70:	428b      	cmp	r3, r1
 8001f72:	d80d      	bhi.n	8001f90 <HAL_I2C_Init+0x104>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1e59      	subs	r1, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	bf38      	it	cc
 8001f8c:	2304      	movcc	r3, #4
 8001f8e:	e04f      	b.n	8002030 <HAL_I2C_Init+0x1a4>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d111      	bne.n	8001fbc <HAL_I2C_Init+0x130>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1e58      	subs	r0, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	440b      	add	r3, r1
 8001fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001faa:	3301      	adds	r3, #1
 8001fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	e012      	b.n	8001fe2 <HAL_I2C_Init+0x156>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1e58      	subs	r0, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	0099      	lsls	r1, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf0c      	ite	eq
 8001fdc:	2301      	moveq	r3, #1
 8001fde:	2300      	movne	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_Init+0x15e>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e022      	b.n	8002030 <HAL_I2C_Init+0x1a4>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10e      	bne.n	8002010 <HAL_I2C_Init+0x184>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1e58      	subs	r0, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6859      	ldr	r1, [r3, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	440b      	add	r3, r1
 8002000:	fbb0 f3f3 	udiv	r3, r0, r3
 8002004:	3301      	adds	r3, #1
 8002006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200e:	e00f      	b.n	8002030 <HAL_I2C_Init+0x1a4>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1e58      	subs	r0, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	0099      	lsls	r1, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	fbb0 f3f3 	udiv	r3, r0, r3
 8002026:	3301      	adds	r3, #1
 8002028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	6809      	ldr	r1, [r1, #0]
 8002034:	4313      	orrs	r3, r2
 8002036:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69da      	ldr	r2, [r3, #28]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800205e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6911      	ldr	r1, [r2, #16]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68d2      	ldr	r2, [r2, #12]
 800206a:	4311      	orrs	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	430b      	orrs	r3, r1
 8002072:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0201 	orr.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2220      	movs	r2, #32
 80020aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	000186a0 	.word	0x000186a0
 80020cc:	001e847f 	.word	0x001e847f
 80020d0:	003d08ff 	.word	0x003d08ff
 80020d4:	431bde83 	.word	0x431bde83
 80020d8:	10624dd3 	.word	0x10624dd3

080020dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	817b      	strh	r3, [r7, #10]
 80020ee:	460b      	mov	r3, r1
 80020f0:	813b      	strh	r3, [r7, #8]
 80020f2:	4613      	mov	r3, r2
 80020f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020f6:	f7fe ff51 	bl	8000f9c <HAL_GetTick>
 80020fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b20      	cmp	r3, #32
 8002106:	f040 80d9 	bne.w	80022bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2319      	movs	r3, #25
 8002110:	2201      	movs	r2, #1
 8002112:	496d      	ldr	r1, [pc, #436]	; (80022c8 <HAL_I2C_Mem_Write+0x1ec>)
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f002 f942 	bl	800439e <I2C_WaitOnFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002120:	2302      	movs	r3, #2
 8002122:	e0cc      	b.n	80022be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Mem_Write+0x56>
 800212e:	2302      	movs	r3, #2
 8002130:	e0c5      	b.n	80022be <HAL_I2C_Mem_Write+0x1e2>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d007      	beq.n	8002158 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002166:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2221      	movs	r2, #33	; 0x21
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2240      	movs	r2, #64	; 0x40
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a3a      	ldr	r2, [r7, #32]
 8002182:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002188:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a4d      	ldr	r2, [pc, #308]	; (80022cc <HAL_I2C_Mem_Write+0x1f0>)
 8002198:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800219a:	88f8      	ldrh	r0, [r7, #6]
 800219c:	893a      	ldrh	r2, [r7, #8]
 800219e:	8979      	ldrh	r1, [r7, #10]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	4603      	mov	r3, r0
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f001 fe2c 	bl	8003e08 <I2C_RequestMemoryWrite>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d052      	beq.n	800225c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e081      	b.n	80022be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f002 f9c3 	bl	800454a <I2C_WaitOnTXEFlagUntilTimeout>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00d      	beq.n	80021e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d107      	bne.n	80021e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06b      	b.n	80022be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	781a      	ldrb	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b04      	cmp	r3, #4
 8002222:	d11b      	bne.n	800225c <HAL_I2C_Mem_Write+0x180>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002228:	2b00      	cmp	r3, #0
 800222a:	d017      	beq.n	800225c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	781a      	ldrb	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002246:	3b01      	subs	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1aa      	bne.n	80021ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f002 f9af 	bl	80045cc <I2C_WaitOnBTFFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00d      	beq.n	8002290 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	2b04      	cmp	r3, #4
 800227a:	d107      	bne.n	800228c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e016      	b.n	80022be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e000      	b.n	80022be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
  }
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	00100002 	.word	0x00100002
 80022cc:	ffff0000 	.word	0xffff0000

080022d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08c      	sub	sp, #48	; 0x30
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	4608      	mov	r0, r1
 80022da:	4611      	mov	r1, r2
 80022dc:	461a      	mov	r2, r3
 80022de:	4603      	mov	r3, r0
 80022e0:	817b      	strh	r3, [r7, #10]
 80022e2:	460b      	mov	r3, r1
 80022e4:	813b      	strh	r3, [r7, #8]
 80022e6:	4613      	mov	r3, r2
 80022e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022ea:	f7fe fe57 	bl	8000f9c <HAL_GetTick>
 80022ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	f040 8208 	bne.w	800270e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2319      	movs	r3, #25
 8002304:	2201      	movs	r2, #1
 8002306:	497b      	ldr	r1, [pc, #492]	; (80024f4 <HAL_I2C_Mem_Read+0x224>)
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f002 f848 	bl	800439e <I2C_WaitOnFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002314:	2302      	movs	r3, #2
 8002316:	e1fb      	b.n	8002710 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_I2C_Mem_Read+0x56>
 8002322:	2302      	movs	r3, #2
 8002324:	e1f4      	b.n	8002710 <HAL_I2C_Mem_Read+0x440>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d007      	beq.n	800234c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800235a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2222      	movs	r2, #34	; 0x22
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2240      	movs	r2, #64	; 0x40
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002376:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800237c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4a5b      	ldr	r2, [pc, #364]	; (80024f8 <HAL_I2C_Mem_Read+0x228>)
 800238c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800238e:	88f8      	ldrh	r0, [r7, #6]
 8002390:	893a      	ldrh	r2, [r7, #8]
 8002392:	8979      	ldrh	r1, [r7, #10]
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	4603      	mov	r3, r0
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f001 fdbc 	bl	8003f1c <I2C_RequestMemoryRead>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e1b0      	b.n	8002710 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d113      	bne.n	80023de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	623b      	str	r3, [r7, #32]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	623b      	str	r3, [r7, #32]
 80023ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e184      	b.n	80026e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d11b      	bne.n	800241e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e164      	b.n	80026e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002422:	2b02      	cmp	r3, #2
 8002424:	d11b      	bne.n	800245e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002434:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002444:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	e144      	b.n	80026e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002474:	e138      	b.n	80026e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	2b03      	cmp	r3, #3
 800247c:	f200 80f1 	bhi.w	8002662 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	2b01      	cmp	r3, #1
 8002486:	d123      	bne.n	80024d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f002 f8de 	bl	800464e <I2C_WaitOnRXNEFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e139      	b.n	8002710 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024ce:	e10b      	b.n	80026e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d14e      	bne.n	8002576 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024de:	2200      	movs	r2, #0
 80024e0:	4906      	ldr	r1, [pc, #24]	; (80024fc <HAL_I2C_Mem_Read+0x22c>)
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f001 ff5b 	bl	800439e <I2C_WaitOnFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d008      	beq.n	8002500 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e10e      	b.n	8002710 <HAL_I2C_Mem_Read+0x440>
 80024f2:	bf00      	nop
 80024f4:	00100002 	.word	0x00100002
 80024f8:	ffff0000 	.word	0xffff0000
 80024fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002574:	e0b8      	b.n	80026e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257c:	2200      	movs	r2, #0
 800257e:	4966      	ldr	r1, [pc, #408]	; (8002718 <HAL_I2C_Mem_Read+0x448>)
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f001 ff0c 	bl	800439e <I2C_WaitOnFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0bf      	b.n	8002710 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	2200      	movs	r2, #0
 80025da:	494f      	ldr	r1, [pc, #316]	; (8002718 <HAL_I2C_Mem_Read+0x448>)
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f001 fede 	bl	800439e <I2C_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e091      	b.n	8002710 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002660:	e042      	b.n	80026e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002664:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f001 fff1 	bl	800464e <I2C_WaitOnRXNEFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e04c      	b.n	8002710 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d118      	bne.n	80026e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f47f aec2 	bne.w	8002476 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	e000      	b.n	8002710 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800270e:	2302      	movs	r3, #2
  }
}
 8002710:	4618      	mov	r0, r3
 8002712:	3728      	adds	r7, #40	; 0x28
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	00010004 	.word	0x00010004

0800271c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	; 0x30
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	461a      	mov	r2, r3
 800272a:	4603      	mov	r3, r0
 800272c:	817b      	strh	r3, [r7, #10]
 800272e:	460b      	mov	r3, r1
 8002730:	813b      	strh	r3, [r7, #8]
 8002732:	4613      	mov	r3, r2
 8002734:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002736:	f7fe fc31 	bl	8000f9c <HAL_GetTick>
 800273a:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b20      	cmp	r3, #32
 800274a:	f040 8123 	bne.w	8002994 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800274e:	4b94      	ldr	r3, [pc, #592]	; (80029a0 <HAL_I2C_Mem_Read_DMA+0x284>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	08db      	lsrs	r3, r3, #3
 8002754:	4a93      	ldr	r2, [pc, #588]	; (80029a4 <HAL_I2C_Mem_Read_DMA+0x288>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0a1a      	lsrs	r2, r3, #8
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	009a      	lsls	r2, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	3b01      	subs	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d116      	bne.n	80027a2 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f043 0220 	orr.w	r2, r3, #32
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0f9      	b.n	8002996 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d0db      	beq.n	8002768 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_I2C_Mem_Read_DMA+0xa2>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e0eb      	b.n	8002996 <HAL_I2C_Mem_Read_DMA+0x27a>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d007      	beq.n	80027e4 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2222      	movs	r2, #34	; 0x22
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800280e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002814:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a61      	ldr	r2, [pc, #388]	; (80029a8 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8085 	beq.w	800293a <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	4a5d      	ldr	r2, [pc, #372]	; (80029ac <HAL_I2C_Mem_Read_DMA+0x290>)
 8002836:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	4a5c      	ldr	r2, [pc, #368]	; (80029b0 <HAL_I2C_Mem_Read_DMA+0x294>)
 800283e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	2200      	movs	r2, #0
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	2200      	movs	r2, #0
 800284e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	2200      	movs	r2, #0
 8002856:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285c:	2200      	movs	r2, #0
 800285e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3310      	adds	r3, #16
 800286a:	4619      	mov	r1, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	461a      	mov	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	f7fe fdaf 	bl	80013d8 <HAL_DMA_Start_IT>
 800287a:	4603      	mov	r3, r0
 800287c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 8002880:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002884:	2b00      	cmp	r3, #0
 8002886:	d144      	bne.n	8002912 <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002888:	88f8      	ldrh	r0, [r7, #6]
 800288a:	893a      	ldrh	r2, [r7, #8]
 800288c:	8979      	ldrh	r1, [r7, #10]
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	2323      	movs	r3, #35	; 0x23
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	4603      	mov	r3, r0
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f001 fb3f 	bl	8003f1c <I2C_RequestMemoryRead>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e076      	b.n	8002996 <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d108      	bne.n	80028c2 <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e007      	b.n	80028d2 <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028d0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fe:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	e03e      	b.n	8002990 <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f043 0210 	orr.w	r2, r3, #16
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e02d      	b.n	8002996 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800293a:	88f8      	ldrh	r0, [r7, #6]
 800293c:	893a      	ldrh	r2, [r7, #8]
 800293e:	8979      	ldrh	r1, [r7, #10]
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	2323      	movs	r3, #35	; 0x23
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	4603      	mov	r3, r0
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f001 fae6 	bl	8003f1c <I2C_RequestMemoryRead>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e01d      	b.n	8002996 <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297e:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3728      	adds	r7, #40	; 0x28
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000010 	.word	0x20000010
 80029a4:	14f8b589 	.word	0x14f8b589
 80029a8:	ffff0000 	.word	0xffff0000
 80029ac:	080040bd 	.word	0x080040bd
 80029b0:	08004257 	.word	0x08004257

080029b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	d003      	beq.n	80029ec <HAL_I2C_EV_IRQHandler+0x38>
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	f040 80b6 	bne.w	8002b58 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <HAL_I2C_EV_IRQHandler+0x6e>
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002a0c:	d003      	beq.n	8002a16 <HAL_I2C_EV_IRQHandler+0x62>
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002a14:	d101      	bne.n	8002a1a <HAL_I2C_EV_IRQHandler+0x66>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_I2C_EV_IRQHandler+0x68>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	f000 8127 	beq.w	8002c70 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00c      	beq.n	8002a46 <HAL_I2C_EV_IRQHandler+0x92>
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	0a5b      	lsrs	r3, r3, #9
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f001 fe8d 	bl	8004758 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fc56 	bl	80032f0 <I2C_Master_SB>
 8002a44:	e087      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	08db      	lsrs	r3, r3, #3
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_I2C_EV_IRQHandler+0xb2>
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	0a5b      	lsrs	r3, r3, #9
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fccc 	bl	80033fc <I2C_Master_ADD10>
 8002a64:	e077      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_I2C_EV_IRQHandler+0xd2>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	0a5b      	lsrs	r3, r3, #9
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fce6 	bl	8003450 <I2C_Master_ADDR>
 8002a84:	e067      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d030      	beq.n	8002af4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aa0:	f000 80e8 	beq.w	8002c74 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	09db      	lsrs	r3, r3, #7
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00f      	beq.n	8002ad0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	0a9b      	lsrs	r3, r3, #10
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <HAL_I2C_EV_IRQHandler+0x11c>
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f937 	bl	8002d3c <I2C_MasterTransmit_TXE>
 8002ace:	e042      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80cb 	beq.w	8002c74 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	0a5b      	lsrs	r3, r3, #9
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 80c4 	beq.w	8002c74 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fa1d 	bl	8002f2c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002af2:	e0bf      	b.n	8002c74 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b02:	f000 80b7 	beq.w	8002c74 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00f      	beq.n	8002b32 <HAL_I2C_EV_IRQHandler+0x17e>
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	0a9b      	lsrs	r3, r3, #10
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <HAL_I2C_EV_IRQHandler+0x17e>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fa74 	bl	8003018 <I2C_MasterReceive_RXNE>
 8002b30:	e011      	b.n	8002b56 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	089b      	lsrs	r3, r3, #2
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 809a 	beq.w	8002c74 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	0a5b      	lsrs	r3, r3, #9
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8093 	beq.w	8002c74 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fae4 	bl	800311c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b54:	e08e      	b.n	8002c74 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002b56:	e08d      	b.n	8002c74 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	e007      	b.n	8002b7a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	085b      	lsrs	r3, r3, #1
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d012      	beq.n	8002bac <HAL_I2C_EV_IRQHandler+0x1f8>
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	0a5b      	lsrs	r3, r3, #9
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00c      	beq.n	8002bac <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ba2:	69b9      	ldr	r1, [r7, #24]
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fea2 	bl	80038ee <I2C_Slave_ADDR>
 8002baa:	e066      	b.n	8002c7a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d009      	beq.n	8002bcc <HAL_I2C_EV_IRQHandler+0x218>
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	0a5b      	lsrs	r3, r3, #9
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fed7 	bl	8003978 <I2C_Slave_STOPF>
 8002bca:	e056      	b.n	8002c7a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bcc:	7bbb      	ldrb	r3, [r7, #14]
 8002bce:	2b21      	cmp	r3, #33	; 0x21
 8002bd0:	d002      	beq.n	8002bd8 <HAL_I2C_EV_IRQHandler+0x224>
 8002bd2:	7bbb      	ldrb	r3, [r7, #14]
 8002bd4:	2b29      	cmp	r3, #41	; 0x29
 8002bd6:	d125      	bne.n	8002c24 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	09db      	lsrs	r3, r3, #7
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00f      	beq.n	8002c04 <HAL_I2C_EV_IRQHandler+0x250>
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	0a9b      	lsrs	r3, r3, #10
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d009      	beq.n	8002c04 <HAL_I2C_EV_IRQHandler+0x250>
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d103      	bne.n	8002c04 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fdb8 	bl	8003772 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c02:	e039      	b.n	8002c78 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d033      	beq.n	8002c78 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	0a5b      	lsrs	r3, r3, #9
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d02d      	beq.n	8002c78 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fde5 	bl	80037ec <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c22:	e029      	b.n	8002c78 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	099b      	lsrs	r3, r3, #6
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00f      	beq.n	8002c50 <HAL_I2C_EV_IRQHandler+0x29c>
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	0a9b      	lsrs	r3, r3, #10
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d009      	beq.n	8002c50 <HAL_I2C_EV_IRQHandler+0x29c>
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d103      	bne.n	8002c50 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fdf0 	bl	800382e <I2C_SlaveReceive_RXNE>
 8002c4e:	e014      	b.n	8002c7a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00e      	beq.n	8002c7a <HAL_I2C_EV_IRQHandler+0x2c6>
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	0a5b      	lsrs	r3, r3, #9
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fe1e 	bl	80038aa <I2C_SlaveReceive_BTF>
 8002c6e:	e004      	b.n	8002c7a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8002c70:	bf00      	nop
 8002c72:	e002      	b.n	8002c7a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c74:	bf00      	nop
 8002c76:	e000      	b.n	8002c7a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c78:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d150      	bne.n	8002e04 <I2C_MasterTransmit_TXE+0xc8>
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b21      	cmp	r3, #33	; 0x21
 8002d66:	d14d      	bne.n	8002e04 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d01d      	beq.n	8002daa <I2C_MasterTransmit_TXE+0x6e>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d01a      	beq.n	8002daa <I2C_MasterTransmit_TXE+0x6e>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d7a:	d016      	beq.n	8002daa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d8a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2211      	movs	r2, #17
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ff6c 	bl	8002c80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002da8:	e0bc      	b.n	8002f24 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002db8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b40      	cmp	r3, #64	; 0x40
 8002de2:	d107      	bne.n	8002df4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff ff87 	bl	8002d00 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002df2:	e097      	b.n	8002f24 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff ff3f 	bl	8002c80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e02:	e08f      	b.n	8002f24 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b21      	cmp	r3, #33	; 0x21
 8002e08:	d007      	beq.n	8002e1a <I2C_MasterTransmit_TXE+0xde>
 8002e0a:	7bbb      	ldrb	r3, [r7, #14]
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	f040 8089 	bne.w	8002f24 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b22      	cmp	r3, #34	; 0x22
 8002e16:	f040 8085 	bne.w	8002f24 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d108      	bne.n	8002e36 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e32:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002e34:	e076      	b.n	8002f24 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d15d      	bne.n	8002efe <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d11d      	bne.n	8002e86 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10b      	bne.n	8002e6a <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e62:	1c9a      	adds	r2, r3, #2
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e68:	e05c      	b.n	8002f24 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	121b      	asrs	r3, r3, #8
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e84:	e04e      	b.n	8002f24 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d10b      	bne.n	8002ea6 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ea4:	e03e      	b.n	8002f24 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d13a      	bne.n	8002f24 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b22      	cmp	r3, #34	; 0x22
 8002eb8:	d108      	bne.n	8002ecc <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec8:	601a      	str	r2, [r3, #0]
}
 8002eca:	e02b      	b.n	8002f24 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b21      	cmp	r3, #33	; 0x21
 8002ed6:	d125      	bne.n	8002f24 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002efc:	e012      	b.n	8002f24 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f22:	e7ff      	b.n	8002f24 <I2C_MasterTransmit_TXE+0x1e8>
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b21      	cmp	r3, #33	; 0x21
 8002f44:	d164      	bne.n	8003010 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d012      	beq.n	8002f76 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	781a      	ldrb	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8002f74:	e04c      	b.n	8003010 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d01d      	beq.n	8002fb8 <I2C_MasterTransmit_BTF+0x8c>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d01a      	beq.n	8002fb8 <I2C_MasterTransmit_BTF+0x8c>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f88:	d016      	beq.n	8002fb8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f98:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2211      	movs	r2, #17
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff fe65 	bl	8002c80 <HAL_I2C_MasterTxCpltCallback>
}
 8002fb6:	e02b      	b.n	8003010 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fc6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b40      	cmp	r3, #64	; 0x40
 8002ff0:	d107      	bne.n	8003002 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff fe80 	bl	8002d00 <HAL_I2C_MemTxCpltCallback>
}
 8003000:	e006      	b.n	8003010 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff fe38 	bl	8002c80 <HAL_I2C_MasterTxCpltCallback>
}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b22      	cmp	r3, #34	; 0x22
 800302a:	d173      	bne.n	8003114 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003030:	b29b      	uxth	r3, r3
 8003032:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b03      	cmp	r3, #3
 8003038:	d920      	bls.n	800307c <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b03      	cmp	r3, #3
 8003068:	d154      	bne.n	8003114 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003078:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800307a:	e04b      	b.n	8003114 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	2b02      	cmp	r3, #2
 8003082:	d047      	beq.n	8003114 <I2C_MasterReceive_RXNE+0xfc>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d002      	beq.n	8003090 <I2C_MasterReceive_RXNE+0x78>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d141      	bne.n	8003114 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800309e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030ae:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	d10a      	bne.n	8003100 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f003 ff71 	bl	8006fe0 <HAL_I2C_MemRxCpltCallback>
}
 80030fe:	e009      	b.n	8003114 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2212      	movs	r2, #18
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fdc0 	bl	8002c94 <HAL_I2C_MasterRxCpltCallback>
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b04      	cmp	r3, #4
 8003132:	d11b      	bne.n	800316c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003142:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800316a:	e0bd      	b.n	80032e8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b03      	cmp	r3, #3
 8003174:	d129      	bne.n	80031ca <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003184:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b04      	cmp	r3, #4
 800318a:	d00a      	beq.n	80031a2 <I2C_MasterReceive_BTF+0x86>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d007      	beq.n	80031a2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031c8:	e08e      	b.n	80032e8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d176      	bne.n	80032c2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d002      	beq.n	80031e0 <I2C_MasterReceive_BTF+0xc4>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d108      	bne.n	80031f2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e019      	b.n	8003226 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d002      	beq.n	80031fe <I2C_MasterReceive_BTF+0xe2>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d108      	bne.n	8003210 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e00a      	b.n	8003226 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b10      	cmp	r3, #16
 8003214:	d007      	beq.n	8003226 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003224:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003280:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b40      	cmp	r3, #64	; 0x40
 8003294:	d10a      	bne.n	80032ac <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f003 fe9b 	bl	8006fe0 <HAL_I2C_MemRxCpltCallback>
}
 80032aa:	e01d      	b.n	80032e8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2212      	movs	r2, #18
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff fcea 	bl	8002c94 <HAL_I2C_MasterRxCpltCallback>
}
 80032c0:	e012      	b.n	80032e8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d117      	bne.n	8003334 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800331c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800331e:	e067      	b.n	80033f0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	b2da      	uxtb	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	611a      	str	r2, [r3, #16]
}
 8003332:	e05d      	b.n	80033f0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800333c:	d133      	bne.n	80033a6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b21      	cmp	r3, #33	; 0x21
 8003348:	d109      	bne.n	800335e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	b2db      	uxtb	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800335a:	611a      	str	r2, [r3, #16]
 800335c:	e008      	b.n	8003370 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	b2da      	uxtb	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003374:	2b00      	cmp	r3, #0
 8003376:	d103      	bne.n	8003380 <I2C_Master_SB+0x90>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	2b00      	cmp	r3, #0
 800337e:	d037      	beq.n	80033f0 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d104      	bne.n	8003394 <I2C_Master_SB+0xa4>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d02d      	beq.n	80033f0 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a2:	605a      	str	r2, [r3, #4]
}
 80033a4:	e024      	b.n	80033f0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10e      	bne.n	80033cc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	11db      	asrs	r3, r3, #7
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 0306 	and.w	r3, r3, #6
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f063 030f 	orn	r3, r3, #15
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	611a      	str	r2, [r3, #16]
}
 80033ca:	e011      	b.n	80033f0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d10d      	bne.n	80033f0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	b29b      	uxth	r3, r3
 80033da:	11db      	asrs	r3, r3, #7
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f003 0306 	and.w	r3, r3, #6
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	f063 030e 	orn	r3, r3, #14
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	611a      	str	r2, [r3, #16]
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	b2da      	uxtb	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <I2C_Master_ADD10+0x24>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	2b00      	cmp	r3, #0
 800341e:	d011      	beq.n	8003444 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <I2C_Master_ADD10+0x38>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003442:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003450:	b480      	push	{r7}
 8003452:	b091      	sub	sp, #68	; 0x44
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800345e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b22      	cmp	r3, #34	; 0x22
 8003478:	f040 8169 	bne.w	800374e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10f      	bne.n	80034a4 <I2C_Master_ADDR+0x54>
 8003484:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003488:	2b40      	cmp	r3, #64	; 0x40
 800348a:	d10b      	bne.n	80034a4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348c:	2300      	movs	r3, #0
 800348e:	633b      	str	r3, [r7, #48]	; 0x30
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	633b      	str	r3, [r7, #48]	; 0x30
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	e160      	b.n	8003766 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d11d      	bne.n	80034e8 <I2C_Master_ADDR+0x98>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034b4:	d118      	bne.n	80034e8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b6:	2300      	movs	r3, #0
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034da:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	651a      	str	r2, [r3, #80]	; 0x50
 80034e6:	e13e      	b.n	8003766 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d113      	bne.n	800351a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f2:	2300      	movs	r3, #0
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	62bb      	str	r3, [r7, #40]	; 0x28
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e115      	b.n	8003746 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	f040 808a 	bne.w	800363a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003528:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800352c:	d137      	bne.n	800359e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800354c:	d113      	bne.n	8003576 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	e0e7      	b.n	8003746 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	623b      	str	r3, [r7, #32]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	623b      	str	r3, [r7, #32]
 800358a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	e0d3      	b.n	8003746 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d02e      	beq.n	8003602 <I2C_Master_ADDR+0x1b2>
 80035a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d02b      	beq.n	8003602 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80035aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ac:	2b12      	cmp	r3, #18
 80035ae:	d102      	bne.n	80035b6 <I2C_Master_ADDR+0x166>
 80035b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d125      	bne.n	8003602 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d00e      	beq.n	80035da <I2C_Master_ADDR+0x18a>
 80035bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d00b      	beq.n	80035da <I2C_Master_ADDR+0x18a>
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d008      	beq.n	80035da <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	e007      	b.n	80035ea <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	e0a1      	b.n	8003746 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003610:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e085      	b.n	8003746 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d14d      	bne.n	80036e0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	2b04      	cmp	r3, #4
 8003648:	d016      	beq.n	8003678 <I2C_Master_ADDR+0x228>
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	2b02      	cmp	r3, #2
 800364e:	d013      	beq.n	8003678 <I2C_Master_ADDR+0x228>
 8003650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003652:	2b10      	cmp	r3, #16
 8003654:	d010      	beq.n	8003678 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003664:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e007      	b.n	8003688 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003686:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003696:	d117      	bne.n	80036c8 <I2C_Master_ADDR+0x278>
 8003698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800369e:	d00b      	beq.n	80036b8 <I2C_Master_ADDR+0x268>
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d008      	beq.n	80036b8 <I2C_Master_ADDR+0x268>
 80036a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d005      	beq.n	80036b8 <I2C_Master_ADDR+0x268>
 80036ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ae:	2b10      	cmp	r3, #16
 80036b0:	d002      	beq.n	80036b8 <I2C_Master_ADDR+0x268>
 80036b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d107      	bne.n	80036c8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036c6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	e032      	b.n	8003746 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036ee:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036fe:	d117      	bne.n	8003730 <I2C_Master_ADDR+0x2e0>
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003706:	d00b      	beq.n	8003720 <I2C_Master_ADDR+0x2d0>
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	2b01      	cmp	r3, #1
 800370c:	d008      	beq.n	8003720 <I2C_Master_ADDR+0x2d0>
 800370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003710:	2b08      	cmp	r3, #8
 8003712:	d005      	beq.n	8003720 <I2C_Master_ADDR+0x2d0>
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	2b10      	cmp	r3, #16
 8003718:	d002      	beq.n	8003720 <I2C_Master_ADDR+0x2d0>
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	2b20      	cmp	r3, #32
 800371e:	d107      	bne.n	8003730 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800372e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800374c:	e00b      	b.n	8003766 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
}
 8003764:	e7ff      	b.n	8003766 <I2C_Master_ADDR+0x316>
 8003766:	bf00      	nop
 8003768:	3744      	adds	r7, #68	; 0x44
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003780:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d02b      	beq.n	80037e4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	781a      	ldrb	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d114      	bne.n	80037e4 <I2C_SlaveTransmit_TXE+0x72>
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	2b29      	cmp	r3, #41	; 0x29
 80037be:	d111      	bne.n	80037e4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2221      	movs	r2, #33	; 0x21
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2228      	movs	r2, #40	; 0x28
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff fa62 	bl	8002ca8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d011      	beq.n	8003822 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d02c      	beq.n	80038a2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d114      	bne.n	80038a2 <I2C_SlaveReceive_RXNE+0x74>
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	2b2a      	cmp	r3, #42	; 0x2a
 800387c:	d111      	bne.n	80038a2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2222      	movs	r2, #34	; 0x22
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2228      	movs	r2, #40	; 0x28
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff fa0d 	bl	8002cbc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d012      	beq.n	80038e2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003908:	2b28      	cmp	r3, #40	; 0x28
 800390a:	d127      	bne.n	800395c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800391a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	09db      	lsrs	r3, r3, #7
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d103      	bne.n	8003940 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	81bb      	strh	r3, [r7, #12]
 800393e:	e002      	b.n	8003946 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800394e:	89ba      	ldrh	r2, [r7, #12]
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	4619      	mov	r1, r3
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff f9bb 	bl	8002cd0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800395a:	e008      	b.n	800396e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0202 	mvn.w	r2, #2
 8003964:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003986:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003996:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003998:	2300      	movs	r3, #0
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d4:	d172      	bne.n	8003abc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b22      	cmp	r3, #34	; 0x22
 80039da:	d002      	beq.n	80039e2 <I2C_Slave_STOPF+0x6a>
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b2a      	cmp	r3, #42	; 0x2a
 80039e0:	d135      	bne.n	8003a4e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f043 0204 	orr.w	r2, r3, #4
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd ff58 	bl	80018d0 <HAL_DMA_GetState>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d049      	beq.n	8003aba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	4a69      	ldr	r2, [pc, #420]	; (8003bd0 <I2C_Slave_STOPF+0x258>)
 8003a2c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fd fda0 	bl	8001578 <HAL_DMA_Abort_IT>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d03d      	beq.n	8003aba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a4c:	e035      	b.n	8003aba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f043 0204 	orr.w	r2, r3, #4
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fd ff22 	bl	80018d0 <HAL_DMA_GetState>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d014      	beq.n	8003abc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	4a4e      	ldr	r2, [pc, #312]	; (8003bd0 <I2C_Slave_STOPF+0x258>)
 8003a98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd fd6a 	bl	8001578 <HAL_DMA_Abort_IT>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4798      	blx	r3
 8003ab8:	e000      	b.n	8003abc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003aba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d03e      	beq.n	8003b44 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d112      	bne.n	8003afa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b04:	2b40      	cmp	r3, #64	; 0x40
 8003b06:	d112      	bne.n	8003b2e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	f043 0204 	orr.w	r2, r3, #4
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f843 	bl	8003bd8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003b52:	e039      	b.n	8003bc8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b2a      	cmp	r3, #42	; 0x2a
 8003b58:	d109      	bne.n	8003b6e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2228      	movs	r2, #40	; 0x28
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff f8a7 	bl	8002cbc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b28      	cmp	r3, #40	; 0x28
 8003b78:	d111      	bne.n	8003b9e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <I2C_Slave_STOPF+0x25c>)
 8003b7e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff f8a8 	bl	8002cec <HAL_I2C_ListenCpltCallback>
}
 8003b9c:	e014      	b.n	8003bc8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	2b22      	cmp	r3, #34	; 0x22
 8003ba4:	d002      	beq.n	8003bac <I2C_Slave_STOPF+0x234>
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b22      	cmp	r3, #34	; 0x22
 8003baa:	d10d      	bne.n	8003bc8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff f87a 	bl	8002cbc <HAL_I2C_SlaveRxCpltCallback>
}
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	080042c1 	.word	0x080042c1
 8003bd4:	ffff0000 	.word	0xffff0000

08003bd8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be6:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d10a      	bne.n	8003c0a <I2C_ITError+0x32>
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2b22      	cmp	r3, #34	; 0x22
 8003bf8:	d107      	bne.n	8003c0a <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c10:	2b28      	cmp	r3, #40	; 0x28
 8003c12:	d107      	bne.n	8003c24 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2228      	movs	r2, #40	; 0x28
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c22:	e015      	b.n	8003c50 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c32:	d006      	beq.n	8003c42 <I2C_ITError+0x6a>
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	2b60      	cmp	r3, #96	; 0x60
 8003c38:	d003      	beq.n	8003c42 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c5e:	d162      	bne.n	8003d26 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d020      	beq.n	8003cc0 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c82:	4a5f      	ldr	r2, [pc, #380]	; (8003e00 <I2C_ITError+0x228>)
 8003c84:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fd fc74 	bl	8001578 <HAL_DMA_Abort_IT>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8089 	beq.w	8003daa <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cba:	4610      	mov	r0, r2
 8003cbc:	4798      	blx	r3
 8003cbe:	e074      	b.n	8003daa <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	4a4e      	ldr	r2, [pc, #312]	; (8003e00 <I2C_ITError+0x228>)
 8003cc6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fd fc53 	bl	8001578 <HAL_DMA_Abort_IT>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d068      	beq.n	8003daa <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce2:	2b40      	cmp	r3, #64	; 0x40
 8003ce4:	d10b      	bne.n	8003cfe <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0201 	bic.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d20:	4610      	mov	r0, r2
 8003d22:	4798      	blx	r3
 8003d24:	e041      	b.n	8003daa <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b60      	cmp	r3, #96	; 0x60
 8003d30:	d125      	bne.n	8003d7e <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4a:	2b40      	cmp	r3, #64	; 0x40
 8003d4c:	d10b      	bne.n	8003d66 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fe ffd6 	bl	8002d28 <HAL_I2C_AbortCpltCallback>
 8003d7c:	e015      	b.n	8003daa <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d10b      	bne.n	8003da4 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7fe ffb5 	bl	8002d14 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d11b      	bne.n	8003df6 <I2C_ITError+0x21e>
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	2b28      	cmp	r3, #40	; 0x28
 8003dc2:	d118      	bne.n	8003df6 <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dd2:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <I2C_ITError+0x22c>)
 8003dd8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7fe ff7b 	bl	8002cec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	080042c1 	.word	0x080042c1
 8003e04:	ffff0000 	.word	0xffff0000

08003e08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	4608      	mov	r0, r1
 8003e12:	4611      	mov	r1, r2
 8003e14:	461a      	mov	r2, r3
 8003e16:	4603      	mov	r3, r0
 8003e18:	817b      	strh	r3, [r7, #10]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	813b      	strh	r3, [r7, #8]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 faad 	bl	800439e <I2C_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e05f      	b.n	8003f0e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e4e:	897b      	ldrh	r3, [r7, #10]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	6a3a      	ldr	r2, [r7, #32]
 8003e62:	492d      	ldr	r1, [pc, #180]	; (8003f18 <I2C_RequestMemoryWrite+0x110>)
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 faf1 	bl	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e04c      	b.n	8003f0e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8c:	6a39      	ldr	r1, [r7, #32]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fb5b 	bl	800454a <I2C_WaitOnTXEFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d107      	bne.n	8003eb2 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e02b      	b.n	8003f0e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ebc:	893b      	ldrh	r3, [r7, #8]
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]
 8003ec6:	e021      	b.n	8003f0c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ec8:	893b      	ldrh	r3, [r7, #8]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed8:	6a39      	ldr	r1, [r7, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fb35 	bl	800454a <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d107      	bne.n	8003efe <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e005      	b.n	8003f0e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f02:	893b      	ldrh	r3, [r7, #8]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	00010002 	.word	0x00010002

08003f1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	817b      	strh	r3, [r7, #10]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	813b      	strh	r3, [r7, #8]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fa1b 	bl	800439e <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e09e      	b.n	80040b0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f72:	897b      	ldrh	r3, [r7, #10]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	6a3a      	ldr	r2, [r7, #32]
 8003f86:	494c      	ldr	r1, [pc, #304]	; (80040b8 <I2C_RequestMemoryRead+0x19c>)
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 fa5f 	bl	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e08b      	b.n	80040b0 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb0:	6a39      	ldr	r1, [r7, #32]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fac9 	bl	800454a <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00d      	beq.n	8003fda <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d107      	bne.n	8003fd6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e06a      	b.n	80040b0 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d105      	bne.n	8003fec <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fe0:	893b      	ldrh	r3, [r7, #8]
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	611a      	str	r2, [r3, #16]
 8003fea:	e021      	b.n	8004030 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fec:	893b      	ldrh	r3, [r7, #8]
 8003fee:	0a1b      	lsrs	r3, r3, #8
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffc:	6a39      	ldr	r1, [r7, #32]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 faa3 	bl	800454a <I2C_WaitOnTXEFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	2b04      	cmp	r3, #4
 8004010:	d107      	bne.n	8004022 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004020:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e044      	b.n	80040b0 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004026:	893b      	ldrh	r3, [r7, #8]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004032:	6a39      	ldr	r1, [r7, #32]
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fa88 	bl	800454a <I2C_WaitOnTXEFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00d      	beq.n	800405c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	2b04      	cmp	r3, #4
 8004046:	d107      	bne.n	8004058 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004056:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e029      	b.n	80040b0 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800406a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	2200      	movs	r2, #0
 8004074:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f990 	bl	800439e <I2C_WaitOnFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e013      	b.n	80040b0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004088:	897b      	ldrh	r3, [r7, #10]
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	b2da      	uxtb	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	6a3a      	ldr	r2, [r7, #32]
 800409c:	4906      	ldr	r1, [pc, #24]	; (80040b8 <I2C_RequestMemoryRead+0x19c>)
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f9d4 	bl	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	00010002 	.word	0x00010002

080040bc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80040ee:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	2200      	movs	r2, #0
 80040f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	2200      	movs	r2, #0
 80040fe:	63da      	str	r2, [r3, #60]	; 0x3c

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004106:	2b21      	cmp	r3, #33	; 0x21
 8004108:	d007      	beq.n	800411a <I2C_DMAXferCplt+0x5e>
 800410a:	7cfb      	ldrb	r3, [r7, #19]
 800410c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004110:	2b22      	cmp	r3, #34	; 0x22
 8004112:	d131      	bne.n	8004178 <I2C_DMAXferCplt+0xbc>
 8004114:	7cbb      	ldrb	r3, [r7, #18]
 8004116:	2b20      	cmp	r3, #32
 8004118:	d12e      	bne.n	8004178 <I2C_DMAXferCplt+0xbc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004128:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2200      	movs	r2, #0
 800412e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004130:	7cfb      	ldrb	r3, [r7, #19]
 8004132:	2b29      	cmp	r3, #41	; 0x29
 8004134:	d10a      	bne.n	800414c <I2C_DMAXferCplt+0x90>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2221      	movs	r2, #33	; 0x21
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2228      	movs	r2, #40	; 0x28
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004144:	6978      	ldr	r0, [r7, #20]
 8004146:	f7fe fdaf 	bl	8002ca8 <HAL_I2C_SlaveTxCpltCallback>
 800414a:	e00c      	b.n	8004166 <I2C_DMAXferCplt+0xaa>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	2b2a      	cmp	r3, #42	; 0x2a
 8004150:	d109      	bne.n	8004166 <I2C_DMAXferCplt+0xaa>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2222      	movs	r2, #34	; 0x22
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2228      	movs	r2, #40	; 0x28
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004160:	6978      	ldr	r0, [r7, #20]
 8004162:	f7fe fdab 	bl	8002cbc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004174:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004176:	e06a      	b.n	800424e <I2C_DMAXferCplt+0x192>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d064      	beq.n	800424e <I2C_DMAXferCplt+0x192>
    if (hi2c->XferCount == (uint16_t)1)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d107      	bne.n	800419e <I2C_DMAXferCplt+0xe2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041ac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041b4:	d009      	beq.n	80041ca <I2C_DMAXferCplt+0x10e>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d006      	beq.n	80041ca <I2C_DMAXferCplt+0x10e>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80041c2:	d002      	beq.n	80041ca <I2C_DMAXferCplt+0x10e>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d107      	bne.n	80041da <I2C_DMAXferCplt+0x11e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041e8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2200      	movs	r2, #0
 80041fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <I2C_DMAXferCplt+0x154>
      HAL_I2C_ErrorCallback(hi2c);
 8004208:	6978      	ldr	r0, [r7, #20]
 800420a:	f7fe fd83 	bl	8002d14 <HAL_I2C_ErrorCallback>
}
 800420e:	e01e      	b.n	800424e <I2C_DMAXferCplt+0x192>
      hi2c->State = HAL_I2C_STATE_READY;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b40      	cmp	r3, #64	; 0x40
 8004222:	d10a      	bne.n	800423a <I2C_DMAXferCplt+0x17e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2200      	movs	r2, #0
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004232:	6978      	ldr	r0, [r7, #20]
 8004234:	f002 fed4 	bl	8006fe0 <HAL_I2C_MemRxCpltCallback>
}
 8004238:	e009      	b.n	800424e <I2C_DMAXferCplt+0x192>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2212      	movs	r2, #18
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004248:	6978      	ldr	r0, [r7, #20]
 800424a:	f7fe fd23 	bl	8002c94 <HAL_I2C_MasterRxCpltCallback>
}
 800424e:	bf00      	nop
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004268:	2200      	movs	r2, #0
 800426a:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	2200      	movs	r2, #0
 8004272:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7fd fb39 	bl	80018ec <HAL_DMA_GetError>
 800427a:	4603      	mov	r3, r0
 800427c:	2b02      	cmp	r3, #2
 800427e:	d01b      	beq.n	80042b8 <I2C_DMAError+0x62>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f043 0210 	orr.w	r2, r3, #16
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7fe fd2e 	bl	8002d14 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042da:	2200      	movs	r2, #0
 80042dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e2:	2200      	movs	r2, #0
 80042e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004300:	2200      	movs	r2, #0
 8004302:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	2200      	movs	r2, #0
 800430a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0201 	bic.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b60      	cmp	r3, #96	; 0x60
 8004326:	d10e      	bne.n	8004346 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f7fe fcf2 	bl	8002d28 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004344:	e027      	b.n	8004396 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004346:	7afb      	ldrb	r3, [r7, #11]
 8004348:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800434c:	2b28      	cmp	r3, #40	; 0x28
 800434e:	d117      	bne.n	8004380 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800436e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2228      	movs	r2, #40	; 0x28
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800437e:	e007      	b.n	8004390 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7fe fcbf 	bl	8002d14 <HAL_I2C_ErrorCallback>
}
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	4613      	mov	r3, r2
 80043ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043ae:	e025      	b.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d021      	beq.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b8:	f7fc fdf0 	bl	8000f9c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d302      	bcc.n	80043ce <I2C_WaitOnFlagUntilTimeout+0x30>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d116      	bne.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	f043 0220 	orr.w	r2, r3, #32
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e023      	b.n	8004444 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	0c1b      	lsrs	r3, r3, #16
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	d10d      	bne.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	43da      	mvns	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	4013      	ands	r3, r2
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	e00c      	b.n	800443c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	43da      	mvns	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4013      	ands	r3, r2
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	429a      	cmp	r2, r3
 8004440:	d0b6      	beq.n	80043b0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800445a:	e051      	b.n	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800446a:	d123      	bne.n	80044b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004484:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f043 0204 	orr.w	r2, r3, #4
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e046      	b.n	8004542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ba:	d021      	beq.n	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044bc:	f7fc fd6e 	bl	8000f9c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d302      	bcc.n	80044d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d116      	bne.n	8004500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e020      	b.n	8004542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	0c1b      	lsrs	r3, r3, #16
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d10c      	bne.n	8004524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	43da      	mvns	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf14      	ite	ne
 800451c:	2301      	movne	r3, #1
 800451e:	2300      	moveq	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	e00b      	b.n	800453c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	43da      	mvns	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf14      	ite	ne
 8004536:	2301      	movne	r3, #1
 8004538:	2300      	moveq	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d18d      	bne.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004556:	e02d      	b.n	80045b4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f8ce 	bl	80046fa <I2C_IsAcknowledgeFailed>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e02d      	b.n	80045c4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d021      	beq.n	80045b4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004570:	f7fc fd14 	bl	8000f9c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	429a      	cmp	r2, r3
 800457e:	d302      	bcc.n	8004586 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d116      	bne.n	80045b4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f043 0220 	orr.w	r2, r3, #32
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e007      	b.n	80045c4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045be:	2b80      	cmp	r3, #128	; 0x80
 80045c0:	d1ca      	bne.n	8004558 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045d8:	e02d      	b.n	8004636 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f88d 	bl	80046fa <I2C_IsAcknowledgeFailed>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e02d      	b.n	8004646 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d021      	beq.n	8004636 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f2:	f7fc fcd3 	bl	8000f9c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d116      	bne.n	8004636 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e007      	b.n	8004646 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b04      	cmp	r3, #4
 8004642:	d1ca      	bne.n	80045da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800465a:	e042      	b.n	80046e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	2b10      	cmp	r3, #16
 8004668:	d119      	bne.n	800469e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f06f 0210 	mvn.w	r2, #16
 8004672:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e029      	b.n	80046f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469e:	f7fc fc7d 	bl	8000f9c <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d302      	bcc.n	80046b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d116      	bne.n	80046e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f043 0220 	orr.w	r2, r3, #32
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e007      	b.n	80046f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d1b5      	bne.n	800465c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004710:	d11b      	bne.n	800474a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800471a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f043 0204 	orr.w	r2, r3, #4
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004768:	d103      	bne.n	8004772 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004770:	e007      	b.n	8004782 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800477a:	d102      	bne.n	8004782 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2208      	movs	r2, #8
 8004780:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e22d      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d075      	beq.n	800489a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ae:	4ba3      	ldr	r3, [pc, #652]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d00c      	beq.n	80047d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ba:	4ba0      	ldr	r3, [pc, #640]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d112      	bne.n	80047ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c6:	4b9d      	ldr	r3, [pc, #628]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d2:	d10b      	bne.n	80047ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	4b99      	ldr	r3, [pc, #612]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05b      	beq.n	8004898 <HAL_RCC_OscConfig+0x108>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d157      	bne.n	8004898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e208      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f4:	d106      	bne.n	8004804 <HAL_RCC_OscConfig+0x74>
 80047f6:	4b91      	ldr	r3, [pc, #580]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a90      	ldr	r2, [pc, #576]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	e01d      	b.n	8004840 <HAL_RCC_OscConfig+0xb0>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800480c:	d10c      	bne.n	8004828 <HAL_RCC_OscConfig+0x98>
 800480e:	4b8b      	ldr	r3, [pc, #556]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a8a      	ldr	r2, [pc, #552]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	4b88      	ldr	r3, [pc, #544]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a87      	ldr	r2, [pc, #540]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	e00b      	b.n	8004840 <HAL_RCC_OscConfig+0xb0>
 8004828:	4b84      	ldr	r3, [pc, #528]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a83      	ldr	r2, [pc, #524]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 800482e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	4b81      	ldr	r3, [pc, #516]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a80      	ldr	r2, [pc, #512]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 800483a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800483e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d013      	beq.n	8004870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fc fba8 	bl	8000f9c <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004850:	f7fc fba4 	bl	8000f9c <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	; 0x64
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e1cd      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004862:	4b76      	ldr	r3, [pc, #472]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0xc0>
 800486e:	e014      	b.n	800489a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004870:	f7fc fb94 	bl	8000f9c <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004878:	f7fc fb90 	bl	8000f9c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b64      	cmp	r3, #100	; 0x64
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e1b9      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488a:	4b6c      	ldr	r3, [pc, #432]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0xe8>
 8004896:	e000      	b.n	800489a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d063      	beq.n	800496e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048a6:	4b65      	ldr	r3, [pc, #404]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00b      	beq.n	80048ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b2:	4b62      	ldr	r3, [pc, #392]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d11c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048be:	4b5f      	ldr	r3, [pc, #380]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d116      	bne.n	80048f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ca:	4b5c      	ldr	r3, [pc, #368]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_RCC_OscConfig+0x152>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d001      	beq.n	80048e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e18d      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e2:	4b56      	ldr	r3, [pc, #344]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4952      	ldr	r1, [pc, #328]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f6:	e03a      	b.n	800496e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d020      	beq.n	8004942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004900:	4b4f      	ldr	r3, [pc, #316]	; (8004a40 <HAL_RCC_OscConfig+0x2b0>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004906:	f7fc fb49 	bl	8000f9c <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800490e:	f7fc fb45 	bl	8000f9c <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e16e      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004920:	4b46      	ldr	r3, [pc, #280]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492c:	4b43      	ldr	r3, [pc, #268]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4940      	ldr	r1, [pc, #256]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 800493c:	4313      	orrs	r3, r2
 800493e:	600b      	str	r3, [r1, #0]
 8004940:	e015      	b.n	800496e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004942:	4b3f      	ldr	r3, [pc, #252]	; (8004a40 <HAL_RCC_OscConfig+0x2b0>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fc fb28 	bl	8000f9c <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004950:	f7fc fb24 	bl	8000f9c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e14d      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004962:	4b36      	ldr	r3, [pc, #216]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d030      	beq.n	80049dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004982:	4b30      	ldr	r3, [pc, #192]	; (8004a44 <HAL_RCC_OscConfig+0x2b4>)
 8004984:	2201      	movs	r2, #1
 8004986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004988:	f7fc fb08 	bl	8000f9c <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004990:	f7fc fb04 	bl	8000f9c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e12d      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a2:	4b26      	ldr	r3, [pc, #152]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x200>
 80049ae:	e015      	b.n	80049dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b0:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <HAL_RCC_OscConfig+0x2b4>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fc faf1 	bl	8000f9c <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049be:	f7fc faed 	bl	8000f9c <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e116      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d0:	4b1a      	ldr	r3, [pc, #104]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80049d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f0      	bne.n	80049be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80a0 	beq.w	8004b2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ea:	2300      	movs	r3, #0
 80049ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ee:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10f      	bne.n	8004a1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	4b0f      	ldr	r3, [pc, #60]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	4a0e      	ldr	r2, [pc, #56]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0a:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <HAL_RCC_OscConfig+0x2ac>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_RCC_OscConfig+0x2b8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d121      	bne.n	8004a6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a26:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <HAL_RCC_OscConfig+0x2b8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a07      	ldr	r2, [pc, #28]	; (8004a48 <HAL_RCC_OscConfig+0x2b8>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a32:	f7fc fab3 	bl	8000f9c <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a38:	e011      	b.n	8004a5e <HAL_RCC_OscConfig+0x2ce>
 8004a3a:	bf00      	nop
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	42470000 	.word	0x42470000
 8004a44:	42470e80 	.word	0x42470e80
 8004a48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4c:	f7fc faa6 	bl	8000f9c <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e0cf      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5e:	4b6a      	ldr	r3, [pc, #424]	; (8004c08 <HAL_RCC_OscConfig+0x478>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d106      	bne.n	8004a80 <HAL_RCC_OscConfig+0x2f0>
 8004a72:	4b66      	ldr	r3, [pc, #408]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	4a65      	ldr	r2, [pc, #404]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7e:	e01c      	b.n	8004aba <HAL_RCC_OscConfig+0x32a>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d10c      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x312>
 8004a88:	4b60      	ldr	r3, [pc, #384]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	4a5f      	ldr	r2, [pc, #380]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004a8e:	f043 0304 	orr.w	r3, r3, #4
 8004a92:	6713      	str	r3, [r2, #112]	; 0x70
 8004a94:	4b5d      	ldr	r3, [pc, #372]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a98:	4a5c      	ldr	r2, [pc, #368]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa0:	e00b      	b.n	8004aba <HAL_RCC_OscConfig+0x32a>
 8004aa2:	4b5a      	ldr	r3, [pc, #360]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	4a59      	ldr	r2, [pc, #356]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	6713      	str	r3, [r2, #112]	; 0x70
 8004aae:	4b57      	ldr	r3, [pc, #348]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	4a56      	ldr	r2, [pc, #344]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004ab4:	f023 0304 	bic.w	r3, r3, #4
 8004ab8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d015      	beq.n	8004aee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac2:	f7fc fa6b 	bl	8000f9c <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac8:	e00a      	b.n	8004ae0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aca:	f7fc fa67 	bl	8000f9c <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e08e      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae0:	4b4a      	ldr	r3, [pc, #296]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ee      	beq.n	8004aca <HAL_RCC_OscConfig+0x33a>
 8004aec:	e014      	b.n	8004b18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aee:	f7fc fa55 	bl	8000f9c <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af4:	e00a      	b.n	8004b0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af6:	f7fc fa51 	bl	8000f9c <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e078      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0c:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1ee      	bne.n	8004af6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b18:	7dfb      	ldrb	r3, [r7, #23]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1e:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	4a3a      	ldr	r2, [pc, #232]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d064      	beq.n	8004bfc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b32:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d05c      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d141      	bne.n	8004bca <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b46:	4b32      	ldr	r3, [pc, #200]	; (8004c10 <HAL_RCC_OscConfig+0x480>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7fc fa26 	bl	8000f9c <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fc fa22 	bl	8000f9c <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e04b      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69da      	ldr	r2, [r3, #28]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	019b      	lsls	r3, r3, #6
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	491d      	ldr	r1, [pc, #116]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b9c:	4b1c      	ldr	r3, [pc, #112]	; (8004c10 <HAL_RCC_OscConfig+0x480>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba2:	f7fc f9fb 	bl	8000f9c <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004baa:	f7fc f9f7 	bl	8000f9c <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e020      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbc:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x41a>
 8004bc8:	e018      	b.n	8004bfc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <HAL_RCC_OscConfig+0x480>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7fc f9e4 	bl	8000f9c <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fc f9e0 	bl	8000f9c <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e009      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <HAL_RCC_OscConfig+0x47c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x448>
 8004bf6:	e001      	b.n	8004bfc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40007000 	.word	0x40007000
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	42470060 	.word	0x42470060

08004c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0ca      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c28:	4b67      	ldr	r3, [pc, #412]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d90c      	bls.n	8004c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c36:	4b64      	ldr	r3, [pc, #400]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3e:	4b62      	ldr	r3, [pc, #392]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0b6      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d020      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c68:	4b58      	ldr	r3, [pc, #352]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	4a57      	ldr	r2, [pc, #348]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c80:	4b52      	ldr	r3, [pc, #328]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4a51      	ldr	r2, [pc, #324]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c8c:	4b4f      	ldr	r3, [pc, #316]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	494c      	ldr	r1, [pc, #304]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d044      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb2:	4b46      	ldr	r3, [pc, #280]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d119      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e07d      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d003      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d107      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd2:	4b3e      	ldr	r3, [pc, #248]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e06d      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce2:	4b3a      	ldr	r3, [pc, #232]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e065      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cf2:	4b36      	ldr	r3, [pc, #216]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f023 0203 	bic.w	r2, r3, #3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	4933      	ldr	r1, [pc, #204]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d04:	f7fc f94a 	bl	8000f9c <HAL_GetTick>
 8004d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0a:	e00a      	b.n	8004d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d0c:	f7fc f946 	bl	8000f9c <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e04d      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d22:	4b2a      	ldr	r3, [pc, #168]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 020c 	and.w	r2, r3, #12
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d1eb      	bne.n	8004d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d34:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d20c      	bcs.n	8004d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d42:	4b21      	ldr	r3, [pc, #132]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b4>)
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4a:	4b1f      	ldr	r3, [pc, #124]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e030      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d68:	4b18      	ldr	r3, [pc, #96]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4915      	ldr	r1, [pc, #84]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d009      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d86:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	490d      	ldr	r1, [pc, #52]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d9a:	f000 f81d 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004d9e:	4601      	mov	r1, r0
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	4a09      	ldr	r2, [pc, #36]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dac:	5cd3      	ldrb	r3, [r2, r3]
 8004dae:	fa21 f303 	lsr.w	r3, r1, r3
 8004db2:	4a08      	ldr	r2, [pc, #32]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004db6:	2000      	movs	r0, #0
 8004db8:	f7fc f8ac 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40023c00 	.word	0x40023c00
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	0800ac8c 	.word	0x0800ac8c
 8004dd4:	20000010 	.word	0x20000010

08004dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	607b      	str	r3, [r7, #4]
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	2300      	movs	r3, #0
 8004de8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dee:	4b63      	ldr	r3, [pc, #396]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d007      	beq.n	8004e0a <HAL_RCC_GetSysClockFreq+0x32>
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d008      	beq.n	8004e10 <HAL_RCC_GetSysClockFreq+0x38>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f040 80b4 	bne.w	8004f6c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e04:	4b5e      	ldr	r3, [pc, #376]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e06:	60bb      	str	r3, [r7, #8]
       break;
 8004e08:	e0b3      	b.n	8004f72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e0a:	4b5e      	ldr	r3, [pc, #376]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004e0c:	60bb      	str	r3, [r7, #8]
      break;
 8004e0e:	e0b0      	b.n	8004f72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e10:	4b5a      	ldr	r3, [pc, #360]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e1a:	4b58      	ldr	r3, [pc, #352]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d04a      	beq.n	8004ebc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e26:	4b55      	ldr	r3, [pc, #340]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	099b      	lsrs	r3, r3, #6
 8004e2c:	f04f 0400 	mov.w	r4, #0
 8004e30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	ea03 0501 	and.w	r5, r3, r1
 8004e3c:	ea04 0602 	and.w	r6, r4, r2
 8004e40:	4629      	mov	r1, r5
 8004e42:	4632      	mov	r2, r6
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	f04f 0400 	mov.w	r4, #0
 8004e4c:	0154      	lsls	r4, r2, #5
 8004e4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e52:	014b      	lsls	r3, r1, #5
 8004e54:	4619      	mov	r1, r3
 8004e56:	4622      	mov	r2, r4
 8004e58:	1b49      	subs	r1, r1, r5
 8004e5a:	eb62 0206 	sbc.w	r2, r2, r6
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	f04f 0400 	mov.w	r4, #0
 8004e66:	0194      	lsls	r4, r2, #6
 8004e68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e6c:	018b      	lsls	r3, r1, #6
 8004e6e:	1a5b      	subs	r3, r3, r1
 8004e70:	eb64 0402 	sbc.w	r4, r4, r2
 8004e74:	f04f 0100 	mov.w	r1, #0
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	00e2      	lsls	r2, r4, #3
 8004e7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e82:	00d9      	lsls	r1, r3, #3
 8004e84:	460b      	mov	r3, r1
 8004e86:	4614      	mov	r4, r2
 8004e88:	195b      	adds	r3, r3, r5
 8004e8a:	eb44 0406 	adc.w	r4, r4, r6
 8004e8e:	f04f 0100 	mov.w	r1, #0
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	0262      	lsls	r2, r4, #9
 8004e98:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004e9c:	0259      	lsls	r1, r3, #9
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4614      	mov	r4, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f04f 0400 	mov.w	r4, #0
 8004eac:	461a      	mov	r2, r3
 8004eae:	4623      	mov	r3, r4
 8004eb0:	f7fb fe8e 	bl	8000bd0 <__aeabi_uldivmod>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	e049      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ebc:	4b2f      	ldr	r3, [pc, #188]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	099b      	lsrs	r3, r3, #6
 8004ec2:	f04f 0400 	mov.w	r4, #0
 8004ec6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	ea03 0501 	and.w	r5, r3, r1
 8004ed2:	ea04 0602 	and.w	r6, r4, r2
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	4632      	mov	r2, r6
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	f04f 0400 	mov.w	r4, #0
 8004ee2:	0154      	lsls	r4, r2, #5
 8004ee4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ee8:	014b      	lsls	r3, r1, #5
 8004eea:	4619      	mov	r1, r3
 8004eec:	4622      	mov	r2, r4
 8004eee:	1b49      	subs	r1, r1, r5
 8004ef0:	eb62 0206 	sbc.w	r2, r2, r6
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	f04f 0400 	mov.w	r4, #0
 8004efc:	0194      	lsls	r4, r2, #6
 8004efe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f02:	018b      	lsls	r3, r1, #6
 8004f04:	1a5b      	subs	r3, r3, r1
 8004f06:	eb64 0402 	sbc.w	r4, r4, r2
 8004f0a:	f04f 0100 	mov.w	r1, #0
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	00e2      	lsls	r2, r4, #3
 8004f14:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f18:	00d9      	lsls	r1, r3, #3
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4614      	mov	r4, r2
 8004f1e:	195b      	adds	r3, r3, r5
 8004f20:	eb44 0406 	adc.w	r4, r4, r6
 8004f24:	f04f 0100 	mov.w	r1, #0
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	02a2      	lsls	r2, r4, #10
 8004f2e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f32:	0299      	lsls	r1, r3, #10
 8004f34:	460b      	mov	r3, r1
 8004f36:	4614      	mov	r4, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f04f 0400 	mov.w	r4, #0
 8004f42:	461a      	mov	r2, r3
 8004f44:	4623      	mov	r3, r4
 8004f46:	f7fb fe43 	bl	8000bd0 <__aeabi_uldivmod>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	0c1b      	lsrs	r3, r3, #16
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f68:	60bb      	str	r3, [r7, #8]
      break;
 8004f6a:	e002      	b.n	8004f72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f6c:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f6e:	60bb      	str	r3, [r7, #8]
      break;
 8004f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f72:	68bb      	ldr	r3, [r7, #8]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	00f42400 	.word	0x00f42400
 8004f84:	007a1200 	.word	0x007a1200

08004f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f8c:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	20000010 	.word	0x20000010

08004fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fa4:	f7ff fff0 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fa8:	4601      	mov	r1, r0
 8004faa:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	0a9b      	lsrs	r3, r3, #10
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4a03      	ldr	r2, [pc, #12]	; (8004fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fb6:	5cd3      	ldrb	r3, [r2, r3]
 8004fb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	0800ac9c 	.word	0x0800ac9c

08004fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fcc:	f7ff ffdc 	bl	8004f88 <HAL_RCC_GetHCLKFreq>
 8004fd0:	4601      	mov	r1, r0
 8004fd2:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	0b5b      	lsrs	r3, r3, #13
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	4a03      	ldr	r2, [pc, #12]	; (8004fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fde:	5cd3      	ldrb	r3, [r2, r3]
 8004fe0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	0800ac9c 	.word	0x0800ac9c

08004ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d105      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005014:	2b00      	cmp	r3, #0
 8005016:	d035      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005018:	4b62      	ldr	r3, [pc, #392]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800501e:	f7fb ffbd 	bl	8000f9c <HAL_GetTick>
 8005022:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005026:	f7fb ffb9 	bl	8000f9c <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e0b0      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005038:	4b5b      	ldr	r3, [pc, #364]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f0      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	019a      	lsls	r2, r3, #6
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	071b      	lsls	r3, r3, #28
 8005050:	4955      	ldr	r1, [pc, #340]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005058:	4b52      	ldr	r3, [pc, #328]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800505e:	f7fb ff9d 	bl	8000f9c <HAL_GetTick>
 8005062:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005064:	e008      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005066:	f7fb ff99 	bl	8000f9c <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e090      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005078:	4b4b      	ldr	r3, [pc, #300]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8083 	beq.w	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	4b44      	ldr	r3, [pc, #272]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	4a43      	ldr	r2, [pc, #268]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a0:	6413      	str	r3, [r2, #64]	; 0x40
 80050a2:	4b41      	ldr	r3, [pc, #260]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050ae:	4b3f      	ldr	r3, [pc, #252]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a3e      	ldr	r2, [pc, #248]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050ba:	f7fb ff6f 	bl	8000f9c <HAL_GetTick>
 80050be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050c2:	f7fb ff6b 	bl	8000f9c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e062      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050d4:	4b35      	ldr	r3, [pc, #212]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050e0:	4b31      	ldr	r3, [pc, #196]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02f      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d028      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050fe:	4b2a      	ldr	r3, [pc, #168]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005106:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005108:	4b29      	ldr	r3, [pc, #164]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800510a:	2201      	movs	r2, #1
 800510c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800510e:	4b28      	ldr	r3, [pc, #160]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005114:	4a24      	ldr	r2, [pc, #144]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800511a:	4b23      	ldr	r3, [pc, #140]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800511c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b01      	cmp	r3, #1
 8005124:	d114      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005126:	f7fb ff39 	bl	8000f9c <HAL_GetTick>
 800512a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800512c:	e00a      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800512e:	f7fb ff35 	bl	8000f9c <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	f241 3288 	movw	r2, #5000	; 0x1388
 800513c:	4293      	cmp	r3, r2
 800513e:	d901      	bls.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e02a      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005144:	4b18      	ldr	r3, [pc, #96]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0ee      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005158:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800515c:	d10d      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800515e:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800516e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005172:	490d      	ldr	r1, [pc, #52]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005174:	4313      	orrs	r3, r2
 8005176:	608b      	str	r3, [r1, #8]
 8005178:	e005      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005180:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005184:	6093      	str	r3, [r2, #8]
 8005186:	4b08      	ldr	r3, [pc, #32]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005188:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005192:	4905      	ldr	r1, [pc, #20]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005194:	4313      	orrs	r3, r2
 8005196:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	42470068 	.word	0x42470068
 80051a8:	40023800 	.word	0x40023800
 80051ac:	40007000 	.word	0x40007000
 80051b0:	42470e40 	.word	0x42470e40

080051b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e083      	b.n	80052ce <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	7f5b      	ldrb	r3, [r3, #29]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f003 fa94 	bl	8008704 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	22ca      	movs	r2, #202	; 0xca
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2253      	movs	r2, #83	; 0x53
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f897 	bl	8005326 <RTC_EnterInitMode>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	22ff      	movs	r2, #255	; 0xff
 8005204:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2204      	movs	r2, #4
 800520a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e05e      	b.n	80052ce <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800521e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005222:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6899      	ldr	r1, [r3, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68d2      	ldr	r2, [r2, #12]
 800524a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6919      	ldr	r1, [r3, #16]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	041a      	lsls	r2, r3, #16
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800526e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10e      	bne.n	800529c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f829 	bl	80052d6 <HAL_RTC_WaitForSynchro>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	22ff      	movs	r2, #255	; 0xff
 8005290:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2204      	movs	r2, #4
 8005296:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e018      	b.n	80052ce <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	22ff      	movs	r2, #255	; 0xff
 80052c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80052cc:	2300      	movs	r3, #0
  }
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052f0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052f2:	f7fb fe53 	bl	8000f9c <HAL_GetTick>
 80052f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80052f8:	e009      	b.n	800530e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80052fa:	f7fb fe4f 	bl	8000f9c <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005308:	d901      	bls.n	800530e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e007      	b.n	800531e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0ee      	beq.n	80052fa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d119      	bne.n	8005374 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f04f 32ff 	mov.w	r2, #4294967295
 8005348:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800534a:	f7fb fe27 	bl	8000f9c <HAL_GetTick>
 800534e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005350:	e009      	b.n	8005366 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005352:	f7fb fe23 	bl	8000f9c <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005360:	d901      	bls.n	8005366 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e007      	b.n	8005376 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0ee      	beq.n	8005352 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e056      	b.n	800543e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f003 f9c0 	bl	8008730 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	ea42 0103 	orr.w	r1, r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	0c1b      	lsrs	r3, r3, #16
 800540e:	f003 0104 	and.w	r1, r3, #4
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800542c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e01d      	b.n	8005494 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d106      	bne.n	8005472 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f003 fa0b 	bl	8008888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3304      	adds	r3, #4
 8005482:	4619      	mov	r1, r3
 8005484:	4610      	mov	r0, r2
 8005486:	f000 f9ad 	bl	80057e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b06      	cmp	r3, #6
 80054bc:	d007      	beq.n	80054ce <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f042 0201 	orr.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6a1a      	ldr	r2, [r3, #32]
 80054fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80054fe:	4013      	ands	r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10f      	bne.n	8005524 <HAL_TIM_Base_Stop+0x40>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	f240 4344 	movw	r3, #1092	; 0x444
 800550e:	4013      	ands	r3, r2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d107      	bne.n	8005524 <HAL_TIM_Base_Stop+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0201 	bic.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0201 	orr.w	r2, r2, #1
 8005550:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b06      	cmp	r3, #6
 8005562:	d007      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b02      	cmp	r3, #2
 8005596:	d122      	bne.n	80055de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d11b      	bne.n	80055de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f06f 0202 	mvn.w	r2, #2
 80055ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f8ee 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 80055ca:	e005      	b.n	80055d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f8e0 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f8f1 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d122      	bne.n	8005632 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d11b      	bne.n	8005632 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f06f 0204 	mvn.w	r2, #4
 8005602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f8c4 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 800561e:	e005      	b.n	800562c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f8b6 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8c7 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b08      	cmp	r3, #8
 800563e:	d122      	bne.n	8005686 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b08      	cmp	r3, #8
 800564c:	d11b      	bne.n	8005686 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f06f 0208 	mvn.w	r2, #8
 8005656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2204      	movs	r2, #4
 800565c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	f003 0303 	and.w	r3, r3, #3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f89a 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 8005672:	e005      	b.n	8005680 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f88c 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f89d 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b10      	cmp	r3, #16
 8005692:	d122      	bne.n	80056da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0310 	and.w	r3, r3, #16
 800569e:	2b10      	cmp	r3, #16
 80056a0:	d11b      	bne.n	80056da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f06f 0210 	mvn.w	r2, #16
 80056aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2208      	movs	r2, #8
 80056b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f870 	bl	80057a6 <HAL_TIM_IC_CaptureCallback>
 80056c6:	e005      	b.n	80056d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f862 	bl	8005792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f873 	bl	80057ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d10e      	bne.n	8005706 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d107      	bne.n	8005706 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f06f 0201 	mvn.w	r2, #1
 80056fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 fba9 	bl	8006e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005710:	2b80      	cmp	r3, #128	; 0x80
 8005712:	d10e      	bne.n	8005732 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571e:	2b80      	cmp	r3, #128	; 0x80
 8005720:	d107      	bne.n	8005732 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800572a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f903 	bl	8005938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d10e      	bne.n	800575e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574a:	2b40      	cmp	r3, #64	; 0x40
 800574c:	d107      	bne.n	800575e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f838 	bl	80057ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b20      	cmp	r3, #32
 800576a:	d10e      	bne.n	800578a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b20      	cmp	r3, #32
 8005778:	d107      	bne.n	800578a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f06f 0220 	mvn.w	r2, #32
 8005782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f8cd 	bl	8005924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a40      	ldr	r2, [pc, #256]	; (80058f8 <TIM_Base_SetConfig+0x114>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d013      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005802:	d00f      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a3d      	ldr	r2, [pc, #244]	; (80058fc <TIM_Base_SetConfig+0x118>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00b      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a3c      	ldr	r2, [pc, #240]	; (8005900 <TIM_Base_SetConfig+0x11c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d007      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a3b      	ldr	r2, [pc, #236]	; (8005904 <TIM_Base_SetConfig+0x120>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a3a      	ldr	r2, [pc, #232]	; (8005908 <TIM_Base_SetConfig+0x124>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d108      	bne.n	8005836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2f      	ldr	r2, [pc, #188]	; (80058f8 <TIM_Base_SetConfig+0x114>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d02b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005844:	d027      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2c      	ldr	r2, [pc, #176]	; (80058fc <TIM_Base_SetConfig+0x118>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d023      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2b      	ldr	r2, [pc, #172]	; (8005900 <TIM_Base_SetConfig+0x11c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01f      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2a      	ldr	r2, [pc, #168]	; (8005904 <TIM_Base_SetConfig+0x120>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d01b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a29      	ldr	r2, [pc, #164]	; (8005908 <TIM_Base_SetConfig+0x124>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d017      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a28      	ldr	r2, [pc, #160]	; (800590c <TIM_Base_SetConfig+0x128>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a27      	ldr	r2, [pc, #156]	; (8005910 <TIM_Base_SetConfig+0x12c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00f      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a26      	ldr	r2, [pc, #152]	; (8005914 <TIM_Base_SetConfig+0x130>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00b      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a25      	ldr	r2, [pc, #148]	; (8005918 <TIM_Base_SetConfig+0x134>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d007      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a24      	ldr	r2, [pc, #144]	; (800591c <TIM_Base_SetConfig+0x138>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d003      	beq.n	8005896 <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a23      	ldr	r2, [pc, #140]	; (8005920 <TIM_Base_SetConfig+0x13c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d108      	bne.n	80058a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800589c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a0a      	ldr	r2, [pc, #40]	; (80058f8 <TIM_Base_SetConfig+0x114>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_Base_SetConfig+0xf8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a0c      	ldr	r2, [pc, #48]	; (8005908 <TIM_Base_SetConfig+0x124>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d103      	bne.n	80058e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	615a      	str	r2, [r3, #20]
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40010000 	.word	0x40010000
 80058fc:	40000400 	.word	0x40000400
 8005900:	40000800 	.word	0x40000800
 8005904:	40000c00 	.word	0x40000c00
 8005908:	40010400 	.word	0x40010400
 800590c:	40014000 	.word	0x40014000
 8005910:	40014400 	.word	0x40014400
 8005914:	40014800 	.word	0x40014800
 8005918:	40001800 	.word	0x40001800
 800591c:	40001c00 	.word	0x40001c00
 8005920:	40002000 	.word	0x40002000

08005924 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e03f      	b.n	80059de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f002 ffc0 	bl	80088f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2224      	movs	r2, #36	; 0x24
 800597c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800598e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f90b 	bl	8005bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b088      	sub	sp, #32
 80059ea:	af02      	add	r7, sp, #8
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	603b      	str	r3, [r7, #0]
 80059f2:	4613      	mov	r3, r2
 80059f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	f040 8083 	bne.w	8005b0e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_UART_Transmit+0x2e>
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e07b      	b.n	8005b10 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Transmit+0x40>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e074      	b.n	8005b10 <HAL_UART_Transmit+0x12a>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2221      	movs	r2, #33	; 0x21
 8005a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005a3c:	f7fb faae 	bl	8000f9c <HAL_GetTick>
 8005a40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	88fa      	ldrh	r2, [r7, #6]
 8005a46:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	88fa      	ldrh	r2, [r7, #6]
 8005a4c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a4e:	e042      	b.n	8005ad6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a66:	d122      	bne.n	8005aae <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2180      	movs	r1, #128	; 0x80
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f850 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e046      	b.n	8005b10 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a94:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d103      	bne.n	8005aa6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	3302      	adds	r3, #2
 8005aa2:	60bb      	str	r3, [r7, #8]
 8005aa4:	e017      	b.n	8005ad6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60bb      	str	r3, [r7, #8]
 8005aac:	e013      	b.n	8005ad6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2180      	movs	r1, #128	; 0x80
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 f82d 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e023      	b.n	8005b10 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	60ba      	str	r2, [r7, #8]
 8005ace:	781a      	ldrb	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1b7      	bne.n	8005a50 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2140      	movs	r1, #64	; 0x40
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 f814 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e00a      	b.n	8005b10 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e000      	b.n	8005b10 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005b0e:	2302      	movs	r3, #2
  }
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b28:	e02c      	b.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d028      	beq.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b38:	f7fb fa30 	bl	8000f9c <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d21d      	bcs.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b56:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695a      	ldr	r2, [r3, #20]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0201 	bic.w	r2, r2, #1
 8005b66:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e00f      	b.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	bf0c      	ite	eq
 8005b94:	2301      	moveq	r3, #1
 8005b96:	2300      	movne	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	79fb      	ldrb	r3, [r7, #7]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d0c3      	beq.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bac:	b5b0      	push	{r4, r5, r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005bec:	f023 030c 	bic.w	r3, r3, #12
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	68f9      	ldr	r1, [r7, #12]
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c18:	f040 80e4 	bne.w	8005de4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4aab      	ldr	r2, [pc, #684]	; (8005ed0 <UART_SetConfig+0x324>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <UART_SetConfig+0x84>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4aaa      	ldr	r2, [pc, #680]	; (8005ed4 <UART_SetConfig+0x328>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d16c      	bne.n	8005d0a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005c30:	f7ff f9ca 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8005c34:	4602      	mov	r2, r0
 8005c36:	4613      	mov	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	009a      	lsls	r2, r3, #2
 8005c3e:	441a      	add	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4a:	4aa3      	ldr	r2, [pc, #652]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	011c      	lsls	r4, r3, #4
 8005c54:	f7ff f9b8 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	009a      	lsls	r2, r3, #2
 8005c62:	441a      	add	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	fbb2 f5f3 	udiv	r5, r2, r3
 8005c6e:	f7ff f9ab 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8005c72:	4602      	mov	r2, r0
 8005c74:	4613      	mov	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	009a      	lsls	r2, r3, #2
 8005c7c:	441a      	add	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c88:	4a93      	ldr	r2, [pc, #588]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	2264      	movs	r2, #100	; 0x64
 8005c92:	fb02 f303 	mul.w	r3, r2, r3
 8005c96:	1aeb      	subs	r3, r5, r3
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	3332      	adds	r3, #50	; 0x32
 8005c9c:	4a8e      	ldr	r2, [pc, #568]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005caa:	441c      	add	r4, r3
 8005cac:	f7ff f98c 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009a      	lsls	r2, r3, #2
 8005cba:	441a      	add	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	fbb2 f5f3 	udiv	r5, r2, r3
 8005cc6:	f7ff f97f 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009a      	lsls	r2, r3, #2
 8005cd4:	441a      	add	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	4a7d      	ldr	r2, [pc, #500]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	2264      	movs	r2, #100	; 0x64
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
 8005cee:	1aeb      	subs	r3, r5, r3
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	3332      	adds	r3, #50	; 0x32
 8005cf4:	4a78      	ldr	r2, [pc, #480]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	f003 0207 	and.w	r2, r3, #7
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4422      	add	r2, r4
 8005d06:	609a      	str	r2, [r3, #8]
 8005d08:	e154      	b.n	8005fb4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005d0a:	f7ff f949 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009a      	lsls	r2, r3, #2
 8005d18:	441a      	add	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d24:	4a6c      	ldr	r2, [pc, #432]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005d26:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	011c      	lsls	r4, r3, #4
 8005d2e:	f7ff f937 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005d32:	4602      	mov	r2, r0
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	009a      	lsls	r2, r3, #2
 8005d3c:	441a      	add	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	fbb2 f5f3 	udiv	r5, r2, r3
 8005d48:	f7ff f92a 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	009a      	lsls	r2, r3, #2
 8005d56:	441a      	add	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d62:	4a5d      	ldr	r2, [pc, #372]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005d64:	fba2 2303 	umull	r2, r3, r2, r3
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	2264      	movs	r2, #100	; 0x64
 8005d6c:	fb02 f303 	mul.w	r3, r2, r3
 8005d70:	1aeb      	subs	r3, r5, r3
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	3332      	adds	r3, #50	; 0x32
 8005d76:	4a58      	ldr	r2, [pc, #352]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d84:	441c      	add	r4, r3
 8005d86:	f7ff f90b 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	009a      	lsls	r2, r3, #2
 8005d94:	441a      	add	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005da0:	f7ff f8fe 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005da4:	4602      	mov	r2, r0
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	009a      	lsls	r2, r3, #2
 8005dae:	441a      	add	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dba:	4a47      	ldr	r2, [pc, #284]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc0:	095b      	lsrs	r3, r3, #5
 8005dc2:	2264      	movs	r2, #100	; 0x64
 8005dc4:	fb02 f303 	mul.w	r3, r2, r3
 8005dc8:	1aeb      	subs	r3, r5, r3
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	3332      	adds	r3, #50	; 0x32
 8005dce:	4a42      	ldr	r2, [pc, #264]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd4:	095b      	lsrs	r3, r3, #5
 8005dd6:	f003 0207 	and.w	r2, r3, #7
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4422      	add	r2, r4
 8005de0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005de2:	e0e7      	b.n	8005fb4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a39      	ldr	r2, [pc, #228]	; (8005ed0 <UART_SetConfig+0x324>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <UART_SetConfig+0x24c>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a38      	ldr	r2, [pc, #224]	; (8005ed4 <UART_SetConfig+0x328>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d171      	bne.n	8005edc <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005df8:	f7ff f8e6 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	009a      	lsls	r2, r3, #2
 8005e06:	441a      	add	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e12:	4a31      	ldr	r2, [pc, #196]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005e14:	fba2 2303 	umull	r2, r3, r2, r3
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	011c      	lsls	r4, r3, #4
 8005e1c:	f7ff f8d4 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8005e20:	4602      	mov	r2, r0
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009a      	lsls	r2, r3, #2
 8005e2a:	441a      	add	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	fbb2 f5f3 	udiv	r5, r2, r3
 8005e36:	f7ff f8c7 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	009a      	lsls	r2, r3, #2
 8005e44:	441a      	add	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e50:	4a21      	ldr	r2, [pc, #132]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005e52:	fba2 2303 	umull	r2, r3, r2, r3
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	2264      	movs	r2, #100	; 0x64
 8005e5a:	fb02 f303 	mul.w	r3, r2, r3
 8005e5e:	1aeb      	subs	r3, r5, r3
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	3332      	adds	r3, #50	; 0x32
 8005e64:	4a1c      	ldr	r2, [pc, #112]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e70:	441c      	add	r4, r3
 8005e72:	f7ff f8a9 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8005e76:	4602      	mov	r2, r0
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009a      	lsls	r2, r3, #2
 8005e80:	441a      	add	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	fbb2 f5f3 	udiv	r5, r2, r3
 8005e8c:	f7ff f89c 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8005e90:	4602      	mov	r2, r0
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009a      	lsls	r2, r3, #2
 8005e9a:	441a      	add	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea6:	4a0c      	ldr	r2, [pc, #48]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	2264      	movs	r2, #100	; 0x64
 8005eb0:	fb02 f303 	mul.w	r3, r2, r3
 8005eb4:	1aeb      	subs	r3, r5, r3
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	3332      	adds	r3, #50	; 0x32
 8005eba:	4a07      	ldr	r2, [pc, #28]	; (8005ed8 <UART_SetConfig+0x32c>)
 8005ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	f003 020f 	and.w	r2, r3, #15
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4422      	add	r2, r4
 8005ecc:	609a      	str	r2, [r3, #8]
 8005ece:	e071      	b.n	8005fb4 <UART_SetConfig+0x408>
 8005ed0:	40011000 	.word	0x40011000
 8005ed4:	40011400 	.word	0x40011400
 8005ed8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005edc:	f7ff f860 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009a      	lsls	r2, r3, #2
 8005eea:	441a      	add	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	4a31      	ldr	r2, [pc, #196]	; (8005fbc <UART_SetConfig+0x410>)
 8005ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	011c      	lsls	r4, r3, #4
 8005f00:	f7ff f84e 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005f04:	4602      	mov	r2, r0
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009a      	lsls	r2, r3, #2
 8005f0e:	441a      	add	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	fbb2 f5f3 	udiv	r5, r2, r3
 8005f1a:	f7ff f841 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	009a      	lsls	r2, r3, #2
 8005f28:	441a      	add	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f34:	4a21      	ldr	r2, [pc, #132]	; (8005fbc <UART_SetConfig+0x410>)
 8005f36:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	2264      	movs	r2, #100	; 0x64
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	1aeb      	subs	r3, r5, r3
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	3332      	adds	r3, #50	; 0x32
 8005f48:	4a1c      	ldr	r2, [pc, #112]	; (8005fbc <UART_SetConfig+0x410>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f54:	441c      	add	r4, r3
 8005f56:	f7ff f823 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009a      	lsls	r2, r3, #2
 8005f64:	441a      	add	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005f70:	f7ff f816 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8005f74:	4602      	mov	r2, r0
 8005f76:	4613      	mov	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	009a      	lsls	r2, r3, #2
 8005f7e:	441a      	add	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8a:	4a0c      	ldr	r2, [pc, #48]	; (8005fbc <UART_SetConfig+0x410>)
 8005f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	2264      	movs	r2, #100	; 0x64
 8005f94:	fb02 f303 	mul.w	r3, r2, r3
 8005f98:	1aeb      	subs	r3, r5, r3
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	3332      	adds	r3, #50	; 0x32
 8005f9e:	4a07      	ldr	r2, [pc, #28]	; (8005fbc <UART_SetConfig+0x410>)
 8005fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	f003 020f 	and.w	r2, r3, #15
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4422      	add	r2, r4
 8005fb0:	609a      	str	r2, [r3, #8]
}
 8005fb2:	e7ff      	b.n	8005fb4 <UART_SetConfig+0x408>
 8005fb4:	bf00      	nop
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bdb0      	pop	{r4, r5, r7, pc}
 8005fbc:	51eb851f 	.word	0x51eb851f

08005fc0 <CRC16_Calc>:
// This function calculates the one's complement of the standard
// 16-BIT CRC CCITT polynomial G(x) = 1 + x^5 + x^12 + x^16
//
//------------------------------------------------------------------------------
#ifdef __CRC16_TABLE__
UINT16 CRC16_Calc(UINT8 *data, UINT16 length, UINT16 initVal) {
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	807b      	strh	r3, [r7, #2]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	803b      	strh	r3, [r7, #0]
// init crc
	UINT16 crc = initVal;
 8005fd0:	883b      	ldrh	r3, [r7, #0]
 8005fd2:	81fb      	strh	r3, [r7, #14]
// iterate over all bytes
	while (length--) {
 8005fd4:	e00e      	b.n	8005ff4 <CRC16_Calc+0x34>
// calc new crc
		crc = (crc >> 8) ^ CRC16_Table[(crc ^ *data++) & 0x00FF];
 8005fd6:	89fb      	ldrh	r3, [r7, #14]
 8005fd8:	0a1b      	lsrs	r3, r3, #8
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	89f9      	ldrh	r1, [r7, #14]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	1c58      	adds	r0, r3, #1
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	404b      	eors	r3, r1
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	4908      	ldr	r1, [pc, #32]	; (800600c <CRC16_Calc+0x4c>)
 8005fec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005ff0:	4053      	eors	r3, r2
 8005ff2:	81fb      	strh	r3, [r7, #14]
	while (length--) {
 8005ff4:	887b      	ldrh	r3, [r7, #2]
 8005ff6:	1e5a      	subs	r2, r3, #1
 8005ff8:	807a      	strh	r2, [r7, #2]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1eb      	bne.n	8005fd6 <CRC16_Calc+0x16>
	}
// return result
	return crc;
 8005ffe:	89fb      	ldrh	r3, [r7, #14]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	0800aa8c 	.word	0x0800aa8c

08006010 <CRC16_Check>:
//------------------------------------------------------------------------------
//
// This function checks a data block with attached CRC16
//
//------------------------------------------------------------------------------
bool CRC16_Check(UINT8 *data, UINT16 length, UINT16 initVal) {
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	807b      	strh	r3, [r7, #2]
 800601c:	4613      	mov	r3, r2
 800601e:	803b      	strh	r3, [r7, #0]
// calc ones complement of CRC16
	UINT16 crc = ~CRC16_Calc(data, length, initVal);
 8006020:	883a      	ldrh	r2, [r7, #0]
 8006022:	887b      	ldrh	r3, [r7, #2]
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff ffca 	bl	8005fc0 <CRC16_Calc>
 800602c:	4603      	mov	r3, r0
 800602e:	43db      	mvns	r3, r3
 8006030:	81fb      	strh	r3, [r7, #14]
// CRC ok ?
	return (bool) (crc == CRC16_GOOD_VALUE);
 8006032:	89fb      	ldrh	r3, [r7, #14]
 8006034:	f640 7247 	movw	r2, #3911	; 0xf47
 8006038:	4293      	cmp	r3, r2
 800603a:	bf0c      	ite	eq
 800603c:	2301      	moveq	r3, #1
 800603e:	2300      	movne	r3, #0
 8006040:	b2db      	uxtb	r3, r3
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <MadgwickAHRSupdateIMU>:
// */
//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay,
		float az) {
 800604c:	b580      	push	{r7, lr}
 800604e:	b09c      	sub	sp, #112	; 0x70
 8006050:	af00      	add	r7, sp, #0
 8006052:	ed87 0a05 	vstr	s0, [r7, #20]
 8006056:	edc7 0a04 	vstr	s1, [r7, #16]
 800605a:	ed87 1a03 	vstr	s2, [r7, #12]
 800605e:	edc7 1a02 	vstr	s3, [r7, #8]
 8006062:	ed87 2a01 	vstr	s4, [r7, #4]
 8006066:	edc7 2a00 	vstr	s5, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1,
			q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q_ist.q1 * gx - q_ist.q2 * gy - q_ist.q3 * gz);
 800606a:	4bee      	ldr	r3, [pc, #952]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 800606c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006070:	eeb1 7a67 	vneg.f32	s14, s15
 8006074:	edd7 7a05 	vldr	s15, [r7, #20]
 8006078:	ee27 7a27 	vmul.f32	s14, s14, s15
 800607c:	4be9      	ldr	r3, [pc, #932]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 800607e:	edd3 6a02 	vldr	s13, [r3, #8]
 8006082:	edd7 7a04 	vldr	s15, [r7, #16]
 8006086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800608a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800608e:	4be5      	ldr	r3, [pc, #916]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 8006090:	edd3 6a03 	vldr	s13, [r3, #12]
 8006094:	edd7 7a03 	vldr	s15, [r7, #12]
 8006098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800609c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060a8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q_ist.q0 * gx + q_ist.q2 * gz - q_ist.q3 * gy);
 80060ac:	4bdd      	ldr	r3, [pc, #884]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 80060ae:	ed93 7a00 	vldr	s14, [r3]
 80060b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80060b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060ba:	4bda      	ldr	r3, [pc, #872]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 80060bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80060c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80060c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060cc:	4bd5      	ldr	r3, [pc, #852]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 80060ce:	edd3 6a03 	vldr	s13, [r3, #12]
 80060d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80060d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060e6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q_ist.q0 * gy - q_ist.q1 * gz + q_ist.q3 * gx);
 80060ea:	4bce      	ldr	r3, [pc, #824]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 80060ec:	ed93 7a00 	vldr	s14, [r3]
 80060f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80060f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060f8:	4bca      	ldr	r3, [pc, #808]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 80060fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80060fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8006102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006106:	ee37 7a67 	vsub.f32	s14, s14, s15
 800610a:	4bc6      	ldr	r3, [pc, #792]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 800610c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006110:	edd7 7a05 	vldr	s15, [r7, #20]
 8006114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800611c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006124:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q_ist.q0 * gz + q_ist.q1 * gy - q_ist.q2 * gx);
 8006128:	4bbe      	ldr	r3, [pc, #760]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 800612a:	ed93 7a00 	vldr	s14, [r3]
 800612e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006136:	4bbb      	ldr	r3, [pc, #748]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 8006138:	edd3 6a01 	vldr	s13, [r3, #4]
 800613c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006144:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006148:	4bb6      	ldr	r3, [pc, #728]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 800614a:	edd3 6a02 	vldr	s13, [r3, #8]
 800614e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800615a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800615e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006162:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8006166:	edd7 7a02 	vldr	s15, [r7, #8]
 800616a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800616e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006172:	d10e      	bne.n	8006192 <MadgwickAHRSupdateIMU+0x146>
 8006174:	edd7 7a01 	vldr	s15, [r7, #4]
 8006178:	eef5 7a40 	vcmp.f32	s15, #0.0
 800617c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006180:	d107      	bne.n	8006192 <MadgwickAHRSupdateIMU+0x146>
 8006182:	edd7 7a00 	vldr	s15, [r7]
 8006186:	eef5 7a40 	vcmp.f32	s15, #0.0
 800618a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800618e:	f000 81ed 	beq.w	800656c <MadgwickAHRSupdateIMU+0x520>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8006192:	ed97 7a02 	vldr	s14, [r7, #8]
 8006196:	edd7 7a02 	vldr	s15, [r7, #8]
 800619a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800619e:	edd7 6a01 	vldr	s13, [r7, #4]
 80061a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80061a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061ae:	edd7 6a00 	vldr	s13, [r7]
 80061b2:	edd7 7a00 	vldr	s15, [r7]
 80061b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061be:	eeb0 0a67 	vmov.f32	s0, s15
 80061c2:	f000 fa69 	bl	8006698 <invSqrt>
 80061c6:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 80061ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80061ce:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80061d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d6:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 80061da:	ed97 7a01 	vldr	s14, [r7, #4]
 80061de:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80061e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e6:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 80061ea:	ed97 7a00 	vldr	s14, [r7]
 80061ee:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80061f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f6:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q_ist.q0;
 80061fa:	4b8a      	ldr	r3, [pc, #552]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 80061fc:	edd3 7a00 	vldr	s15, [r3]
 8006200:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006204:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q_ist.q1;
 8006208:	4b86      	ldr	r3, [pc, #536]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 800620a:	edd3 7a01 	vldr	s15, [r3, #4]
 800620e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006212:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q_ist.q2;
 8006216:	4b83      	ldr	r3, [pc, #524]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 8006218:	edd3 7a02 	vldr	s15, [r3, #8]
 800621c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006220:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q_ist.q3;
 8006224:	4b7f      	ldr	r3, [pc, #508]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 8006226:	edd3 7a03 	vldr	s15, [r3, #12]
 800622a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800622e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q_ist.q0;
 8006232:	4b7c      	ldr	r3, [pc, #496]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 8006234:	edd3 7a00 	vldr	s15, [r3]
 8006238:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800623c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006240:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q_ist.q1;
 8006244:	4b77      	ldr	r3, [pc, #476]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 8006246:	edd3 7a01 	vldr	s15, [r3, #4]
 800624a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800624e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006252:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q_ist.q2;
 8006256:	4b73      	ldr	r3, [pc, #460]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 8006258:	edd3 7a02 	vldr	s15, [r3, #8]
 800625c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006264:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q_ist.q1;
 8006268:	4b6e      	ldr	r3, [pc, #440]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 800626a:	edd3 7a01 	vldr	s15, [r3, #4]
 800626e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8006272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006276:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q_ist.q2;
 800627a:	4b6a      	ldr	r3, [pc, #424]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 800627c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006280:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8006284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006288:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q_ist.q0 * q_ist.q0;
 800628c:	4b65      	ldr	r3, [pc, #404]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 800628e:	ed93 7a00 	vldr	s14, [r3]
 8006292:	4b64      	ldr	r3, [pc, #400]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 8006294:	edd3 7a00 	vldr	s15, [r3]
 8006298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q_ist.q1 * q_ist.q1;
 80062a0:	4b60      	ldr	r3, [pc, #384]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 80062a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80062a6:	4b5f      	ldr	r3, [pc, #380]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 80062a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80062ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q_ist.q2 * q_ist.q2;
 80062b4:	4b5b      	ldr	r3, [pc, #364]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 80062b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80062ba:	4b5a      	ldr	r3, [pc, #360]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 80062bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80062c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q_ist.q3 * q_ist.q3;
 80062c8:	4b56      	ldr	r3, [pc, #344]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 80062ca:	ed93 7a03 	vldr	s14, [r3, #12]
 80062ce:	4b55      	ldr	r3, [pc, #340]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 80062d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80062d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80062dc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80062e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80062e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062e8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80062ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80062f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062f8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80062fc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006304:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006308:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800630c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006318:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q_ist.q1 - _2q0 * ay - _4q1
 800631c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8006320:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006328:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800632c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006334:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006338:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800633c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006340:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006344:	4b37      	ldr	r3, [pc, #220]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 8006346:	edd3 7a01 	vldr	s15, [r3, #4]
 800634a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800634e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006352:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8006356:	edd7 7a01 	vldr	s15, [r7, #4]
 800635a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800635e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006362:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006366:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800636a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800636e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006376:	ee37 7a27 	vadd.f32	s14, s14, s15
 800637a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800637e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800638a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800638e:	edd7 7a00 	vldr	s15, [r7]
 8006392:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q_ist.q1 - _2q0 * ay - _4q1
 8006396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800639a:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q_ist.q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 800639e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80063a2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80063a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80063aa:	4b1e      	ldr	r3, [pc, #120]	; (8006424 <MadgwickAHRSupdateIMU+0x3d8>)
 80063ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80063b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063b4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80063b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80063bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063c4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80063c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80063cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063d4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80063d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80063dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063e4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80063e8:	ee37 7a67 	vsub.f32	s14, s14, s15
				+ _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80063ec:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80063f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80063f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063fc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8006400:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006408:	ee37 7a27 	vadd.f32	s14, s14, s15
 800640c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8006410:	edd7 7a00 	vldr	s15, [r7]
 8006414:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s2 = 4.0f * q0q0 * q_ist.q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2
 8006418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800641c:	edc7 7a07 	vstr	s15, [r7, #28]
 8006420:	e002      	b.n	8006428 <MadgwickAHRSupdateIMU+0x3dc>
 8006422:	bf00      	nop
 8006424:	20000354 	.word	0x20000354
		s3 = 4.0f * q1q1 * q_ist.q3 - _2q1 * ax + 4.0f * q2q2 * q_ist.q3
 8006428:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800642c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8006430:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006434:	4b95      	ldr	r3, [pc, #596]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 8006436:	edd3 7a03 	vldr	s15, [r3, #12]
 800643a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800643e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8006442:	edd7 7a02 	vldr	s15, [r7, #8]
 8006446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800644a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800644e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006452:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006456:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800645a:	4b8c      	ldr	r3, [pc, #560]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 800645c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006464:	ee37 7a27 	vadd.f32	s14, s14, s15
				- _2q2 * ay;
 8006468:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800646c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006470:	ee66 7aa7 	vmul.f32	s15, s13, s15
		s3 = 4.0f * q1q1 * q_ist.q3 - _2q1 * ax + 4.0f * q2q2 * q_ist.q3
 8006474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006478:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800647c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006480:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006488:	edd7 6a08 	vldr	s13, [r7, #32]
 800648c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006494:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006498:	edd7 6a07 	vldr	s13, [r7, #28]
 800649c:	edd7 7a07 	vldr	s15, [r7, #28]
 80064a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064a8:	edd7 6a06 	vldr	s13, [r7, #24]
 80064ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80064b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064b8:	eeb0 0a67 	vmov.f32	s0, s15
 80064bc:	f000 f8ec 	bl	8006698 <invSqrt>
 80064c0:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 80064c4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80064c8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80064cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 80064d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80064d8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80064dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e0:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 80064e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80064e8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80064ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f0:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 80064f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80064f8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80064fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006500:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8006504:	4b62      	ldr	r3, [pc, #392]	; (8006690 <MadgwickAHRSupdateIMU+0x644>)
 8006506:	ed93 7a00 	vldr	s14, [r3]
 800650a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800650e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006512:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8006516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800651a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 800651e:	4b5c      	ldr	r3, [pc, #368]	; (8006690 <MadgwickAHRSupdateIMU+0x644>)
 8006520:	ed93 7a00 	vldr	s14, [r3]
 8006524:	edd7 7a08 	vldr	s15, [r7, #32]
 8006528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8006530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006534:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8006538:	4b55      	ldr	r3, [pc, #340]	; (8006690 <MadgwickAHRSupdateIMU+0x644>)
 800653a:	ed93 7a00 	vldr	s14, [r3]
 800653e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006546:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800654a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800654e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 8006552:	4b4f      	ldr	r3, [pc, #316]	; (8006690 <MadgwickAHRSupdateIMU+0x644>)
 8006554:	ed93 7a00 	vldr	s14, [r3]
 8006558:	edd7 7a06 	vldr	s15, [r7, #24]
 800655c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006560:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8006564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006568:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q_ist.q0 += qDot1 * (1.0f / sampleFreq);
 800656c:	4b47      	ldr	r3, [pc, #284]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 800656e:	ed93 7a00 	vldr	s14, [r3]
 8006572:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006576:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006694 <MadgwickAHRSupdateIMU+0x648>
 800657a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800657e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006582:	4b42      	ldr	r3, [pc, #264]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 8006584:	edc3 7a00 	vstr	s15, [r3]
	q_ist.q1 += qDot2 * (1.0f / sampleFreq);
 8006588:	4b40      	ldr	r3, [pc, #256]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 800658a:	ed93 7a01 	vldr	s14, [r3, #4]
 800658e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8006592:	eddf 6a40 	vldr	s13, [pc, #256]	; 8006694 <MadgwickAHRSupdateIMU+0x648>
 8006596:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800659a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800659e:	4b3b      	ldr	r3, [pc, #236]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 80065a0:	edc3 7a01 	vstr	s15, [r3, #4]
	q_ist.q2 += qDot3 * (1.0f / sampleFreq);
 80065a4:	4b39      	ldr	r3, [pc, #228]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 80065a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80065aa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80065ae:	eddf 6a39 	vldr	s13, [pc, #228]	; 8006694 <MadgwickAHRSupdateIMU+0x648>
 80065b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80065b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ba:	4b34      	ldr	r3, [pc, #208]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 80065bc:	edc3 7a02 	vstr	s15, [r3, #8]
	q_ist.q3 += qDot4 * (1.0f / sampleFreq);
 80065c0:	4b32      	ldr	r3, [pc, #200]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 80065c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80065c6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80065ca:	eddf 6a32 	vldr	s13, [pc, #200]	; 8006694 <MadgwickAHRSupdateIMU+0x648>
 80065ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80065d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065d6:	4b2d      	ldr	r3, [pc, #180]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 80065d8:	edc3 7a03 	vstr	s15, [r3, #12]
	// Normalise quaternion
	recipNorm = invSqrt(
			q_ist.q0 * q_ist.q0 + q_ist.q1 * q_ist.q1 + q_ist.q2 * q_ist.q2
 80065dc:	4b2b      	ldr	r3, [pc, #172]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 80065de:	ed93 7a00 	vldr	s14, [r3]
 80065e2:	4b2a      	ldr	r3, [pc, #168]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 80065e4:	edd3 7a00 	vldr	s15, [r3]
 80065e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065ec:	4b27      	ldr	r3, [pc, #156]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 80065ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80065f2:	4b26      	ldr	r3, [pc, #152]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 80065f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80065f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006600:	4b22      	ldr	r3, [pc, #136]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 8006602:	edd3 6a02 	vldr	s13, [r3, #8]
 8006606:	4b21      	ldr	r3, [pc, #132]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 8006608:	edd3 7a02 	vldr	s15, [r3, #8]
 800660c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006610:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ q_ist.q3 * q_ist.q3);
 8006614:	4b1d      	ldr	r3, [pc, #116]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 8006616:	edd3 6a03 	vldr	s13, [r3, #12]
 800661a:	4b1c      	ldr	r3, [pc, #112]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 800661c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006620:	ee66 7aa7 	vmul.f32	s15, s13, s15
	recipNorm = invSqrt(
 8006624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006628:	eeb0 0a67 	vmov.f32	s0, s15
 800662c:	f000 f834 	bl	8006698 <invSqrt>
 8006630:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q_ist.q0 *= recipNorm;
 8006634:	4b15      	ldr	r3, [pc, #84]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 8006636:	ed93 7a00 	vldr	s14, [r3]
 800663a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800663e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006642:	4b12      	ldr	r3, [pc, #72]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 8006644:	edc3 7a00 	vstr	s15, [r3]
	q_ist.q1 *= recipNorm;
 8006648:	4b10      	ldr	r3, [pc, #64]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 800664a:	ed93 7a01 	vldr	s14, [r3, #4]
 800664e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006656:	4b0d      	ldr	r3, [pc, #52]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 8006658:	edc3 7a01 	vstr	s15, [r3, #4]
	q_ist.q2 *= recipNorm;
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 800665e:	ed93 7a02 	vldr	s14, [r3, #8]
 8006662:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666a:	4b08      	ldr	r3, [pc, #32]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 800666c:	edc3 7a02 	vstr	s15, [r3, #8]
	q_ist.q3 *= recipNorm;
 8006670:	4b06      	ldr	r3, [pc, #24]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 8006672:	ed93 7a03 	vldr	s14, [r3, #12]
 8006676:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800667a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667e:	4b03      	ldr	r3, [pc, #12]	; (800668c <MadgwickAHRSupdateIMU+0x640>)
 8006680:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8006684:	bf00      	nop
 8006686:	3770      	adds	r7, #112	; 0x70
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	20000354 	.word	0x20000354
 8006690:	20000008 	.word	0x20000008
 8006694:	3a83126f 	.word	0x3a83126f

08006698 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80066a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80066a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80066aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066ae:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	613b      	str	r3, [r7, #16]
	long i = *(long*) &y;
 80066b6:	f107 0310 	add.w	r3, r7, #16
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i >> 1);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	105a      	asrs	r2, r3, #1
 80066c2:	4b12      	ldr	r3, [pc, #72]	; (800670c <invSqrt+0x74>)
 80066c4:	1a9b      	subs	r3, r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 80066c8:	f107 030c 	add.w	r3, r7, #12
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80066d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80066d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80066d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80066e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80066e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80066ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80066f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f4:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	ee07 3a90 	vmov	s15, r3
}
 80066fe:	eeb0 0a67 	vmov.f32	s0, s15
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	5f3759df 	.word	0x5f3759df

08006710 <SLIP_Init>:
// Init
//
// @brief: init SLIP decoder
//
//------------------------------------------------------------------------------
void SLIP_Init(TSLIP_CbRxMessage cbRxMessage) {
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
// init decoder to idle state, no rx-buffer avaliable
	SLIP.RxState = SLIPDEC_IDLE_STATE;
 8006718:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <SLIP_Init+0x44>)
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
	SLIP.RxIndex = 0;
 800671e:	4b0d      	ldr	r3, [pc, #52]	; (8006754 <SLIP_Init+0x44>)
 8006720:	2200      	movs	r2, #0
 8006722:	605a      	str	r2, [r3, #4]
	SLIP.RxBuffer = 0;
 8006724:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <SLIP_Init+0x44>)
 8006726:	2200      	movs	r2, #0
 8006728:	60da      	str	r2, [r3, #12]
	SLIP.RxBufferSize = 0;
 800672a:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <SLIP_Init+0x44>)
 800672c:	2200      	movs	r2, #0
 800672e:	609a      	str	r2, [r3, #8]
// save message receiver callback
	SLIP.CbRxMessage = cbRxMessage;
 8006730:	4a08      	ldr	r2, [pc, #32]	; (8006754 <SLIP_Init+0x44>)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6113      	str	r3, [r2, #16]
// init encoder
	SLIP.TxIndex = 0;
 8006736:	4b07      	ldr	r3, [pc, #28]	; (8006754 <SLIP_Init+0x44>)
 8006738:	2200      	movs	r2, #0
 800673a:	615a      	str	r2, [r3, #20]
	SLIP.TxBuffer = 0;
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <SLIP_Init+0x44>)
 800673e:	2200      	movs	r2, #0
 8006740:	61da      	str	r2, [r3, #28]
	SLIP.TxBufferSize = 0;
 8006742:	4b04      	ldr	r3, [pc, #16]	; (8006754 <SLIP_Init+0x44>)
 8006744:	2200      	movs	r2, #0
 8006746:	619a      	str	r2, [r3, #24]
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	20000098 	.word	0x20000098

08006758 <SLIP_StoreTxByte>:
// SLIP_StoreTxByte
//
// @brief: store a byte into TxBuffer
//
//------------------------------------------------------------------------------
static void SLIP_StoreTxByte(UINT8 txByte) {
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	4603      	mov	r3, r0
 8006760:	71fb      	strb	r3, [r7, #7]
	if (SLIP.TxIndex < SLIP.TxBufferSize)
 8006762:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <SLIP_StoreTxByte+0x38>)
 8006764:	695a      	ldr	r2, [r3, #20]
 8006766:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <SLIP_StoreTxByte+0x38>)
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	429a      	cmp	r2, r3
 800676c:	da09      	bge.n	8006782 <SLIP_StoreTxByte+0x2a>
		SLIP.TxBuffer[SLIP.TxIndex++] = txByte;
 800676e:	4b08      	ldr	r3, [pc, #32]	; (8006790 <SLIP_StoreTxByte+0x38>)
 8006770:	69da      	ldr	r2, [r3, #28]
 8006772:	4b07      	ldr	r3, [pc, #28]	; (8006790 <SLIP_StoreTxByte+0x38>)
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	1c59      	adds	r1, r3, #1
 8006778:	4805      	ldr	r0, [pc, #20]	; (8006790 <SLIP_StoreTxByte+0x38>)
 800677a:	6141      	str	r1, [r0, #20]
 800677c:	4413      	add	r3, r2
 800677e:	79fa      	ldrb	r2, [r7, #7]
 8006780:	701a      	strb	r2, [r3, #0]
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20000098 	.word	0x20000098

08006794 <SLIP_EncodeData>:
// EncodeData
//
// @brief: encode a messages into dstBuffer
//
//------------------------------------------------------------------------------
int SLIP_EncodeData(UINT8 *dstBuffer, int dstBufferSize, UINT8 *srcData, int srcLength) {
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
// save start pointer
	int txLength = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]
// init TxBuffer
	SLIP.TxBuffer = dstBuffer;
 80067a6:	4a21      	ldr	r2, [pc, #132]	; (800682c <SLIP_EncodeData+0x98>)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	61d3      	str	r3, [r2, #28]
// init TxIndex
	SLIP.TxIndex = 0;
 80067ac:	4b1f      	ldr	r3, [pc, #124]	; (800682c <SLIP_EncodeData+0x98>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	615a      	str	r2, [r3, #20]
// init size
	SLIP.TxBufferSize = dstBufferSize;
 80067b2:	4a1e      	ldr	r2, [pc, #120]	; (800682c <SLIP_EncodeData+0x98>)
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	6193      	str	r3, [r2, #24]
// send start of SLIP message
	SLIP_StoreTxByte(SLIP_END);
 80067b8:	20c0      	movs	r0, #192	; 0xc0
 80067ba:	f7ff ffcd 	bl	8006758 <SLIP_StoreTxByte>
// iterate over all message bytes
	while (srcLength--) {
 80067be:	e01d      	b.n	80067fc <SLIP_EncodeData+0x68>
		switch (*srcData) {
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2bc0      	cmp	r3, #192	; 0xc0
 80067c6:	d002      	beq.n	80067ce <SLIP_EncodeData+0x3a>
 80067c8:	2bdb      	cmp	r3, #219	; 0xdb
 80067ca:	d007      	beq.n	80067dc <SLIP_EncodeData+0x48>
 80067cc:	e00d      	b.n	80067ea <SLIP_EncodeData+0x56>
		case SLIP_END:
			SLIP_StoreTxByte(SLIP_ESC);
 80067ce:	20db      	movs	r0, #219	; 0xdb
 80067d0:	f7ff ffc2 	bl	8006758 <SLIP_StoreTxByte>
			SLIP_StoreTxByte(SLIP_ESC_END);
 80067d4:	20dc      	movs	r0, #220	; 0xdc
 80067d6:	f7ff ffbf 	bl	8006758 <SLIP_StoreTxByte>
			break;
 80067da:	e00c      	b.n	80067f6 <SLIP_EncodeData+0x62>
		case SLIP_ESC:
			SLIP_StoreTxByte(SLIP_ESC);
 80067dc:	20db      	movs	r0, #219	; 0xdb
 80067de:	f7ff ffbb 	bl	8006758 <SLIP_StoreTxByte>
			SLIP_StoreTxByte(SLIP_ESC_ESC);
 80067e2:	20dd      	movs	r0, #221	; 0xdd
 80067e4:	f7ff ffb8 	bl	8006758 <SLIP_StoreTxByte>
			break;
 80067e8:	e005      	b.n	80067f6 <SLIP_EncodeData+0x62>
		default:
			SLIP_StoreTxByte(*srcData);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff ffb2 	bl	8006758 <SLIP_StoreTxByte>
			break;
 80067f4:	bf00      	nop

		}
// next byte
		srcData++;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3301      	adds	r3, #1
 80067fa:	607b      	str	r3, [r7, #4]
	while (srcLength--) {
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	1e5a      	subs	r2, r3, #1
 8006800:	603a      	str	r2, [r7, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1dc      	bne.n	80067c0 <SLIP_EncodeData+0x2c>
	}
// send end of SLIP message
	SLIP_StoreTxByte(SLIP_END);
 8006806:	20c0      	movs	r0, #192	; 0xc0
 8006808:	f7ff ffa6 	bl	8006758 <SLIP_StoreTxByte>
// length ok ?
	if (SLIP.TxIndex <= SLIP.TxBufferSize)
 800680c:	4b07      	ldr	r3, [pc, #28]	; (800682c <SLIP_EncodeData+0x98>)
 800680e:	695a      	ldr	r2, [r3, #20]
 8006810:	4b06      	ldr	r3, [pc, #24]	; (800682c <SLIP_EncodeData+0x98>)
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	429a      	cmp	r2, r3
 8006816:	dc02      	bgt.n	800681e <SLIP_EncodeData+0x8a>
		return SLIP.TxIndex;
 8006818:	4b04      	ldr	r3, [pc, #16]	; (800682c <SLIP_EncodeData+0x98>)
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	e001      	b.n	8006822 <SLIP_EncodeData+0x8e>
// return tx length error
	return -1;
 800681e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000098 	.word	0x20000098

08006830 <SLIP_SetRxBuffer>:
// SetRxBuffer
//
// @brief: configure a rx-buffer and enable receiver/decoder
//
//------------------------------------------------------------------------------
bool SLIP_SetRxBuffer(UINT8 *rxBuffer, int rxBufferSize) {
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
// receiver in IDLE state and client already registered ?
	if ((SLIP.RxState == SLIPDEC_IDLE_STATE) && SLIP.CbRxMessage) {
 800683a:	4b0d      	ldr	r3, [pc, #52]	; (8006870 <SLIP_SetRxBuffer+0x40>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10e      	bne.n	8006860 <SLIP_SetRxBuffer+0x30>
 8006842:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <SLIP_SetRxBuffer+0x40>)
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <SLIP_SetRxBuffer+0x30>
// same buffer params
		SLIP.RxBuffer = rxBuffer;
 800684a:	4a09      	ldr	r2, [pc, #36]	; (8006870 <SLIP_SetRxBuffer+0x40>)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	60d3      	str	r3, [r2, #12]
		SLIP.RxBufferSize = rxBufferSize;
 8006850:	4a07      	ldr	r2, [pc, #28]	; (8006870 <SLIP_SetRxBuffer+0x40>)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6093      	str	r3, [r2, #8]
// enable decoder
		SLIP.RxState = SLIPDEC_START_STATE;
 8006856:	4b06      	ldr	r3, [pc, #24]	; (8006870 <SLIP_SetRxBuffer+0x40>)
 8006858:	2201      	movs	r2, #1
 800685a:	601a      	str	r2, [r3, #0]
		return true;
 800685c:	2301      	movs	r3, #1
 800685e:	e000      	b.n	8006862 <SLIP_SetRxBuffer+0x32>
	}
	return false;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	20000098 	.word	0x20000098

08006874 <SerialDevice_SendData>:
	if (ret == HAL_OK)
		return 1;
	return 0;
}

bool SerialDevice_SendData(uint8_t *txBuf, uint8_t length) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret = HAL_UART_Transmit(&huart2, txBuf, length, 100);
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	b29a      	uxth	r2, r3
 8006884:	2364      	movs	r3, #100	; 0x64
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	480a      	ldr	r0, [pc, #40]	; (80068b4 <SerialDevice_SendData+0x40>)
 800688a:	f7ff f8ac 	bl	80059e6 <HAL_UART_Transmit>
 800688e:	4603      	mov	r3, r0
 8006890:	73fb      	strb	r3, [r7, #15]
	while (huart2.RxState != HAL_UART_STATE_READY)
 8006892:	bf00      	nop
 8006894:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <SerialDevice_SendData+0x40>)
 8006896:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b20      	cmp	r3, #32
 800689e:	d1f9      	bne.n	8006894 <SerialDevice_SendData+0x20>
		;
	if (ret == HAL_OK)
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <SerialDevice_SendData+0x36>
		return 1;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e000      	b.n	80068ac <SerialDevice_SendData+0x38>
	return 0;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20000668 	.word	0x20000668

080068b8 <WiMOD_HCI_Init>:
// @brief: Init HCI Message layer
//
//------------------------------------------------------------------------------
bool WiMOD_HCI_Init(TWiMOD_HCI_CbRxMessage cbRxMessage, // HCI msg receiver callback
		TWiMOD_HCI_Message *rxMessage) // intial rxMessage
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
// init error counter
	HCI.CRCErrors = 0;
 80068c2:	4b0c      	ldr	r3, [pc, #48]	; (80068f4 <WiMOD_HCI_Init+0x3c>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
// save receiver callback
	HCI.CbRxMessage = cbRxMessage;
 80068c8:	4a0a      	ldr	r2, [pc, #40]	; (80068f4 <WiMOD_HCI_Init+0x3c>)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6093      	str	r3, [r2, #8]
// save RxMessage
	HCI.RxMessage = rxMessage;
 80068ce:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <WiMOD_HCI_Init+0x3c>)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	6053      	str	r3, [r2, #4]
// init SLIP
	SLIP_Init(WiMOD_HCI_ProcessRxMessage);
 80068d4:	4808      	ldr	r0, [pc, #32]	; (80068f8 <WiMOD_HCI_Init+0x40>)
 80068d6:	f7ff ff1b 	bl	8006710 <SLIP_Init>
// init first RxBuffer to SAP_ID of HCI message, size without 16-Bit Length Field
	SLIP_SetRxBuffer(&rxMessage->SapID, sizeof(TWiMOD_HCI_Message) - sizeof(UINT16));
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	3302      	adds	r3, #2
 80068de:	f44f 7198 	mov.w	r1, #304	; 0x130
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff ffa4 	bl	8006830 <SLIP_SetRxBuffer>
// init serial device
	return 1; //SerialDevice_Open(comPort, Baudrate_115200, DataBits_8, Parity_None);
 80068e8:	2301      	movs	r3, #1
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	200000b8 	.word	0x200000b8
 80068f8:	08006999 	.word	0x08006999

080068fc <WiMOD_HCI_SendMessage>:
// SendMessage
//
// @brief: Send a HCI message (with or without payload)
//
//------------------------------------------------------------------------------
int WiMOD_HCI_SendMessage(TWiMOD_HCI_Message *txMessage) {
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
// 1. check parameter
//
// 1.1 check ptr
//
	if (!txMessage) { // error
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d102      	bne.n	8006910 <WiMOD_HCI_SendMessage+0x14>
		return -1;
 800690a:	f04f 33ff 	mov.w	r3, #4294967295
 800690e:	e03d      	b.n	800698c <WiMOD_HCI_SendMessage+0x90>
	}
// 2. Calculate CRC16 over header and optional payload
//
	UINT16 crc16 = CRC16_Calc(&txMessage->SapID,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	1c98      	adds	r0, r3, #2
			txMessage->Length + WIMOD_HCI_MSG_HEADER_SIZE, CRC16_INIT_VALUE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	881b      	ldrh	r3, [r3, #0]
	UINT16 crc16 = CRC16_Calc(&txMessage->SapID,
 8006918:	3302      	adds	r3, #2
 800691a:	b29b      	uxth	r3, r3
 800691c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006920:	4619      	mov	r1, r3
 8006922:	f7ff fb4d 	bl	8005fc0 <CRC16_Calc>
 8006926:	4603      	mov	r3, r0
 8006928:	81fb      	strh	r3, [r7, #14]
// 2.1 get 1's complement !!!
//
	crc16 = ~crc16;
 800692a:	89fb      	ldrh	r3, [r7, #14]
 800692c:	43db      	mvns	r3, r3
 800692e:	81fb      	strh	r3, [r7, #14]
// 2.2 attach CRC16 and correct length, LSB first
//
	txMessage->Payload[txMessage->Length] = LOBYTE(crc16);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	4619      	mov	r1, r3
 8006936:	89fb      	ldrh	r3, [r7, #14]
 8006938:	b2da      	uxtb	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	440b      	add	r3, r1
 800693e:	711a      	strb	r2, [r3, #4]
	txMessage->Payload[txMessage->Length + 1] = HIBYTE(crc16);
 8006940:	89fb      	ldrh	r3, [r7, #14]
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	b29a      	uxth	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	3301      	adds	r3, #1
 800694c:	b2d1      	uxtb	r1, r2
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	4413      	add	r3, r2
 8006952:	460a      	mov	r2, r1
 8006954:	711a      	strb	r2, [r3, #4]
// 3. perform SLIP encoding
// - start transmission with SAP ID
// - correct length by header size
	int txLength = SLIP_EncodeData(TxBuffer, sizeof(TxBuffer),
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	1c9a      	adds	r2, r3, #2
			&txMessage->SapID,
			txMessage->Length + WIMOD_HCI_MSG_HEADER_SIZE
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	881b      	ldrh	r3, [r3, #0]
	int txLength = SLIP_EncodeData(TxBuffer, sizeof(TxBuffer),
 800695e:	3304      	adds	r3, #4
 8006960:	f240 2166 	movw	r1, #614	; 0x266
 8006964:	480b      	ldr	r0, [pc, #44]	; (8006994 <WiMOD_HCI_SendMessage+0x98>)
 8006966:	f7ff ff15 	bl	8006794 <SLIP_EncodeData>
 800696a:	60b8      	str	r0, [r7, #8]
					+ WIMOD_HCI_MSG_FCS_SIZE);
// message ok ?
	if (txLength > 0) {
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	dd0a      	ble.n	8006988 <WiMOD_HCI_SendMessage+0x8c>
// 4. send octet sequence over serial device
		if (SerialDevice_SendData(TxBuffer, txLength) > 0) {
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	4619      	mov	r1, r3
 8006978:	4806      	ldr	r0, [pc, #24]	; (8006994 <WiMOD_HCI_SendMessage+0x98>)
 800697a:	f7ff ff7b 	bl	8006874 <SerialDevice_SendData>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <WiMOD_HCI_SendMessage+0x8c>
// return ok
			return 1;
 8006984:	2301      	movs	r3, #1
 8006986:	e001      	b.n	800698c <WiMOD_HCI_SendMessage+0x90>
		}
	}
// error - SLIP layer couldn't encode message - buffer to small ?
	return -1;
 8006988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	200000c4 	.word	0x200000c4

08006998 <WiMOD_HCI_ProcessRxMessage>:
// WiMOD_HCI_ProcessRxMessage
//
// @brief: process received SLIP message and return new rxBuffer
//
//------------------------------------------------------------------------------
static UINT8* WiMOD_HCI_ProcessRxMessage(UINT8 *rxData, int rxLength) {
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
// check min length
	if (rxLength >= (WIMOD_HCI_MSG_HEADER_SIZE + WIMOD_HCI_MSG_FCS_SIZE)) {
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	dd24      	ble.n	80069f2 <WiMOD_HCI_ProcessRxMessage+0x5a>
		if (CRC16_Check(rxData, rxLength, CRC16_INIT_VALUE)) {
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069b0:	4619      	mov	r1, r3
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff fb2c 	bl	8006010 <CRC16_Check>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d014      	beq.n	80069e8 <WiMOD_HCI_ProcessRxMessage+0x50>
// receiver registered ?
			if (HCI.CbRxMessage) { // yes, complete message info
 80069be:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <WiMOD_HCI_ProcessRxMessage+0x74>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d015      	beq.n	80069f2 <WiMOD_HCI_ProcessRxMessage+0x5a>
				HCI.RxMessage->Length = rxLength - (WIMOD_HCI_MSG_HEADER_SIZE + WIMOD_HCI_MSG_FCS_SIZE);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	4b10      	ldr	r3, [pc, #64]	; (8006a0c <WiMOD_HCI_ProcessRxMessage+0x74>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	3a04      	subs	r2, #4
 80069d0:	b292      	uxth	r2, r2
 80069d2:	801a      	strh	r2, [r3, #0]
// call upper layer receiver and save new RxMessage
				HCI.RxMessage = (*HCI.CbRxMessage)(HCI.RxMessage);
 80069d4:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <WiMOD_HCI_ProcessRxMessage+0x74>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	4a0c      	ldr	r2, [pc, #48]	; (8006a0c <WiMOD_HCI_ProcessRxMessage+0x74>)
 80069da:	6852      	ldr	r2, [r2, #4]
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
 80069e0:	4602      	mov	r2, r0
 80069e2:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <WiMOD_HCI_ProcessRxMessage+0x74>)
 80069e4:	605a      	str	r2, [r3, #4]
 80069e6:	e004      	b.n	80069f2 <WiMOD_HCI_ProcessRxMessage+0x5a>
			}
		} else {
			HCI.CRCErrors++;
 80069e8:	4b08      	ldr	r3, [pc, #32]	; (8006a0c <WiMOD_HCI_ProcessRxMessage+0x74>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3301      	adds	r3, #1
 80069ee:	4a07      	ldr	r2, [pc, #28]	; (8006a0c <WiMOD_HCI_ProcessRxMessage+0x74>)
 80069f0:	6013      	str	r3, [r2, #0]
		}
	}
// free HCI message available ?
	if (HCI.RxMessage) {
 80069f2:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <WiMOD_HCI_ProcessRxMessage+0x74>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <WiMOD_HCI_ProcessRxMessage+0x6a>
// yes, return pointer to first byte
		return &HCI.RxMessage->SapID;
 80069fa:	4b04      	ldr	r3, [pc, #16]	; (8006a0c <WiMOD_HCI_ProcessRxMessage+0x74>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	3302      	adds	r3, #2
 8006a00:	e000      	b.n	8006a04 <WiMOD_HCI_ProcessRxMessage+0x6c>
	}
// error, disable SLIP decoder
	return 0;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	200000b8 	.word	0x200000b8

08006a10 <led2_t>:

#include "config.h"


//Funktionen für schnelleren Zugriff
void led2_t() {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8006a14:	2140      	movs	r1, #64	; 0x40
 8006a16:	4802      	ldr	r0, [pc, #8]	; (8006a20 <led2_t+0x10>)
 8006a18:	f7fb fa1d 	bl	8001e56 <HAL_GPIO_TogglePin>
}
 8006a1c:	bf00      	nop
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	40020000 	.word	0x40020000

08006a24 <led3_t>:

void led3_t() {
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8006a28:	2180      	movs	r1, #128	; 0x80
 8006a2a:	4802      	ldr	r0, [pc, #8]	; (8006a34 <led3_t+0x10>)
 8006a2c:	f7fb fa13 	bl	8001e56 <HAL_GPIO_TogglePin>
}
 8006a30:	bf00      	nop
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	40020000 	.word	0x40020000

08006a38 <leds_reset>:

void leds_reset() {
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	2140      	movs	r1, #64	; 0x40
 8006a40:	4804      	ldr	r0, [pc, #16]	; (8006a54 <leds_reset+0x1c>)
 8006a42:	f7fb f9ef 	bl	8001e24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8006a46:	2201      	movs	r2, #1
 8006a48:	2180      	movs	r1, #128	; 0x80
 8006a4a:	4802      	ldr	r0, [pc, #8]	; (8006a54 <leds_reset+0x1c>)
 8006a4c:	f7fb f9ea 	bl	8001e24 <HAL_GPIO_WritePin>
}
 8006a50:	bf00      	nop
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40020000 	.word	0x40020000

08006a58 <leds_set>:

void leds_set() {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2140      	movs	r1, #64	; 0x40
 8006a60:	4804      	ldr	r0, [pc, #16]	; (8006a74 <leds_set+0x1c>)
 8006a62:	f7fb f9df 	bl	8001e24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8006a66:	2200      	movs	r2, #0
 8006a68:	2180      	movs	r1, #128	; 0x80
 8006a6a:	4802      	ldr	r0, [pc, #8]	; (8006a74 <leds_set+0x1c>)
 8006a6c:	f7fb f9da 	bl	8001e24 <HAL_GPIO_WritePin>
}
 8006a70:	bf00      	nop
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	40020000 	.word	0x40020000

08006a78 <blink>:

void blink(uint8_t count){
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	4603      	mov	r3, r0
 8006a80:	71fb      	strb	r3, [r7, #7]
	leds_reset();
 8006a82:	f7ff ffd9 	bl	8006a38 <leds_reset>
	for(uint8_t i = 0;i<count;i++){
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]
 8006a8a:	e00c      	b.n	8006aa6 <blink+0x2e>
		leds_set();
 8006a8c:	f7ff ffe4 	bl	8006a58 <leds_set>
		HAL_Delay(250);
 8006a90:	20fa      	movs	r0, #250	; 0xfa
 8006a92:	f7fa fa8f 	bl	8000fb4 <HAL_Delay>
		leds_reset();
 8006a96:	f7ff ffcf 	bl	8006a38 <leds_reset>
		HAL_Delay(250);
 8006a9a:	20fa      	movs	r0, #250	; 0xfa
 8006a9c:	f7fa fa8a 	bl	8000fb4 <HAL_Delay>
	for(uint8_t i = 0;i<count;i++){
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	73fb      	strb	r3, [r7, #15]
 8006aa6:	7bfa      	ldrb	r2, [r7, #15]
 8006aa8:	79fb      	ldrb	r3, [r7, #7]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d3ee      	bcc.n	8006a8c <blink+0x14>
	}
}
 8006aae:	bf00      	nop
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <print_uart>:
	HAL_UART_Transmit(&huart1, &textbuff, strlen(textbuff), 160);
	HAL_UART_Transmit(&huart1, "\n\r", 4, 160);
}
// */

void print_uart(uint8_t *text) {
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
#ifdef DEBUG
	//Länge ermitteln
	int i = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
	while(text[i] != '\0' && i < 150){
 8006ac4:	e002      	b.n	8006acc <print_uart+0x14>
		i++;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	60fb      	str	r3, [r7, #12]
	while(text[i] != '\0' && i < 150){
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <print_uart+0x26>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b95      	cmp	r3, #149	; 0x95
 8006adc:	ddf3      	ble.n	8006ac6 <print_uart+0xe>
	}
	HAL_UART_Transmit(&huart1, text, i+1, 160);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	23a0      	movs	r3, #160	; 0xa0
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	4803      	ldr	r0, [pc, #12]	; (8006af8 <print_uart+0x40>)
 8006aec:	f7fe ff7b 	bl	80059e6 <HAL_UART_Transmit>
#endif
}
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20000500 	.word	0x20000500

08006afc <pitch>:
/**
 * @brief Steuert Pitch
 * @return tatsächlich angewendete steuerung
 * @param amount Wert von -500 bis 500, der Auslenkung entspricht
 */
int16_t pitch(int16_t amount) {
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	4603      	mov	r3, r0
 8006b04:	80fb      	strh	r3, [r7, #6]
	servo[4] = 1500 + amount;
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	4b10      	ldr	r3, [pc, #64]	; (8006b50 <pitch+0x54>)
 8006b10:	811a      	strh	r2, [r3, #8]
	if (servo[4] <= 1000) {
 8006b12:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <pitch+0x54>)
 8006b14:	891b      	ldrh	r3, [r3, #8]
 8006b16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b1a:	d805      	bhi.n	8006b28 <pitch+0x2c>
		servo[4] = 1000;
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <pitch+0x54>)
 8006b1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b22:	811a      	strh	r2, [r3, #8]
		return 0;
 8006b24:	2300      	movs	r3, #0
 8006b26:	e00c      	b.n	8006b42 <pitch+0x46>
	} else if (servo[0] >= 2000) {
 8006b28:	4b09      	ldr	r3, [pc, #36]	; (8006b50 <pitch+0x54>)
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006b30:	d305      	bcc.n	8006b3e <pitch+0x42>
		servo[4] = 2000;
 8006b32:	4b07      	ldr	r3, [pc, #28]	; (8006b50 <pitch+0x54>)
 8006b34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b38:	811a      	strh	r2, [r3, #8]
		return 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e001      	b.n	8006b42 <pitch+0x46>
	} else {
		return amount;
 8006b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
	}
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	20000374 	.word	0x20000374

08006b54 <yaw>:
/**
 * @brief Steuert yaw
 * @return tatsächlich angewendete steuerung
 * @param amount Wert von -500 bis 500, der Auslenkung entspricht
 */
int16_t yaw(int16_t amount) {
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	80fb      	strh	r3, [r7, #6]
	servo[0] = 1500 + amount;
 8006b5e:	88fb      	ldrh	r3, [r7, #6]
 8006b60:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <yaw+0x54>)
 8006b68:	801a      	strh	r2, [r3, #0]
	if (servo[0] <= 1000) {
 8006b6a:	4b0f      	ldr	r3, [pc, #60]	; (8006ba8 <yaw+0x54>)
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b72:	d805      	bhi.n	8006b80 <yaw+0x2c>
		servo[0] = 1000;
 8006b74:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <yaw+0x54>)
 8006b76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b7a:	801a      	strh	r2, [r3, #0]
		return 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e00c      	b.n	8006b9a <yaw+0x46>
	} else if (servo[0] >= 2000) {
 8006b80:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <yaw+0x54>)
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006b88:	d305      	bcc.n	8006b96 <yaw+0x42>
		servo[0] = 2000;
 8006b8a:	4b07      	ldr	r3, [pc, #28]	; (8006ba8 <yaw+0x54>)
 8006b8c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b90:	801a      	strh	r2, [r3, #0]
		return 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	e001      	b.n	8006b9a <yaw+0x46>
	} else {
		return amount;
 8006b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
	}
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	20000374 	.word	0x20000374

08006bac <center_off>:
}

/**
 * @brief Setze alle Servos in die Mitte und den Motor aus
 */
void center_off() {
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
	servo[0] = 1500;
 8006bb0:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <center_off+0x38>)
 8006bb2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006bb6:	801a      	strh	r2, [r3, #0]
	servo[1] = 1500;
 8006bb8:	4b0a      	ldr	r3, [pc, #40]	; (8006be4 <center_off+0x38>)
 8006bba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006bbe:	805a      	strh	r2, [r3, #2]
	servo[2] = 1000;
 8006bc0:	4b08      	ldr	r3, [pc, #32]	; (8006be4 <center_off+0x38>)
 8006bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bc6:	809a      	strh	r2, [r3, #4]
	servo[3] = 1500;
 8006bc8:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <center_off+0x38>)
 8006bca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006bce:	80da      	strh	r2, [r3, #6]
	servo[4] = 1500;
 8006bd0:	4b04      	ldr	r3, [pc, #16]	; (8006be4 <center_off+0x38>)
 8006bd2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006bd6:	811a      	strh	r2, [r3, #8]
}
 8006bd8:	bf00      	nop
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20000374 	.word	0x20000374

08006be8 <pid_init>:

void pid_init(){
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
	//Roll
	pid_r.p = 300.0f;
 8006bec:	4b11      	ldr	r3, [pc, #68]	; (8006c34 <pid_init+0x4c>)
 8006bee:	4a12      	ldr	r2, [pc, #72]	; (8006c38 <pid_init+0x50>)
 8006bf0:	601a      	str	r2, [r3, #0]
	pid_r.i = 10.0f;
 8006bf2:	4b10      	ldr	r3, [pc, #64]	; (8006c34 <pid_init+0x4c>)
 8006bf4:	4a11      	ldr	r2, [pc, #68]	; (8006c3c <pid_init+0x54>)
 8006bf6:	605a      	str	r2, [r3, #4]
	pid_r.d = 0.0f;
 8006bf8:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <pid_init+0x4c>)
 8006bfa:	f04f 0200 	mov.w	r2, #0
 8006bfe:	609a      	str	r2, [r3, #8]
	//Yaw
	pid_y.p = 300.0f;
 8006c00:	4b0f      	ldr	r3, [pc, #60]	; (8006c40 <pid_init+0x58>)
 8006c02:	4a0d      	ldr	r2, [pc, #52]	; (8006c38 <pid_init+0x50>)
 8006c04:	601a      	str	r2, [r3, #0]
	pid_y.i = 10.0f;
 8006c06:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <pid_init+0x58>)
 8006c08:	4a0c      	ldr	r2, [pc, #48]	; (8006c3c <pid_init+0x54>)
 8006c0a:	605a      	str	r2, [r3, #4]
	pid_y.d = 0.0f;
 8006c0c:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <pid_init+0x58>)
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	609a      	str	r2, [r3, #8]
	//Pitch
	pid_p.p = 300.0f;
 8006c14:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <pid_init+0x5c>)
 8006c16:	4a08      	ldr	r2, [pc, #32]	; (8006c38 <pid_init+0x50>)
 8006c18:	601a      	str	r2, [r3, #0]
	pid_p.i = 10.0f;
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <pid_init+0x5c>)
 8006c1c:	4a07      	ldr	r2, [pc, #28]	; (8006c3c <pid_init+0x54>)
 8006c1e:	605a      	str	r2, [r3, #4]
	pid_p.d = 0.0f;
 8006c20:	4b08      	ldr	r3, [pc, #32]	; (8006c44 <pid_init+0x5c>)
 8006c22:	f04f 0200 	mov.w	r2, #0
 8006c26:	609a      	str	r2, [r3, #8]

}
 8006c28:	bf00      	nop
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	20000380 	.word	0x20000380
 8006c38:	43960000 	.word	0x43960000
 8006c3c:	41200000 	.word	0x41200000
 8006c40:	200003a8 	.word	0x200003a8
 8006c44:	2000038c 	.word	0x2000038c

08006c48 <pid_pitch>:

/**
 * @brief PID für pitch
 */
void pid_pitch() {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b090      	sub	sp, #64	; 0x40
 8006c4c:	af00      	add	r7, sp, #0
	//Aktuelle Verdehrung rausfinden
		Quaternion qx = { 0, 0, 1, 0 }, qxi, qxs;
 8006c4e:	f04f 0300 	mov.w	r3, #0
 8006c52:	623b      	str	r3, [r7, #32]
 8006c54:	f04f 0300 	mov.w	r3, #0
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c60:	f04f 0300 	mov.w	r3, #0
 8006c64:	62fb      	str	r3, [r7, #44]	; 0x2c
		quat_qpq(&q_ist, &qx, &qxi); //Projeziere z Achse auf aktuelle Position
 8006c66:	f107 0210 	add.w	r2, r7, #16
 8006c6a:	f107 0320 	add.w	r3, r7, #32
 8006c6e:	4619      	mov	r1, r3
 8006c70:	482f      	ldr	r0, [pc, #188]	; (8006d30 <pid_pitch+0xe8>)
 8006c72:	f001 fc14 	bl	800849e <quat_qpq>
		quat_qpq(&q_soll, &qx, &qxs); //Projeziere z-Achse auf soll Position
 8006c76:	463a      	mov	r2, r7
 8006c78:	f107 0320 	add.w	r3, r7, #32
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	482d      	ldr	r0, [pc, #180]	; (8006d34 <pid_pitch+0xec>)
 8006c80:	f001 fc0d 	bl	800849e <quat_qpq>
		float regel = qxs.q3 - qxi.q3; //Regelgröße berechnen
 8006c84:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c88:	edd7 7a07 	vldr	s15, [r7, #28]
 8006c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		//P
		float pr = regel * pid_p.p;
 8006c94:	4b28      	ldr	r3, [pc, #160]	; (8006d38 <pid_pitch+0xf0>)
 8006c96:	edd3 7a00 	vldr	s15, [r3]
 8006c9a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		//I
		i_pitch += regel * looptime;
 8006ca6:	4b25      	ldr	r3, [pc, #148]	; (8006d3c <pid_pitch+0xf4>)
 8006ca8:	ed93 7a00 	vldr	s14, [r3]
 8006cac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cb4:	4b22      	ldr	r3, [pc, #136]	; (8006d40 <pid_pitch+0xf8>)
 8006cb6:	edd3 7a00 	vldr	s15, [r3]
 8006cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cbe:	4b20      	ldr	r3, [pc, #128]	; (8006d40 <pid_pitch+0xf8>)
 8006cc0:	edc3 7a00 	vstr	s15, [r3]
		float ir = i_pitch * pid_p.i;
 8006cc4:	4b1c      	ldr	r3, [pc, #112]	; (8006d38 <pid_pitch+0xf0>)
 8006cc6:	ed93 7a01 	vldr	s14, [r3, #4]
 8006cca:	4b1d      	ldr	r3, [pc, #116]	; (8006d40 <pid_pitch+0xf8>)
 8006ccc:	edd3 7a00 	vldr	s15, [r3]
 8006cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

		//D
		float dr = (regel - d_pitch) * pid_p.d;
 8006cd8:	4b1a      	ldr	r3, [pc, #104]	; (8006d44 <pid_pitch+0xfc>)
 8006cda:	edd3 7a00 	vldr	s15, [r3]
 8006cde:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006ce2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <pid_pitch+0xf0>)
 8006ce8:	edd3 7a02 	vldr	s15, [r3, #8]
 8006cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		d_pitch = regel;
 8006cf4:	4a13      	ldr	r2, [pc, #76]	; (8006d44 <pid_pitch+0xfc>)
 8006cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf8:	6013      	str	r3, [r2, #0]

		regel = pr + ir + dr;
 8006cfa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006cfe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d06:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d0e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		pitch(regel);
 8006d12:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006d16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d1a:	ee17 3a90 	vmov	r3, s15
 8006d1e:	b21b      	sxth	r3, r3
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff feeb 	bl	8006afc <pitch>
}
 8006d26:	bf00      	nop
 8006d28:	3740      	adds	r7, #64	; 0x40
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000354 	.word	0x20000354
 8006d34:	20000364 	.word	0x20000364
 8006d38:	2000038c 	.word	0x2000038c
 8006d3c:	2000033c 	.word	0x2000033c
 8006d40:	2000032c 	.word	0x2000032c
 8006d44:	20000334 	.word	0x20000334

08006d48 <pid_roll>:
void pid_roll() {
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0

}
 8006d4c:	bf00      	nop
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
	...

08006d58 <pid_yaw>:
void pid_yaw() {
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b090      	sub	sp, #64	; 0x40
 8006d5c:	af00      	add	r7, sp, #0
	//Aktuelle Verdehrung rausfinden
	Quaternion qx = { 0, 0, 1, 0 }, qxi, qxs;
 8006d5e:	f04f 0300 	mov.w	r3, #0
 8006d62:	623b      	str	r3, [r7, #32]
 8006d64:	f04f 0300 	mov.w	r3, #0
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
 8006d6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d70:	f04f 0300 	mov.w	r3, #0
 8006d74:	62fb      	str	r3, [r7, #44]	; 0x2c
	quat_qpq(&q_ist, &qx, &qxi); //Projeziere y Achse auf aktuelle Position
 8006d76:	f107 0210 	add.w	r2, r7, #16
 8006d7a:	f107 0320 	add.w	r3, r7, #32
 8006d7e:	4619      	mov	r1, r3
 8006d80:	482f      	ldr	r0, [pc, #188]	; (8006e40 <pid_yaw+0xe8>)
 8006d82:	f001 fb8c 	bl	800849e <quat_qpq>
	quat_qpq(&q_soll, &qx, &qxs); //Projeziere y-Achse auf soll Position
 8006d86:	463a      	mov	r2, r7
 8006d88:	f107 0320 	add.w	r3, r7, #32
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	482d      	ldr	r0, [pc, #180]	; (8006e44 <pid_yaw+0xec>)
 8006d90:	f001 fb85 	bl	800849e <quat_qpq>
	float regel = qxs.q1 - qxi.q1; //Regelgröße berechnen
 8006d94:	ed97 7a01 	vldr	s14, [r7, #4]
 8006d98:	edd7 7a05 	vldr	s15, [r7, #20]
 8006d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006da0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	//P
	float pr = regel * pid_y.p;
 8006da4:	4b28      	ldr	r3, [pc, #160]	; (8006e48 <pid_yaw+0xf0>)
 8006da6:	edd3 7a00 	vldr	s15, [r3]
 8006daa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	//I
	i_yaw += regel * looptime;
 8006db6:	4b25      	ldr	r3, [pc, #148]	; (8006e4c <pid_yaw+0xf4>)
 8006db8:	ed93 7a00 	vldr	s14, [r3]
 8006dbc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006dc4:	4b22      	ldr	r3, [pc, #136]	; (8006e50 <pid_yaw+0xf8>)
 8006dc6:	edd3 7a00 	vldr	s15, [r3]
 8006dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dce:	4b20      	ldr	r3, [pc, #128]	; (8006e50 <pid_yaw+0xf8>)
 8006dd0:	edc3 7a00 	vstr	s15, [r3]
	float ir = i_yaw * pid_y.i;
 8006dd4:	4b1c      	ldr	r3, [pc, #112]	; (8006e48 <pid_yaw+0xf0>)
 8006dd6:	ed93 7a01 	vldr	s14, [r3, #4]
 8006dda:	4b1d      	ldr	r3, [pc, #116]	; (8006e50 <pid_yaw+0xf8>)
 8006ddc:	edd3 7a00 	vldr	s15, [r3]
 8006de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	//D
	float dr = (regel - d_yaw) * pid_y.d;
 8006de8:	4b1a      	ldr	r3, [pc, #104]	; (8006e54 <pid_yaw+0xfc>)
 8006dea:	edd3 7a00 	vldr	s15, [r3]
 8006dee:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006df2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006df6:	4b14      	ldr	r3, [pc, #80]	; (8006e48 <pid_yaw+0xf0>)
 8006df8:	edd3 7a02 	vldr	s15, [r3, #8]
 8006dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e00:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	d_yaw = regel;
 8006e04:	4a13      	ldr	r2, [pc, #76]	; (8006e54 <pid_yaw+0xfc>)
 8006e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e08:	6013      	str	r3, [r2, #0]

	regel = pr + ir + dr;
 8006e0a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006e0e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e16:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e1e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	yaw(regel);
 8006e22:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e2a:	ee17 3a90 	vmov	r3, s15
 8006e2e:	b21b      	sxth	r3, r3
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff fe8f 	bl	8006b54 <yaw>
}
 8006e36:	bf00      	nop
 8006e38:	3740      	adds	r7, #64	; 0x40
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000354 	.word	0x20000354
 8006e44:	20000364 	.word	0x20000364
 8006e48:	200003a8 	.word	0x200003a8
 8006e4c:	2000033c 	.word	0x2000033c
 8006e50:	20000330 	.word	0x20000330
 8006e54:	20000338 	.word	0x20000338

08006e58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	/*
	 if (htim->Instance == TIM10) {
	 } // */
	if (htim->Instance == TIM11) {
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a55      	ldr	r2, [pc, #340]	; (8006fbc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	f040 80a3 	bne.w	8006fb2 <HAL_TIM_PeriodElapsedCallback+0x15a>
		//HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
		HAL_GPIO_WritePin(SERVO_1_GPIO_Port, SERVO_1_Pin, GPIO_PIN_RESET);
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e72:	4853      	ldr	r0, [pc, #332]	; (8006fc0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8006e74:	f7fa ffd6 	bl	8001e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SERVO_2_GPIO_Port, SERVO_2_Pin, GPIO_PIN_RESET);
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e7e:	4850      	ldr	r0, [pc, #320]	; (8006fc0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8006e80:	f7fa ffd0 	bl	8001e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SERVO_3_GPIO_Port, SERVO_3_Pin, GPIO_PIN_RESET);
 8006e84:	2200      	movs	r2, #0
 8006e86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e8a:	484d      	ldr	r0, [pc, #308]	; (8006fc0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8006e8c:	f7fa ffca 	bl	8001e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SERVO_4_GPIO_Port, SERVO_4_Pin, GPIO_PIN_RESET);
 8006e90:	2200      	movs	r2, #0
 8006e92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e96:	484a      	ldr	r0, [pc, #296]	; (8006fc0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8006e98:	f7fa ffc4 	bl	8001e24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SERVO_5_GPIO_Port, SERVO_5_Pin, GPIO_PIN_RESET);
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ea2:	4847      	ldr	r0, [pc, #284]	; (8006fc0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8006ea4:	f7fa ffbe 	bl	8001e24 <HAL_GPIO_WritePin>
		if (flag_mpu) {
 8006ea8:	4b46      	ldr	r3, [pc, #280]	; (8006fc4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d021      	beq.n	8006ef4 <HAL_TIM_PeriodElapsedCallback+0x9c>
			//HAL_TIM_Base_Stop_IT(htim);
			if (watch_check) {
 8006eb0:	4b45      	ldr	r3, [pc, #276]	; (8006fc8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d011      	beq.n	8006edc <HAL_TIM_PeriodElapsedCallback+0x84>
				led3_t();
 8006eb8:	f7ff fdb4 	bl	8006a24 <led3_t>
				HAL_DMA_Abort(&hdma_i2c1_tx);
 8006ebc:	4843      	ldr	r0, [pc, #268]	; (8006fcc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8006ebe:	f7fa faeb 	bl	8001498 <HAL_DMA_Abort>
				HAL_DMA_Abort(&hdma_i2c1_rx);
 8006ec2:	4843      	ldr	r0, [pc, #268]	; (8006fd0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8006ec4:	f7fa fae8 	bl	8001498 <HAL_DMA_Abort>

				hi2c1.ErrorCode = 0;
 8006ec8:	4b42      	ldr	r3, [pc, #264]	; (8006fd4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	641a      	str	r2, [r3, #64]	; 0x40
				flag_mpu = 0;
 8006ece:	4b3d      	ldr	r3, [pc, #244]	; (8006fc4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	701a      	strb	r2, [r3, #0]
				watch_check = 0;
 8006ed4:	4b3c      	ldr	r3, [pc, #240]	; (8006fc8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	701a      	strb	r2, [r3, #0]
			} else {
				htim->Instance->ARR = 5000; //5ms timeout
				mpu_get_all_dma(&hi2c1);
				watch_check = 1;
			}
			return;
 8006eda:	e06b      	b.n	8006fb4 <HAL_TIM_PeriodElapsedCallback+0x15c>
				htim->Instance->ARR = 5000; //5ms timeout
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee4:	62da      	str	r2, [r3, #44]	; 0x2c
				mpu_get_all_dma(&hi2c1);
 8006ee6:	483b      	ldr	r0, [pc, #236]	; (8006fd4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8006ee8:	f001 fa14 	bl	8008314 <mpu_get_all_dma>
				watch_check = 1;
 8006eec:	4b36      	ldr	r3, [pc, #216]	; (8006fc8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006eee:	2201      	movs	r2, #1
 8006ef0:	701a      	strb	r2, [r3, #0]
			return;
 8006ef2:	e05f      	b.n	8006fb4 <HAL_TIM_PeriodElapsedCallback+0x15c>
		}
		switch (curr_servo) {
 8006ef4:	4b38      	ldr	r3, [pc, #224]	; (8006fd8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d849      	bhi.n	8006f90 <HAL_TIM_PeriodElapsedCallback+0x138>
 8006efc:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8006efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f02:	bf00      	nop
 8006f04:	08006f19 	.word	0x08006f19
 8006f08:	08006f31 	.word	0x08006f31
 8006f0c:	08006f49 	.word	0x08006f49
 8006f10:	08006f61 	.word	0x08006f61
 8006f14:	08006f79 	.word	0x08006f79
		case 0:
			HAL_GPIO_WritePin(SERVO_1_GPIO_Port, SERVO_1_Pin, GPIO_PIN_SET);
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f1e:	4828      	ldr	r0, [pc, #160]	; (8006fc0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8006f20:	f7fa ff80 	bl	8001e24 <HAL_GPIO_WritePin>
			htim->Instance->ARR = servo[0];
 8006f24:	4b2d      	ldr	r3, [pc, #180]	; (8006fdc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8006f26:	881a      	ldrh	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8006f2e:	e02f      	b.n	8006f90 <HAL_TIM_PeriodElapsedCallback+0x138>
		case 1:
			HAL_GPIO_WritePin(SERVO_2_GPIO_Port, SERVO_2_Pin, GPIO_PIN_SET);
 8006f30:	2201      	movs	r2, #1
 8006f32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f36:	4822      	ldr	r0, [pc, #136]	; (8006fc0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8006f38:	f7fa ff74 	bl	8001e24 <HAL_GPIO_WritePin>
			htim->Instance->ARR = servo[1];
 8006f3c:	4b27      	ldr	r3, [pc, #156]	; (8006fdc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8006f3e:	885a      	ldrh	r2, [r3, #2]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8006f46:	e023      	b.n	8006f90 <HAL_TIM_PeriodElapsedCallback+0x138>
		case 2:
			HAL_GPIO_WritePin(SERVO_3_GPIO_Port, SERVO_3_Pin, GPIO_PIN_SET);
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f4e:	481c      	ldr	r0, [pc, #112]	; (8006fc0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8006f50:	f7fa ff68 	bl	8001e24 <HAL_GPIO_WritePin>
			htim->Instance->ARR = servo[2];
 8006f54:	4b21      	ldr	r3, [pc, #132]	; (8006fdc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8006f56:	889a      	ldrh	r2, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8006f5e:	e017      	b.n	8006f90 <HAL_TIM_PeriodElapsedCallback+0x138>
		case 3:
			HAL_GPIO_WritePin(SERVO_4_GPIO_Port, SERVO_4_Pin, GPIO_PIN_SET);
 8006f60:	2201      	movs	r2, #1
 8006f62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f66:	4816      	ldr	r0, [pc, #88]	; (8006fc0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8006f68:	f7fa ff5c 	bl	8001e24 <HAL_GPIO_WritePin>
			htim->Instance->ARR = servo[3];
 8006f6c:	4b1b      	ldr	r3, [pc, #108]	; (8006fdc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8006f6e:	88da      	ldrh	r2, [r3, #6]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8006f76:	e00b      	b.n	8006f90 <HAL_TIM_PeriodElapsedCallback+0x138>
		case 4:
			HAL_GPIO_WritePin(SERVO_5_GPIO_Port, SERVO_5_Pin, GPIO_PIN_SET);
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f7e:	4810      	ldr	r0, [pc, #64]	; (8006fc0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8006f80:	f7fa ff50 	bl	8001e24 <HAL_GPIO_WritePin>
			htim->Instance->ARR = servo[4];
 8006f84:	4b15      	ldr	r3, [pc, #84]	; (8006fdc <HAL_TIM_PeriodElapsedCallback+0x184>)
 8006f86:	891a      	ldrh	r2, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8006f8e:	bf00      	nop
		}
		curr_servo++;
 8006f90:	4b11      	ldr	r3, [pc, #68]	; (8006fd8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	3301      	adds	r3, #1
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006f9a:	701a      	strb	r2, [r3, #0]
		flag_mpu = 1;
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	701a      	strb	r2, [r3, #0]
		if (curr_servo > 4) {
 8006fa2:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d903      	bls.n	8006fb2 <HAL_TIM_PeriodElapsedCallback+0x15a>
			curr_servo = 0;
 8006faa:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	701a      	strb	r2, [r3, #0]
		}
	}
	while (0)
 8006fb0:	bf00      	nop
 8006fb2:	bf00      	nop
		;
}
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	40014800 	.word	0x40014800
 8006fc0:	40020c00 	.word	0x40020c00
 8006fc4:	20000580 	.word	0x20000580
 8006fc8:	2000034c 	.word	0x2000034c
 8006fcc:	200003f4 	.word	0x200003f4
 8006fd0:	200005a8 	.word	0x200005a8
 8006fd4:	20000454 	.word	0x20000454
 8006fd8:	200004fe 	.word	0x200004fe
 8006fdc:	20000374 	.word	0x20000374

08006fe0 <HAL_I2C_MemRxCpltCallback>:
 * @brief  Master Rx Transfer completed callback.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval None
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8006fe0:	b590      	push	{r4, r7, lr}
 8006fe2:	b08d      	sub	sp, #52	; 0x34
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]

	//Zeit messen
	HAL_TIM_Base_Stop(&htim10);
 8006fe8:	48a7      	ldr	r0, [pc, #668]	; (8007288 <HAL_I2C_MemRxCpltCallback+0x2a8>)
 8006fea:	f7fe fa7b 	bl	80054e4 <HAL_TIM_Base_Stop>
	led2_t();
 8006fee:	f7ff fd0f 	bl	8006a10 <led2_t>
	looptime = htim10.Instance->CNT * 0.000001; //In us umrechnen
 8006ff2:	4ba5      	ldr	r3, [pc, #660]	; (8007288 <HAL_I2C_MemRxCpltCallback+0x2a8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7f9 fa27 	bl	800044c <__aeabi_ui2d>
 8006ffe:	a39e      	add	r3, pc, #632	; (adr r3, 8007278 <HAL_I2C_MemRxCpltCallback+0x298>)
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	f7f9 fa9c 	bl	8000540 <__aeabi_dmul>
 8007008:	4603      	mov	r3, r0
 800700a:	460c      	mov	r4, r1
 800700c:	4618      	mov	r0, r3
 800700e:	4621      	mov	r1, r4
 8007010:	f7f9 fd8e 	bl	8000b30 <__aeabi_d2f>
 8007014:	4602      	mov	r2, r0
 8007016:	4b9d      	ldr	r3, [pc, #628]	; (800728c <HAL_I2C_MemRxCpltCallback+0x2ac>)
 8007018:	601a      	str	r2, [r3, #0]
	htim10.Instance->CNT = 0;
 800701a:	4b9b      	ldr	r3, [pc, #620]	; (8007288 <HAL_I2C_MemRxCpltCallback+0x2a8>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2200      	movs	r2, #0
 8007020:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim10);
 8007022:	4899      	ldr	r0, [pc, #612]	; (8007288 <HAL_I2C_MemRxCpltCallback+0x2a8>)
 8007024:	f7fe fa3a 	bl	800549c <HAL_TIM_Base_Start>
	//Daten aus Buffer gruff holen und zusammensetzen
	int16_t acc[3], gyro[3], tempt;
	float gx, gy, gz, temp;
	acc[0] = (((int16_t) gruff[0] << 8) | gruff[1]);
 8007028:	4b99      	ldr	r3, [pc, #612]	; (8007290 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	021b      	lsls	r3, r3, #8
 800702e:	b21a      	sxth	r2, r3
 8007030:	4b97      	ldr	r3, [pc, #604]	; (8007290 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 8007032:	785b      	ldrb	r3, [r3, #1]
 8007034:	b21b      	sxth	r3, r3
 8007036:	4313      	orrs	r3, r2
 8007038:	b21b      	sxth	r3, r3
 800703a:	82bb      	strh	r3, [r7, #20]
	acc[0] = acc[0] / ACC_SCALE_4g;
 800703c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007040:	ee07 3a90 	vmov	s15, r3
 8007044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007048:	eddf 6a92 	vldr	s13, [pc, #584]	; 8007294 <HAL_I2C_MemRxCpltCallback+0x2b4>
 800704c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007054:	ee17 3a90 	vmov	r3, s15
 8007058:	b21b      	sxth	r3, r3
 800705a:	82bb      	strh	r3, [r7, #20]
	acc[1] = (((int16_t) gruff[2] << 8) | gruff[3]);
 800705c:	4b8c      	ldr	r3, [pc, #560]	; (8007290 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 800705e:	789b      	ldrb	r3, [r3, #2]
 8007060:	021b      	lsls	r3, r3, #8
 8007062:	b21a      	sxth	r2, r3
 8007064:	4b8a      	ldr	r3, [pc, #552]	; (8007290 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 8007066:	78db      	ldrb	r3, [r3, #3]
 8007068:	b21b      	sxth	r3, r3
 800706a:	4313      	orrs	r3, r2
 800706c:	b21b      	sxth	r3, r3
 800706e:	82fb      	strh	r3, [r7, #22]
	acc[1] = acc[1] / ACC_SCALE_4g;
 8007070:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007074:	ee07 3a90 	vmov	s15, r3
 8007078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800707c:	eddf 6a85 	vldr	s13, [pc, #532]	; 8007294 <HAL_I2C_MemRxCpltCallback+0x2b4>
 8007080:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007088:	ee17 3a90 	vmov	r3, s15
 800708c:	b21b      	sxth	r3, r3
 800708e:	82fb      	strh	r3, [r7, #22]
	acc[2] = (((int16_t) gruff[4] << 8) | gruff[5]);
 8007090:	4b7f      	ldr	r3, [pc, #508]	; (8007290 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 8007092:	791b      	ldrb	r3, [r3, #4]
 8007094:	021b      	lsls	r3, r3, #8
 8007096:	b21a      	sxth	r2, r3
 8007098:	4b7d      	ldr	r3, [pc, #500]	; (8007290 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 800709a:	795b      	ldrb	r3, [r3, #5]
 800709c:	b21b      	sxth	r3, r3
 800709e:	4313      	orrs	r3, r2
 80070a0:	b21b      	sxth	r3, r3
 80070a2:	833b      	strh	r3, [r7, #24]
	acc[2] = acc[2] / ACC_SCALE_4g;
 80070a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80070a8:	ee07 3a90 	vmov	s15, r3
 80070ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070b0:	eddf 6a78 	vldr	s13, [pc, #480]	; 8007294 <HAL_I2C_MemRxCpltCallback+0x2b4>
 80070b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070bc:	ee17 3a90 	vmov	r3, s15
 80070c0:	b21b      	sxth	r3, r3
 80070c2:	833b      	strh	r3, [r7, #24]
	tempt = ((int16_t) gruff[6] << 8) | gruff[7];
 80070c4:	4b72      	ldr	r3, [pc, #456]	; (8007290 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 80070c6:	799b      	ldrb	r3, [r3, #6]
 80070c8:	021b      	lsls	r3, r3, #8
 80070ca:	b21a      	sxth	r2, r3
 80070cc:	4b70      	ldr	r3, [pc, #448]	; (8007290 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 80070ce:	79db      	ldrb	r3, [r3, #7]
 80070d0:	b21b      	sxth	r3, r3
 80070d2:	4313      	orrs	r3, r2
 80070d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	temp = (tempt / 340.0f) + 36.53f;
 80070d6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070e2:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8007298 <HAL_I2C_MemRxCpltCallback+0x2b8>
 80070e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070ea:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800729c <HAL_I2C_MemRxCpltCallback+0x2bc>
 80070ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070f2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	gyro[0] = (((int16_t) gruff[8] << 8) | gruff[9]) - gyro_offset[0];
 80070f6:	4b66      	ldr	r3, [pc, #408]	; (8007290 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 80070f8:	7a1b      	ldrb	r3, [r3, #8]
 80070fa:	021b      	lsls	r3, r3, #8
 80070fc:	b21a      	sxth	r2, r3
 80070fe:	4b64      	ldr	r3, [pc, #400]	; (8007290 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 8007100:	7a5b      	ldrb	r3, [r3, #9]
 8007102:	b21b      	sxth	r3, r3
 8007104:	4313      	orrs	r3, r2
 8007106:	b21b      	sxth	r3, r3
 8007108:	b29a      	uxth	r2, r3
 800710a:	4b65      	ldr	r3, [pc, #404]	; (80072a0 <HAL_I2C_MemRxCpltCallback+0x2c0>)
 800710c:	f993 3000 	ldrsb.w	r3, [r3]
 8007110:	b29b      	uxth	r3, r3
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	b29b      	uxth	r3, r3
 8007116:	b21b      	sxth	r3, r3
 8007118:	81bb      	strh	r3, [r7, #12]
	gx = ((float) gyro[0] / GYRO_SCALE_2000dps) * (M_PI / 180.0f);
 800711a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007126:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80072a4 <HAL_I2C_MemRxCpltCallback+0x2c4>
 800712a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800712e:	ee16 0a90 	vmov	r0, s13
 8007132:	f7f9 f9ad 	bl	8000490 <__aeabi_f2d>
 8007136:	a352      	add	r3, pc, #328	; (adr r3, 8007280 <HAL_I2C_MemRxCpltCallback+0x2a0>)
 8007138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713c:	f7f9 fa00 	bl	8000540 <__aeabi_dmul>
 8007140:	4603      	mov	r3, r0
 8007142:	460c      	mov	r4, r1
 8007144:	4618      	mov	r0, r3
 8007146:	4621      	mov	r1, r4
 8007148:	f7f9 fcf2 	bl	8000b30 <__aeabi_d2f>
 800714c:	4603      	mov	r3, r0
 800714e:	627b      	str	r3, [r7, #36]	; 0x24
	gyro[1] = (((int16_t) gruff[10] << 8) | gruff[11]) - gyro_offset[1];
 8007150:	4b4f      	ldr	r3, [pc, #316]	; (8007290 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 8007152:	7a9b      	ldrb	r3, [r3, #10]
 8007154:	021b      	lsls	r3, r3, #8
 8007156:	b21a      	sxth	r2, r3
 8007158:	4b4d      	ldr	r3, [pc, #308]	; (8007290 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 800715a:	7adb      	ldrb	r3, [r3, #11]
 800715c:	b21b      	sxth	r3, r3
 800715e:	4313      	orrs	r3, r2
 8007160:	b21b      	sxth	r3, r3
 8007162:	b29a      	uxth	r2, r3
 8007164:	4b4e      	ldr	r3, [pc, #312]	; (80072a0 <HAL_I2C_MemRxCpltCallback+0x2c0>)
 8007166:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800716a:	b29b      	uxth	r3, r3
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	b29b      	uxth	r3, r3
 8007170:	b21b      	sxth	r3, r3
 8007172:	81fb      	strh	r3, [r7, #14]
	gy = ((float) gyro[1] / GYRO_SCALE_2000dps) * (M_PI / 180.0f);
 8007174:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007178:	ee07 3a90 	vmov	s15, r3
 800717c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007180:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80072a4 <HAL_I2C_MemRxCpltCallback+0x2c4>
 8007184:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007188:	ee16 0a90 	vmov	r0, s13
 800718c:	f7f9 f980 	bl	8000490 <__aeabi_f2d>
 8007190:	a33b      	add	r3, pc, #236	; (adr r3, 8007280 <HAL_I2C_MemRxCpltCallback+0x2a0>)
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	f7f9 f9d3 	bl	8000540 <__aeabi_dmul>
 800719a:	4603      	mov	r3, r0
 800719c:	460c      	mov	r4, r1
 800719e:	4618      	mov	r0, r3
 80071a0:	4621      	mov	r1, r4
 80071a2:	f7f9 fcc5 	bl	8000b30 <__aeabi_d2f>
 80071a6:	4603      	mov	r3, r0
 80071a8:	623b      	str	r3, [r7, #32]
	gyro[2] = (((int16_t) gruff[12] << 8) | gruff[13]) - gyro_offset[2];
 80071aa:	4b39      	ldr	r3, [pc, #228]	; (8007290 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 80071ac:	7b1b      	ldrb	r3, [r3, #12]
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	b21a      	sxth	r2, r3
 80071b2:	4b37      	ldr	r3, [pc, #220]	; (8007290 <HAL_I2C_MemRxCpltCallback+0x2b0>)
 80071b4:	7b5b      	ldrb	r3, [r3, #13]
 80071b6:	b21b      	sxth	r3, r3
 80071b8:	4313      	orrs	r3, r2
 80071ba:	b21b      	sxth	r3, r3
 80071bc:	b29a      	uxth	r2, r3
 80071be:	4b38      	ldr	r3, [pc, #224]	; (80072a0 <HAL_I2C_MemRxCpltCallback+0x2c0>)
 80071c0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	b21b      	sxth	r3, r3
 80071cc:	823b      	strh	r3, [r7, #16]
	gz = ((float) gyro[2] / GYRO_SCALE_2000dps) * (M_PI / 180.0f);
 80071ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071da:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80072a4 <HAL_I2C_MemRxCpltCallback+0x2c4>
 80071de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80071e2:	ee16 0a90 	vmov	r0, s13
 80071e6:	f7f9 f953 	bl	8000490 <__aeabi_f2d>
 80071ea:	a325      	add	r3, pc, #148	; (adr r3, 8007280 <HAL_I2C_MemRxCpltCallback+0x2a0>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f7f9 f9a6 	bl	8000540 <__aeabi_dmul>
 80071f4:	4603      	mov	r3, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	4618      	mov	r0, r3
 80071fa:	4621      	mov	r1, r4
 80071fc:	f7f9 fc98 	bl	8000b30 <__aeabi_d2f>
 8007200:	4603      	mov	r3, r0
 8007202:	61fb      	str	r3, [r7, #28]

	MadgwickAHRSupdateIMU(gx, gy, gz, acc[0], acc[1], acc[2]);
 8007204:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007208:	ee07 3a90 	vmov	s15, r3
 800720c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007210:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007214:	ee07 3a10 	vmov	s14, r3
 8007218:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800721c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007220:	ee06 3a90 	vmov	s13, r3
 8007224:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007228:	eef0 2a66 	vmov.f32	s5, s13
 800722c:	eeb0 2a47 	vmov.f32	s4, s14
 8007230:	eef0 1a67 	vmov.f32	s3, s15
 8007234:	ed97 1a07 	vldr	s2, [r7, #28]
 8007238:	edd7 0a08 	vldr	s1, [r7, #32]
 800723c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8007240:	f7fe ff04 	bl	800604c <MadgwickAHRSupdateIMU>

	pid_yaw();
 8007244:	f7ff fd88 	bl	8006d58 <pid_yaw>
	pid_pitch();
 8007248:	f7ff fcfe 	bl	8006c48 <pid_pitch>
	pid_roll();
 800724c:	f7ff fd7c 	bl	8006d48 <pid_roll>
	watch_check = 0;
 8007250:	4b15      	ldr	r3, [pc, #84]	; (80072a8 <HAL_I2C_MemRxCpltCallback+0x2c8>)
 8007252:	2200      	movs	r2, #0
 8007254:	701a      	strb	r2, [r3, #0]
	flag_mpu = 0;
 8007256:	4b15      	ldr	r3, [pc, #84]	; (80072ac <HAL_I2C_MemRxCpltCallback+0x2cc>)
 8007258:	2200      	movs	r2, #0
 800725a:	701a      	strb	r2, [r3, #0]
	htim11.Instance->ARR = 10; // Damit er gleich zurück zum Servo springt
 800725c:	4b14      	ldr	r3, [pc, #80]	; (80072b0 <HAL_I2C_MemRxCpltCallback+0x2d0>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	220a      	movs	r2, #10
 8007262:	62da      	str	r2, [r3, #44]	; 0x2c
	htim11.Instance->CNT = 0;
 8007264:	4b12      	ldr	r3, [pc, #72]	; (80072b0 <HAL_I2C_MemRxCpltCallback+0x2d0>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2200      	movs	r2, #0
 800726a:	625a      	str	r2, [r3, #36]	; 0x24
	//HAL_TIM_Base_Start_IT(&htim11);

}
 800726c:	bf00      	nop
 800726e:	3734      	adds	r7, #52	; 0x34
 8007270:	46bd      	mov	sp, r7
 8007272:	bd90      	pop	{r4, r7, pc}
 8007274:	f3af 8000 	nop.w
 8007278:	a0b5ed8d 	.word	0xa0b5ed8d
 800727c:	3eb0c6f7 	.word	0x3eb0c6f7
 8007280:	a2529d39 	.word	0xa2529d39
 8007284:	3f91df46 	.word	0x3f91df46
 8007288:	200004a8 	.word	0x200004a8
 800728c:	2000033c 	.word	0x2000033c
 8007290:	200004f0 	.word	0x200004f0
 8007294:	4103126f 	.word	0x4103126f
 8007298:	43aa0000 	.word	0x43aa0000
 800729c:	42121eb8 	.word	0x42121eb8
 80072a0:	200005a4 	.word	0x200005a4
 80072a4:	41833333 	.word	0x41833333
 80072a8:	2000034c 	.word	0x2000034c
 80072ac:	20000580 	.word	0x20000580
 80072b0:	20000540 	.word	0x20000540

080072b4 <dump_quat_on_uart>:

void dump_quat_on_uart() {
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	b099      	sub	sp, #100	; 0x64
 80072b8:	af00      	add	r7, sp, #0
	uint8_t buff[8];
	int16_t iq0, iq1, iq2, iq3;
	iq0 = (int16_t) (q_ist.q0 * 10000.0f);
 80072ba:	4b7e      	ldr	r3, [pc, #504]	; (80074b4 <dump_quat_on_uart+0x200>)
 80072bc:	edd3 7a00 	vldr	s15, [r3]
 80072c0:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80074b8 <dump_quat_on_uart+0x204>
 80072c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072cc:	ee17 3a90 	vmov	r3, s15
 80072d0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	iq1 = (int16_t) (q_ist.q1 * 10000.0f);
 80072d4:	4b77      	ldr	r3, [pc, #476]	; (80074b4 <dump_quat_on_uart+0x200>)
 80072d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80072da:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80074b8 <dump_quat_on_uart+0x204>
 80072de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072e6:	ee17 3a90 	vmov	r3, s15
 80072ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	iq2 = (int16_t) (q_ist.q2 * 10000.0f);
 80072ee:	4b71      	ldr	r3, [pc, #452]	; (80074b4 <dump_quat_on_uart+0x200>)
 80072f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80072f4:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80074b8 <dump_quat_on_uart+0x204>
 80072f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007300:	ee17 3a90 	vmov	r3, s15
 8007304:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	iq3 = (int16_t) (q_ist.q3 * 10000.0f);
 8007308:	4b6a      	ldr	r3, [pc, #424]	; (80074b4 <dump_quat_on_uart+0x200>)
 800730a:	edd3 7a03 	vldr	s15, [r3, #12]
 800730e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80074b8 <dump_quat_on_uart+0x204>
 8007312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800731a:	ee17 3a90 	vmov	r3, s15
 800731e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	buff[0] = iq0 >> 8;
 8007322:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8007326:	121b      	asrs	r3, r3, #8
 8007328:	b21b      	sxth	r3, r3
 800732a:	b2db      	uxtb	r3, r3
 800732c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	buff[1] = iq0;
 8007330:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007334:	b2db      	uxtb	r3, r3
 8007336:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	buff[2] = iq1 >> 8;
 800733a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 800733e:	121b      	asrs	r3, r3, #8
 8007340:	b21b      	sxth	r3, r3
 8007342:	b2db      	uxtb	r3, r3
 8007344:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	buff[3] = iq1;
 8007348:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800734c:	b2db      	uxtb	r3, r3
 800734e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	buff[4] = iq2 >> 8;
 8007352:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8007356:	121b      	asrs	r3, r3, #8
 8007358:	b21b      	sxth	r3, r3
 800735a:	b2db      	uxtb	r3, r3
 800735c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	buff[5] = iq2;
 8007360:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007364:	b2db      	uxtb	r3, r3
 8007366:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	buff[6] = iq3 >> 8;
 800736a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800736e:	121b      	asrs	r3, r3, #8
 8007370:	b21b      	sxth	r3, r3
 8007372:	b2db      	uxtb	r3, r3
 8007374:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	buff[7] = iq3;
 8007378:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800737c:	b2db      	uxtb	r3, r3
 800737e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	//itoa((int16_t) (q0 * 1000.f), buff, 10);
	//HAL_UART_Transmit(&huart1, buff, 8, 160);
	Quaternion qm;
	quat_copy(&q_ist, &qm);
 8007382:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007386:	4619      	mov	r1, r3
 8007388:	484a      	ldr	r0, [pc, #296]	; (80074b4 <dump_quat_on_uart+0x200>)
 800738a:	f001 f8aa 	bl	80084e2 <quat_copy>
	Quaternion qx = { 0, 1, 0, 0 }, qy = { 0, 0, 1, 0 }, qz = { 0, 0, 0, 1 };
 800738e:	f04f 0300 	mov.w	r3, #0
 8007392:	633b      	str	r3, [r7, #48]	; 0x30
 8007394:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
 800739a:	f04f 0300 	mov.w	r3, #0
 800739e:	63bb      	str	r3, [r7, #56]	; 0x38
 80073a0:	f04f 0300 	mov.w	r3, #0
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073a6:	f04f 0300 	mov.w	r3, #0
 80073aa:	623b      	str	r3, [r7, #32]
 80073ac:	f04f 0300 	mov.w	r3, #0
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
 80073b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80073b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80073b8:	f04f 0300 	mov.w	r3, #0
 80073bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	f04f 0300 	mov.w	r3, #0
 80073ce:	61bb      	str	r3, [r7, #24]
 80073d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80073d4:	61fb      	str	r3, [r7, #28]
	//Achsen auf aktuelle Position projezieren
	quat_qpq(&qm, &qx, &qx);
 80073d6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80073da:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80073de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80073e2:	4618      	mov	r0, r3
 80073e4:	f001 f85b 	bl	800849e <quat_qpq>
	quat_qpq(&qm, &qy, &qy);
 80073e8:	f107 0220 	add.w	r2, r7, #32
 80073ec:	f107 0120 	add.w	r1, r7, #32
 80073f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80073f4:	4618      	mov	r0, r3
 80073f6:	f001 f852 	bl	800849e <quat_qpq>
	quat_qpq(&qm, &qz, &qz);
 80073fa:	f107 0210 	add.w	r2, r7, #16
 80073fe:	f107 0110 	add.w	r1, r7, #16
 8007402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007406:	4618      	mov	r0, r3
 8007408:	f001 f849 	bl	800849e <quat_qpq>

	char txt_buff[] = "   :   :   :   ";
 800740c:	4b2b      	ldr	r3, [pc, #172]	; (80074bc <dump_quat_on_uart+0x208>)
 800740e:	463c      	mov	r4, r7
 8007410:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007412:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	itoa((int) (qx.q0 * 10.0f), &txt_buff[0], 10);
 8007416:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800741a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800741e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007426:	463b      	mov	r3, r7
 8007428:	220a      	movs	r2, #10
 800742a:	4619      	mov	r1, r3
 800742c:	ee17 0a90 	vmov	r0, s15
 8007430:	f001 fc2c 	bl	8008c8c <itoa>
	itoa((int) (qx.q1 * 10.0f), &txt_buff[4], 10);
 8007434:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8007438:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800743c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007444:	463b      	mov	r3, r7
 8007446:	3304      	adds	r3, #4
 8007448:	220a      	movs	r2, #10
 800744a:	4619      	mov	r1, r3
 800744c:	ee17 0a90 	vmov	r0, s15
 8007450:	f001 fc1c 	bl	8008c8c <itoa>
	itoa((int) (qx.q2 * 10.0f), &txt_buff[8], 10);
 8007454:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8007458:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800745c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007464:	463b      	mov	r3, r7
 8007466:	3308      	adds	r3, #8
 8007468:	220a      	movs	r2, #10
 800746a:	4619      	mov	r1, r3
 800746c:	ee17 0a90 	vmov	r0, s15
 8007470:	f001 fc0c 	bl	8008c8c <itoa>
	itoa((int) (qx.q3 * 10.0f), &txt_buff[12], 10);
 8007474:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8007478:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800747c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007480:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007484:	463b      	mov	r3, r7
 8007486:	330c      	adds	r3, #12
 8007488:	220a      	movs	r2, #10
 800748a:	4619      	mov	r1, r3
 800748c:	ee17 0a90 	vmov	r0, s15
 8007490:	f001 fbfc 	bl	8008c8c <itoa>
	HAL_UART_Transmit(&huart1, txt_buff, 16, 160);
 8007494:	4639      	mov	r1, r7
 8007496:	23a0      	movs	r3, #160	; 0xa0
 8007498:	2210      	movs	r2, #16
 800749a:	4809      	ldr	r0, [pc, #36]	; (80074c0 <dump_quat_on_uart+0x20c>)
 800749c:	f7fe faa3 	bl	80059e6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "\n\r", 2, 160);
 80074a0:	23a0      	movs	r3, #160	; 0xa0
 80074a2:	2202      	movs	r2, #2
 80074a4:	4907      	ldr	r1, [pc, #28]	; (80074c4 <dump_quat_on_uart+0x210>)
 80074a6:	4806      	ldr	r0, [pc, #24]	; (80074c0 <dump_quat_on_uart+0x20c>)
 80074a8:	f7fe fa9d 	bl	80059e6 <HAL_UART_Transmit>
}
 80074ac:	bf00      	nop
 80074ae:	3764      	adds	r7, #100	; 0x64
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd90      	pop	{r4, r7, pc}
 80074b4:	20000354 	.word	0x20000354
 80074b8:	461c4000 	.word	0x461c4000
 80074bc:	0800aa5c 	.word	0x0800aa5c
 80074c0:	20000500 	.word	0x20000500
 80074c4:	0800aa58 	.word	0x0800aa58

080074c8 <lora_cb>:

TWiMOD_HCI_Message lora_cb(TWiMOD_HCI_Message msg) {
 80074c8:	b084      	sub	sp, #16
 80074ca:	b590      	push	{r4, r7, lr}
 80074cc:	b0d1      	sub	sp, #324	; 0x144
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	1d3c      	adds	r4, r7, #4
 80074d2:	6020      	str	r0, [r4, #0]
 80074d4:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 80074d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	TWiMOD_HCI_Message ret;
	return ret;
 80074dc:	1d3b      	adds	r3, r7, #4
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	f107 030c 	add.w	r3, r7, #12
 80074e4:	4610      	mov	r0, r2
 80074e6:	4619      	mov	r1, r3
 80074e8:	f44f 7399 	mov.w	r3, #306	; 0x132
 80074ec:	461a      	mov	r2, r3
 80074ee:	f001 fbcf 	bl	8008c90 <memcpy>
}
 80074f2:	1d3b      	adds	r3, r7, #4
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80074fa:	46bd      	mov	sp, r7
 80074fc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8007500:	b004      	add	sp, #16
 8007502:	4770      	bx	lr

08007504 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8007504:	b590      	push	{r4, r7, lr}
 8007506:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800750a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800750c:	f7f9 fce0 	bl	8000ed0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8007510:	f000 f9aa 	bl	8007868 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8007514:	f000 fbdc 	bl	8007cd0 <MX_GPIO_Init>
	MX_DMA_Init();
 8007518:	f000 fba4 	bl	8007c64 <MX_DMA_Init>
	MX_I2C1_Init();
 800751c:	f000 fa52 	bl	80079c4 <MX_I2C1_Init>
	MX_RTC_Init();
 8007520:	f000 fa7e 	bl	8007a20 <MX_RTC_Init>
	MX_SPI1_Init();
 8007524:	f000 faa2 	bl	8007a6c <MX_SPI1_Init>
	MX_TIM10_Init();
 8007528:	f000 fad6 	bl	8007ad8 <MX_TIM10_Init>
	MX_TIM11_Init();
 800752c:	f000 faf8 	bl	8007b20 <MX_TIM11_Init>
	MX_USART1_UART_Init();
 8007530:	f000 fb1a 	bl	8007b68 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8007534:	f000 fb42 	bl	8007bbc <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8007538:	f000 fb6a 	bl	8007c10 <MX_USART3_UART_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 800753c:	f000 fa16 	bl	800796c <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	print_uart("Startup...");
 8007540:	48ba      	ldr	r0, [pc, #744]	; (800782c <main+0x328>)
 8007542:	f7ff fab9 	bl	8006ab8 <print_uart>
	HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8007546:	201f      	movs	r0, #31
 8007548:	f7f9 fe7d 	bl	8001246 <HAL_NVIC_DisableIRQ>
	//mpu_init_spi(&hspi1);
	mpu_init_std(&hi2c1);
 800754c:	48b8      	ldr	r0, [pc, #736]	; (8007830 <main+0x32c>)
 800754e:	f000 fc7b 	bl	8007e48 <mpu_init_std>
	//mpu_set_sensors(INV_XYZ_ACCEL | INV_XYZ_GYRO | INV_XYZ_COMPASS);

	pid_init();
 8007552:	f7ff fb49 	bl	8006be8 <pid_init>
	leds_reset(); //LEDs ausschalten
 8007556:	f7ff fa6f 	bl	8006a38 <leds_reset>
	HAL_GPIO_WritePin(MPU_CS_GPIO_Port, MPU_CS_Pin, GPIO_PIN_SET); // MPU Select auf HIGH
 800755a:	2201      	movs	r2, #1
 800755c:	2102      	movs	r1, #2
 800755e:	48b5      	ldr	r0, [pc, #724]	; (8007834 <main+0x330>)
 8007560:	f7fa fc60 	bl	8001e24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET); // Flash Select auf HIGH
 8007564:	2201      	movs	r2, #1
 8007566:	2101      	movs	r1, #1
 8007568:	48b2      	ldr	r0, [pc, #712]	; (8007834 <main+0x330>)
 800756a:	f7fa fc5b 	bl	8001e24 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 800756e:	200a      	movs	r0, #10
 8007570:	f7f9 fd20 	bl	8000fb4 <HAL_Delay>
	blink(4);
 8007574:	2004      	movs	r0, #4
 8007576:	f7ff fa7f 	bl	8006a78 <blink>
	mpu_calibrate(&hi2c1, gyro_offset, rot);
 800757a:	4aaf      	ldr	r2, [pc, #700]	; (8007838 <main+0x334>)
 800757c:	49af      	ldr	r1, [pc, #700]	; (800783c <main+0x338>)
 800757e:	48ac      	ldr	r0, [pc, #688]	; (8007830 <main+0x32c>)
 8007580:	f000 fcaa 	bl	8007ed8 <mpu_calibrate>
	//
	//TWiMOD_HCI_CbRxMessage cbm = (&lora_cb);
	TWiMOD_HCI_Message iMsg = { 0, 0x01, 0x01, 0, 0 };
 8007584:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007588:	4618      	mov	r0, r3
 800758a:	f44f 7399 	mov.w	r3, #306	; 0x132
 800758e:	461a      	mov	r2, r3
 8007590:	2100      	movs	r1, #0
 8007592:	f001 fb88 	bl	8008ca6 <memset>
 8007596:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800759a:	2201      	movs	r2, #1
 800759c:	709a      	strb	r2, [r3, #2]
 800759e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80075a2:	2201      	movs	r2, #1
 80075a4:	70da      	strb	r2, [r3, #3]
	WiMOD_HCI_Init(&lora_cb, &iMsg);
 80075a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80075aa:	4619      	mov	r1, r3
 80075ac:	48a4      	ldr	r0, [pc, #656]	; (8007840 <main+0x33c>)
 80075ae:	f7ff f983 	bl	80068b8 <WiMOD_HCI_Init>
	HAL_Delay(5);
 80075b2:	2005      	movs	r0, #5
 80075b4:	f7f9 fcfe 	bl	8000fb4 <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	curr_servo = 0;
 80075b8:	4ba2      	ldr	r3, [pc, #648]	; (8007844 <main+0x340>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	701a      	strb	r2, [r3, #0]
	flag_mpu = 0;
 80075be:	4ba2      	ldr	r3, [pc, #648]	; (8007848 <main+0x344>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	701a      	strb	r2, [r3, #0]
	center_off(); //Servos mittig, motor aus
 80075c4:	f7ff faf2 	bl	8006bac <center_off>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80075c8:	201f      	movs	r0, #31
 80075ca:	f7f9 fe2e 	bl	800122a <HAL_NVIC_EnableIRQ>
	//HAL_TIM_Base_Start(&htim10); //MPU/IMU Timer
	HAL_TIM_Base_Start_IT(&htim11); //Servo Timer
 80075ce:	489f      	ldr	r0, [pc, #636]	; (800784c <main+0x348>)
 80075d0:	f7fd ffb3 	bl	800553a <HAL_TIM_Base_Start_IT>

	uint8_t state = 1, demo = 0;
 80075d4:	2301      	movs	r3, #1
 80075d6:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
 80075da:	2300      	movs	r3, #0
 80075dc:	f887 3286 	strb.w	r3, [r7, #646]	; 0x286
	uint32_t tick = 0, tack = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 80075e6:	2300      	movs	r3, #0
 80075e8:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c

	Quaternion q180 = {0,0,0,1};
 80075ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80075fa:	f04f 0200 	mov.w	r2, #0
 80075fe:	605a      	str	r2, [r3, #4]
 8007600:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007604:	f04f 0200 	mov.w	r2, #0
 8007608:	609a      	str	r2, [r3, #8]
 800760a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800760e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007612:	60da      	str	r2, [r3, #12]

	while (1) {
		switch (state) {
 8007614:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <main+0x11e>
 800761c:	2b01      	cmp	r3, #1
 800761e:	d005      	beq.n	800762c <main+0x128>
			default:
				break;
			}
			break;
		default:
			break;
 8007620:	e041      	b.n	80076a6 <main+0x1a2>
			servo[0] = 1000; //Motor aus
 8007622:	4b8b      	ldr	r3, [pc, #556]	; (8007850 <main+0x34c>)
 8007624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007628:	801a      	strh	r2, [r3, #0]
			break;
 800762a:	e03c      	b.n	80076a6 <main+0x1a2>
			switch (demo) {
 800762c:	f897 3286 	ldrb.w	r3, [r7, #646]	; 0x286
 8007630:	2b01      	cmp	r3, #1
 8007632:	d01b      	beq.n	800766c <main+0x168>
 8007634:	2b02      	cmp	r3, #2
 8007636:	d029      	beq.n	800768c <main+0x188>
 8007638:	2b00      	cmp	r3, #0
 800763a:	d000      	beq.n	800763e <main+0x13a>
				break;
 800763c:	e032      	b.n	80076a4 <main+0x1a0>
				if (servo[2] < 1500) {
 800763e:	4b84      	ldr	r3, [pc, #528]	; (8007850 <main+0x34c>)
 8007640:	889b      	ldrh	r3, [r3, #4]
 8007642:	f240 52db 	movw	r2, #1499	; 0x5db
 8007646:	4293      	cmp	r3, r2
 8007648:	d806      	bhi.n	8007658 <main+0x154>
					servo[2]++;
 800764a:	4b81      	ldr	r3, [pc, #516]	; (8007850 <main+0x34c>)
 800764c:	889b      	ldrh	r3, [r3, #4]
 800764e:	3301      	adds	r3, #1
 8007650:	b29a      	uxth	r2, r3
 8007652:	4b7f      	ldr	r3, [pc, #508]	; (8007850 <main+0x34c>)
 8007654:	809a      	strh	r2, [r3, #4]
				break;
 8007656:	e025      	b.n	80076a4 <main+0x1a0>
					demo++;
 8007658:	f897 3286 	ldrb.w	r3, [r7, #646]	; 0x286
 800765c:	3301      	adds	r3, #1
 800765e:	f887 3286 	strb.w	r3, [r7, #646]	; 0x286
					tick = HAL_GetTick();
 8007662:	f7f9 fc9b 	bl	8000f9c <HAL_GetTick>
 8007666:	f8c7 0280 	str.w	r0, [r7, #640]	; 0x280
				break;
 800766a:	e01b      	b.n	80076a4 <main+0x1a0>
				if (HAL_GetTick() - tick >= 15000) {
 800766c:	f7f9 fc96 	bl	8000f9c <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	f643 2297 	movw	r2, #14999	; 0x3a97
 800767c:	4293      	cmp	r3, r2
 800767e:	d910      	bls.n	80076a2 <main+0x19e>
					demo++;
 8007680:	f897 3286 	ldrb.w	r3, [r7, #646]	; 0x286
 8007684:	3301      	adds	r3, #1
 8007686:	f887 3286 	strb.w	r3, [r7, #646]	; 0x286
				break;
 800768a:	e00a      	b.n	80076a2 <main+0x19e>
				quat_multiply(&q_soll, &q180, &q_soll);
 800768c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007690:	4a70      	ldr	r2, [pc, #448]	; (8007854 <main+0x350>)
 8007692:	4619      	mov	r1, r3
 8007694:	486f      	ldr	r0, [pc, #444]	; (8007854 <main+0x350>)
 8007696:	f000 fe51 	bl	800833c <quat_multiply>
				demo = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	f887 3286 	strb.w	r3, [r7, #646]	; 0x286
				break;
 80076a0:	e000      	b.n	80076a4 <main+0x1a0>
				break;
 80076a2:	bf00      	nop
			break;
 80076a4:	bf00      	nop
		}

		//Sekündlich Dinge tun
		if (HAL_GetTick() - tack >= 1000) {
 80076a6:	f7f9 fc79 	bl	8000f9c <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076b6:	f0c0 80ac 	bcc.w	8007812 <main+0x30e>
			TWiMOD_HCI_Message wiMsg;
			wiMsg.MsgID = RADIOLINK_MSG_SEND_U_DATA_REQ;
 80076ba:	1d3b      	adds	r3, r7, #4
 80076bc:	2201      	movs	r2, #1
 80076be:	70da      	strb	r2, [r3, #3]
			wiMsg.SapID = RADIOLINK_ID;
 80076c0:	1d3b      	adds	r3, r7, #4
 80076c2:	2203      	movs	r2, #3
 80076c4:	709a      	strb	r2, [r3, #2]
			wiMsg.Payload[0] = 0x17;
 80076c6:	1d3b      	adds	r3, r7, #4
 80076c8:	2217      	movs	r2, #23
 80076ca:	711a      	strb	r2, [r3, #4]
			wiMsg.Payload[1] = 0xBB;
 80076cc:	1d3b      	adds	r3, r7, #4
 80076ce:	22bb      	movs	r2, #187	; 0xbb
 80076d0:	715a      	strb	r2, [r3, #5]
			wiMsg.Payload[2] = 0xAA;
 80076d2:	1d3b      	adds	r3, r7, #4
 80076d4:	22aa      	movs	r2, #170	; 0xaa
 80076d6:	719a      	strb	r2, [r3, #6]

			wiMsg.Payload[3] = (uint8_t) (q_ist.q0 + 1.0) * 100.0;
 80076d8:	4b5f      	ldr	r3, [pc, #380]	; (8007858 <main+0x354>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4618      	mov	r0, r3
 80076de:	f7f8 fed7 	bl	8000490 <__aeabi_f2d>
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	4b5d      	ldr	r3, [pc, #372]	; (800785c <main+0x358>)
 80076e8:	f7f8 fd74 	bl	80001d4 <__adddf3>
 80076ec:	4603      	mov	r3, r0
 80076ee:	460c      	mov	r4, r1
 80076f0:	4618      	mov	r0, r3
 80076f2:	4621      	mov	r1, r4
 80076f4:	f7f9 f9fc 	bl	8000af0 <__aeabi_d2uiz>
 80076f8:	4603      	mov	r3, r0
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7f8 feb5 	bl	800046c <__aeabi_i2d>
 8007702:	f04f 0200 	mov.w	r2, #0
 8007706:	4b56      	ldr	r3, [pc, #344]	; (8007860 <main+0x35c>)
 8007708:	f7f8 ff1a 	bl	8000540 <__aeabi_dmul>
 800770c:	4603      	mov	r3, r0
 800770e:	460c      	mov	r4, r1
 8007710:	4618      	mov	r0, r3
 8007712:	4621      	mov	r1, r4
 8007714:	f7f9 f9ec 	bl	8000af0 <__aeabi_d2uiz>
 8007718:	4603      	mov	r3, r0
 800771a:	b2da      	uxtb	r2, r3
 800771c:	1d3b      	adds	r3, r7, #4
 800771e:	71da      	strb	r2, [r3, #7]
			wiMsg.Payload[4] = (uint8_t) (q_ist.q1 + 1.0) * 100.0;
 8007720:	4b4d      	ldr	r3, [pc, #308]	; (8007858 <main+0x354>)
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	4618      	mov	r0, r3
 8007726:	f7f8 feb3 	bl	8000490 <__aeabi_f2d>
 800772a:	f04f 0200 	mov.w	r2, #0
 800772e:	4b4b      	ldr	r3, [pc, #300]	; (800785c <main+0x358>)
 8007730:	f7f8 fd50 	bl	80001d4 <__adddf3>
 8007734:	4603      	mov	r3, r0
 8007736:	460c      	mov	r4, r1
 8007738:	4618      	mov	r0, r3
 800773a:	4621      	mov	r1, r4
 800773c:	f7f9 f9d8 	bl	8000af0 <__aeabi_d2uiz>
 8007740:	4603      	mov	r3, r0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	4618      	mov	r0, r3
 8007746:	f7f8 fe91 	bl	800046c <__aeabi_i2d>
 800774a:	f04f 0200 	mov.w	r2, #0
 800774e:	4b44      	ldr	r3, [pc, #272]	; (8007860 <main+0x35c>)
 8007750:	f7f8 fef6 	bl	8000540 <__aeabi_dmul>
 8007754:	4603      	mov	r3, r0
 8007756:	460c      	mov	r4, r1
 8007758:	4618      	mov	r0, r3
 800775a:	4621      	mov	r1, r4
 800775c:	f7f9 f9c8 	bl	8000af0 <__aeabi_d2uiz>
 8007760:	4603      	mov	r3, r0
 8007762:	b2da      	uxtb	r2, r3
 8007764:	1d3b      	adds	r3, r7, #4
 8007766:	721a      	strb	r2, [r3, #8]
			wiMsg.Payload[5] = (uint8_t) (q_ist.q2 + 1.0) * 100.0;
 8007768:	4b3b      	ldr	r3, [pc, #236]	; (8007858 <main+0x354>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	4618      	mov	r0, r3
 800776e:	f7f8 fe8f 	bl	8000490 <__aeabi_f2d>
 8007772:	f04f 0200 	mov.w	r2, #0
 8007776:	4b39      	ldr	r3, [pc, #228]	; (800785c <main+0x358>)
 8007778:	f7f8 fd2c 	bl	80001d4 <__adddf3>
 800777c:	4603      	mov	r3, r0
 800777e:	460c      	mov	r4, r1
 8007780:	4618      	mov	r0, r3
 8007782:	4621      	mov	r1, r4
 8007784:	f7f9 f9b4 	bl	8000af0 <__aeabi_d2uiz>
 8007788:	4603      	mov	r3, r0
 800778a:	b2db      	uxtb	r3, r3
 800778c:	4618      	mov	r0, r3
 800778e:	f7f8 fe6d 	bl	800046c <__aeabi_i2d>
 8007792:	f04f 0200 	mov.w	r2, #0
 8007796:	4b32      	ldr	r3, [pc, #200]	; (8007860 <main+0x35c>)
 8007798:	f7f8 fed2 	bl	8000540 <__aeabi_dmul>
 800779c:	4603      	mov	r3, r0
 800779e:	460c      	mov	r4, r1
 80077a0:	4618      	mov	r0, r3
 80077a2:	4621      	mov	r1, r4
 80077a4:	f7f9 f9a4 	bl	8000af0 <__aeabi_d2uiz>
 80077a8:	4603      	mov	r3, r0
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	1d3b      	adds	r3, r7, #4
 80077ae:	725a      	strb	r2, [r3, #9]
			wiMsg.Payload[6] = (uint8_t) (q_ist.q3 + 1.0) * 100.0;
 80077b0:	4b29      	ldr	r3, [pc, #164]	; (8007858 <main+0x354>)
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7f8 fe6b 	bl	8000490 <__aeabi_f2d>
 80077ba:	f04f 0200 	mov.w	r2, #0
 80077be:	4b27      	ldr	r3, [pc, #156]	; (800785c <main+0x358>)
 80077c0:	f7f8 fd08 	bl	80001d4 <__adddf3>
 80077c4:	4603      	mov	r3, r0
 80077c6:	460c      	mov	r4, r1
 80077c8:	4618      	mov	r0, r3
 80077ca:	4621      	mov	r1, r4
 80077cc:	f7f9 f990 	bl	8000af0 <__aeabi_d2uiz>
 80077d0:	4603      	mov	r3, r0
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7f8 fe49 	bl	800046c <__aeabi_i2d>
 80077da:	f04f 0200 	mov.w	r2, #0
 80077de:	4b20      	ldr	r3, [pc, #128]	; (8007860 <main+0x35c>)
 80077e0:	f7f8 feae 	bl	8000540 <__aeabi_dmul>
 80077e4:	4603      	mov	r3, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	4618      	mov	r0, r3
 80077ea:	4621      	mov	r1, r4
 80077ec:	f7f9 f980 	bl	8000af0 <__aeabi_d2uiz>
 80077f0:	4603      	mov	r3, r0
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	1d3b      	adds	r3, r7, #4
 80077f6:	729a      	strb	r2, [r3, #10]
			wiMsg.Length = 7;
 80077f8:	1d3b      	adds	r3, r7, #4
 80077fa:	2207      	movs	r2, #7
 80077fc:	801a      	strh	r2, [r3, #0]
			WiMOD_HCI_SendMessage(&wiMsg);
 80077fe:	1d3b      	adds	r3, r7, #4
 8007800:	4618      	mov	r0, r3
 8007802:	f7ff f87b 	bl	80068fc <WiMOD_HCI_SendMessage>

			dump_quat_on_uart();
 8007806:	f7ff fd55 	bl	80072b4 <dump_quat_on_uart>

			//Checksumme über Sensorwerte bilden

			tack = HAL_GetTick();
 800780a:	f7f9 fbc7 	bl	8000f9c <HAL_GetTick>
 800780e:	f8c7 027c 	str.w	r0, [r7, #636]	; 0x27c
		}

		if (!HAL_GPIO_ReadPin(BTN_0_GPIO_Port, BTN_0_Pin)) {
 8007812:	2110      	movs	r1, #16
 8007814:	4813      	ldr	r0, [pc, #76]	; (8007864 <main+0x360>)
 8007816:	f7fa faed 	bl	8001df4 <HAL_GPIO_ReadPin>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	f47f aef9 	bne.w	8007614 <main+0x110>
			state = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
		switch (state) {
 8007828:	e6f4      	b.n	8007614 <main+0x110>
 800782a:	bf00      	nop
 800782c:	0800aa6c 	.word	0x0800aa6c
 8007830:	20000454 	.word	0x20000454
 8007834:	40020400 	.word	0x40020400
 8007838:	20000340 	.word	0x20000340
 800783c:	200005a4 	.word	0x200005a4
 8007840:	080074c9 	.word	0x080074c9
 8007844:	200004fe 	.word	0x200004fe
 8007848:	20000580 	.word	0x20000580
 800784c:	20000540 	.word	0x20000540
 8007850:	20000374 	.word	0x20000374
 8007854:	20000364 	.word	0x20000364
 8007858:	20000354 	.word	0x20000354
 800785c:	3ff00000 	.word	0x3ff00000
 8007860:	40590000 	.word	0x40590000
 8007864:	40021000 	.word	0x40021000

08007868 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8007868:	b580      	push	{r7, lr}
 800786a:	b098      	sub	sp, #96	; 0x60
 800786c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800786e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007872:	2230      	movs	r2, #48	; 0x30
 8007874:	2100      	movs	r1, #0
 8007876:	4618      	mov	r0, r3
 8007878:	f001 fa15 	bl	8008ca6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800787c:	f107 031c 	add.w	r3, r7, #28
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	605a      	str	r2, [r3, #4]
 8007886:	609a      	str	r2, [r3, #8]
 8007888:	60da      	str	r2, [r3, #12]
 800788a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800788c:	f107 030c 	add.w	r3, r7, #12
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	605a      	str	r2, [r3, #4]
 8007896:	609a      	str	r2, [r3, #8]
 8007898:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]
 800789e:	4b31      	ldr	r3, [pc, #196]	; (8007964 <SystemClock_Config+0xfc>)
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	4a30      	ldr	r2, [pc, #192]	; (8007964 <SystemClock_Config+0xfc>)
 80078a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a8:	6413      	str	r3, [r2, #64]	; 0x40
 80078aa:	4b2e      	ldr	r3, [pc, #184]	; (8007964 <SystemClock_Config+0xfc>)
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078b2:	60bb      	str	r3, [r7, #8]
 80078b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80078b6:	2300      	movs	r3, #0
 80078b8:	607b      	str	r3, [r7, #4]
 80078ba:	4b2b      	ldr	r3, [pc, #172]	; (8007968 <SystemClock_Config+0x100>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a2a      	ldr	r2, [pc, #168]	; (8007968 <SystemClock_Config+0x100>)
 80078c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	4b28      	ldr	r3, [pc, #160]	; (8007968 <SystemClock_Config+0x100>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ce:	607b      	str	r3, [r7, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 80078d2:	2305      	movs	r3, #5
 80078d4:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80078d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078da:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80078dc:	2301      	movs	r3, #1
 80078de:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80078e0:	2302      	movs	r3, #2
 80078e2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80078e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80078e8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80078ea:	2304      	movs	r3, #4
 80078ec:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 168;
 80078ee:	23a8      	movs	r3, #168	; 0xa8
 80078f0:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80078f2:	2302      	movs	r3, #2
 80078f4:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80078f6:	2304      	movs	r3, #4
 80078f8:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80078fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fc ff46 	bl	8004790 <HAL_RCC_OscConfig>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <SystemClock_Config+0xa6>
		Error_Handler();
 800790a:	f000 fa95 	bl	8007e38 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800790e:	230f      	movs	r3, #15
 8007910:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007912:	2302      	movs	r3, #2
 8007914:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007916:	2300      	movs	r3, #0
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800791a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800791e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007924:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8007926:	f107 031c 	add.w	r3, r7, #28
 800792a:	2105      	movs	r1, #5
 800792c:	4618      	mov	r0, r3
 800792e:	f7fd f971 	bl	8004c14 <HAL_RCC_ClockConfig>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <SystemClock_Config+0xd4>
		Error_Handler();
 8007938:	f000 fa7e 	bl	8007e38 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800793c:	2302      	movs	r3, #2
 800793e:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007940:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007944:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8007946:	f107 030c 	add.w	r3, r7, #12
 800794a:	4618      	mov	r0, r3
 800794c:	f7fd fb50 	bl	8004ff0 <HAL_RCCEx_PeriphCLKConfig>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <SystemClock_Config+0xf2>
		Error_Handler();
 8007956:	f000 fa6f 	bl	8007e38 <Error_Handler>
	}
}
 800795a:	bf00      	nop
 800795c:	3760      	adds	r7, #96	; 0x60
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	40023800 	.word	0x40023800
 8007968:	40007000 	.word	0x40007000

0800796c <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8007970:	2200      	movs	r2, #0
 8007972:	2100      	movs	r1, #0
 8007974:	200b      	movs	r0, #11
 8007976:	f7f9 fc3c 	bl	80011f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800797a:	200b      	movs	r0, #11
 800797c:	f7f9 fc55 	bl	800122a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8007980:	2200      	movs	r2, #0
 8007982:	2100      	movs	r1, #0
 8007984:	2011      	movs	r0, #17
 8007986:	f7f9 fc34 	bl	80011f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800798a:	2011      	movs	r0, #17
 800798c:	f7f9 fc4d 	bl	800122a <HAL_NVIC_EnableIRQ>
	/* TIM1_UP_TIM10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 2);
 8007990:	2202      	movs	r2, #2
 8007992:	2100      	movs	r1, #0
 8007994:	2019      	movs	r0, #25
 8007996:	f7f9 fc2c 	bl	80011f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800799a:	2019      	movs	r0, #25
 800799c:	f7f9 fc45 	bl	800122a <HAL_NVIC_EnableIRQ>
	/* I2C1_EV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 3);
 80079a0:	2203      	movs	r2, #3
 80079a2:	2100      	movs	r1, #0
 80079a4:	201f      	movs	r0, #31
 80079a6:	f7f9 fc24 	bl	80011f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80079aa:	201f      	movs	r0, #31
 80079ac:	f7f9 fc3d 	bl	800122a <HAL_NVIC_EnableIRQ>
	/* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 1);
 80079b0:	2201      	movs	r2, #1
 80079b2:	2100      	movs	r1, #0
 80079b4:	201a      	movs	r0, #26
 80079b6:	f7f9 fc1c 	bl	80011f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80079ba:	201a      	movs	r0, #26
 80079bc:	f7f9 fc35 	bl	800122a <HAL_NVIC_EnableIRQ>
}
 80079c0:	bf00      	nop
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80079c8:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <MX_I2C1_Init+0x50>)
 80079ca:	4a13      	ldr	r2, [pc, #76]	; (8007a18 <MX_I2C1_Init+0x54>)
 80079cc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80079ce:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <MX_I2C1_Init+0x50>)
 80079d0:	4a12      	ldr	r2, [pc, #72]	; (8007a1c <MX_I2C1_Init+0x58>)
 80079d2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80079d4:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <MX_I2C1_Init+0x50>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80079da:	4b0e      	ldr	r3, [pc, #56]	; (8007a14 <MX_I2C1_Init+0x50>)
 80079dc:	2200      	movs	r2, #0
 80079de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80079e0:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <MX_I2C1_Init+0x50>)
 80079e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80079e6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80079e8:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <MX_I2C1_Init+0x50>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80079ee:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <MX_I2C1_Init+0x50>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80079f4:	4b07      	ldr	r3, [pc, #28]	; (8007a14 <MX_I2C1_Init+0x50>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80079fa:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <MX_I2C1_Init+0x50>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8007a00:	4804      	ldr	r0, [pc, #16]	; (8007a14 <MX_I2C1_Init+0x50>)
 8007a02:	f7fa fa43 	bl	8001e8c <HAL_I2C_Init>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8007a0c:	f000 fa14 	bl	8007e38 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8007a10:	bf00      	nop
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20000454 	.word	0x20000454
 8007a18:	40005400 	.word	0x40005400
 8007a1c:	00061a80 	.word	0x00061a80

08007a20 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8007a24:	4b0f      	ldr	r3, [pc, #60]	; (8007a64 <MX_RTC_Init+0x44>)
 8007a26:	4a10      	ldr	r2, [pc, #64]	; (8007a68 <MX_RTC_Init+0x48>)
 8007a28:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007a2a:	4b0e      	ldr	r3, [pc, #56]	; (8007a64 <MX_RTC_Init+0x44>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8007a30:	4b0c      	ldr	r3, [pc, #48]	; (8007a64 <MX_RTC_Init+0x44>)
 8007a32:	227f      	movs	r2, #127	; 0x7f
 8007a34:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8007a36:	4b0b      	ldr	r3, [pc, #44]	; (8007a64 <MX_RTC_Init+0x44>)
 8007a38:	22ff      	movs	r2, #255	; 0xff
 8007a3a:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007a3c:	4b09      	ldr	r3, [pc, #36]	; (8007a64 <MX_RTC_Init+0x44>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007a42:	4b08      	ldr	r3, [pc, #32]	; (8007a64 <MX_RTC_Init+0x44>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007a48:	4b06      	ldr	r3, [pc, #24]	; (8007a64 <MX_RTC_Init+0x44>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8007a4e:	4805      	ldr	r0, [pc, #20]	; (8007a64 <MX_RTC_Init+0x44>)
 8007a50:	f7fd fbb0 	bl	80051b4 <HAL_RTC_Init>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <MX_RTC_Init+0x3e>
		Error_Handler();
 8007a5a:	f000 f9ed 	bl	8007e38 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8007a5e:	bf00      	nop
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000584 	.word	0x20000584
 8007a68:	40002800 	.word	0x40002800

08007a6c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8007a70:	4b17      	ldr	r3, [pc, #92]	; (8007ad0 <MX_SPI1_Init+0x64>)
 8007a72:	4a18      	ldr	r2, [pc, #96]	; (8007ad4 <MX_SPI1_Init+0x68>)
 8007a74:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8007a76:	4b16      	ldr	r3, [pc, #88]	; (8007ad0 <MX_SPI1_Init+0x64>)
 8007a78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007a7c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007a7e:	4b14      	ldr	r3, [pc, #80]	; (8007ad0 <MX_SPI1_Init+0x64>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007a84:	4b12      	ldr	r3, [pc, #72]	; (8007ad0 <MX_SPI1_Init+0x64>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007a8a:	4b11      	ldr	r3, [pc, #68]	; (8007ad0 <MX_SPI1_Init+0x64>)
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007a90:	4b0f      	ldr	r3, [pc, #60]	; (8007ad0 <MX_SPI1_Init+0x64>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8007a96:	4b0e      	ldr	r3, [pc, #56]	; (8007ad0 <MX_SPI1_Init+0x64>)
 8007a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a9c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8007a9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ad0 <MX_SPI1_Init+0x64>)
 8007aa0:	2230      	movs	r2, #48	; 0x30
 8007aa2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007aa4:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <MX_SPI1_Init+0x64>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007aaa:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <MX_SPI1_Init+0x64>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ab0:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <MX_SPI1_Init+0x64>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8007ab6:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <MX_SPI1_Init+0x64>)
 8007ab8:	220a      	movs	r2, #10
 8007aba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8007abc:	4804      	ldr	r0, [pc, #16]	; (8007ad0 <MX_SPI1_Init+0x64>)
 8007abe:	f7fd fc5e 	bl	800537e <HAL_SPI_Init>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <MX_SPI1_Init+0x60>
		Error_Handler();
 8007ac8:	f000 f9b6 	bl	8007e38 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8007acc:	bf00      	nop
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	20000610 	.word	0x20000610
 8007ad4:	40013000 	.word	0x40013000

08007ad8 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */
//PRE: 42-1 ; Period: 16000
	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8007adc:	4b0e      	ldr	r3, [pc, #56]	; (8007b18 <MX_TIM10_Init+0x40>)
 8007ade:	4a0f      	ldr	r2, [pc, #60]	; (8007b1c <MX_TIM10_Init+0x44>)
 8007ae0:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 167;
 8007ae2:	4b0d      	ldr	r3, [pc, #52]	; (8007b18 <MX_TIM10_Init+0x40>)
 8007ae4:	22a7      	movs	r2, #167	; 0xa7
 8007ae6:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ae8:	4b0b      	ldr	r3, [pc, #44]	; (8007b18 <MX_TIM10_Init+0x40>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 0xFFFF;
 8007aee:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <MX_TIM10_Init+0x40>)
 8007af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007af4:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007af6:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <MX_TIM10_Init+0x40>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007afc:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <MX_TIM10_Init+0x40>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8007b02:	4805      	ldr	r0, [pc, #20]	; (8007b18 <MX_TIM10_Init+0x40>)
 8007b04:	f7fd fc9f 	bl	8005446 <HAL_TIM_Base_Init>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <MX_TIM10_Init+0x3a>
		Error_Handler();
 8007b0e:	f000 f993 	bl	8007e38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8007b12:	bf00      	nop
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200004a8 	.word	0x200004a8
 8007b1c:	40014400 	.word	0x40014400

08007b20 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */
//PRE: 168-1 ; Period: 5000
	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8007b24:	4b0e      	ldr	r3, [pc, #56]	; (8007b60 <MX_TIM11_Init+0x40>)
 8007b26:	4a0f      	ldr	r2, [pc, #60]	; (8007b64 <MX_TIM11_Init+0x44>)
 8007b28:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 167;
 8007b2a:	4b0d      	ldr	r3, [pc, #52]	; (8007b60 <MX_TIM11_Init+0x40>)
 8007b2c:	22a7      	movs	r2, #167	; 0xa7
 8007b2e:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b30:	4b0b      	ldr	r3, [pc, #44]	; (8007b60 <MX_TIM11_Init+0x40>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 1500;
 8007b36:	4b0a      	ldr	r3, [pc, #40]	; (8007b60 <MX_TIM11_Init+0x40>)
 8007b38:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007b3c:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b3e:	4b08      	ldr	r3, [pc, #32]	; (8007b60 <MX_TIM11_Init+0x40>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b44:	4b06      	ldr	r3, [pc, #24]	; (8007b60 <MX_TIM11_Init+0x40>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8007b4a:	4805      	ldr	r0, [pc, #20]	; (8007b60 <MX_TIM11_Init+0x40>)
 8007b4c:	f7fd fc7b 	bl	8005446 <HAL_TIM_Base_Init>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <MX_TIM11_Init+0x3a>
		Error_Handler();
 8007b56:	f000 f96f 	bl	8007e38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8007b5a:	bf00      	nop
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000540 	.word	0x20000540
 8007b64:	40014800 	.word	0x40014800

08007b68 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8007b6c:	4b11      	ldr	r3, [pc, #68]	; (8007bb4 <MX_USART1_UART_Init+0x4c>)
 8007b6e:	4a12      	ldr	r2, [pc, #72]	; (8007bb8 <MX_USART1_UART_Init+0x50>)
 8007b70:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8007b72:	4b10      	ldr	r3, [pc, #64]	; (8007bb4 <MX_USART1_UART_Init+0x4c>)
 8007b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007b78:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007b7a:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <MX_USART1_UART_Init+0x4c>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8007b80:	4b0c      	ldr	r3, [pc, #48]	; (8007bb4 <MX_USART1_UART_Init+0x4c>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8007b86:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <MX_USART1_UART_Init+0x4c>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8007b8c:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <MX_USART1_UART_Init+0x4c>)
 8007b8e:	220c      	movs	r2, #12
 8007b90:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b92:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <MX_USART1_UART_Init+0x4c>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b98:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <MX_USART1_UART_Init+0x4c>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8007b9e:	4805      	ldr	r0, [pc, #20]	; (8007bb4 <MX_USART1_UART_Init+0x4c>)
 8007ba0:	f7fd fed4 	bl	800594c <HAL_UART_Init>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8007baa:	f000 f945 	bl	8007e38 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8007bae:	bf00      	nop
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000500 	.word	0x20000500
 8007bb8:	40011000 	.word	0x40011000

08007bbc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8007bc0:	4b11      	ldr	r3, [pc, #68]	; (8007c08 <MX_USART2_UART_Init+0x4c>)
 8007bc2:	4a12      	ldr	r2, [pc, #72]	; (8007c0c <MX_USART2_UART_Init+0x50>)
 8007bc4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8007bc6:	4b10      	ldr	r3, [pc, #64]	; (8007c08 <MX_USART2_UART_Init+0x4c>)
 8007bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007bcc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007bce:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <MX_USART2_UART_Init+0x4c>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8007bd4:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <MX_USART2_UART_Init+0x4c>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8007bda:	4b0b      	ldr	r3, [pc, #44]	; (8007c08 <MX_USART2_UART_Init+0x4c>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8007be0:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <MX_USART2_UART_Init+0x4c>)
 8007be2:	220c      	movs	r2, #12
 8007be4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007be6:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <MX_USART2_UART_Init+0x4c>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007bec:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <MX_USART2_UART_Init+0x4c>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8007bf2:	4805      	ldr	r0, [pc, #20]	; (8007c08 <MX_USART2_UART_Init+0x4c>)
 8007bf4:	f7fd feaa 	bl	800594c <HAL_UART_Init>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8007bfe:	f000 f91b 	bl	8007e38 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8007c02:	bf00      	nop
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	20000668 	.word	0x20000668
 8007c0c:	40004400 	.word	0x40004400

08007c10 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8007c10:	b580      	push	{r7, lr}
 8007c12:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8007c14:	4b11      	ldr	r3, [pc, #68]	; (8007c5c <MX_USART3_UART_Init+0x4c>)
 8007c16:	4a12      	ldr	r2, [pc, #72]	; (8007c60 <MX_USART3_UART_Init+0x50>)
 8007c18:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8007c1a:	4b10      	ldr	r3, [pc, #64]	; (8007c5c <MX_USART3_UART_Init+0x4c>)
 8007c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007c20:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007c22:	4b0e      	ldr	r3, [pc, #56]	; (8007c5c <MX_USART3_UART_Init+0x4c>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8007c28:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <MX_USART3_UART_Init+0x4c>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8007c2e:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <MX_USART3_UART_Init+0x4c>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8007c34:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <MX_USART3_UART_Init+0x4c>)
 8007c36:	220c      	movs	r2, #12
 8007c38:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c3a:	4b08      	ldr	r3, [pc, #32]	; (8007c5c <MX_USART3_UART_Init+0x4c>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c40:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <MX_USART3_UART_Init+0x4c>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8007c46:	4805      	ldr	r0, [pc, #20]	; (8007c5c <MX_USART3_UART_Init+0x4c>)
 8007c48:	f7fd fe80 	bl	800594c <HAL_UART_Init>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8007c52:	f000 f8f1 	bl	8007e38 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8007c56:	bf00      	nop
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	200003b4 	.word	0x200003b4
 8007c60:	40004800 	.word	0x40004800

08007c64 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	607b      	str	r3, [r7, #4]
 8007c6e:	4b17      	ldr	r3, [pc, #92]	; (8007ccc <MX_DMA_Init+0x68>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	4a16      	ldr	r2, [pc, #88]	; (8007ccc <MX_DMA_Init+0x68>)
 8007c74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c78:	6313      	str	r3, [r2, #48]	; 0x30
 8007c7a:	4b14      	ldr	r3, [pc, #80]	; (8007ccc <MX_DMA_Init+0x68>)
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c82:	607b      	str	r3, [r7, #4]
 8007c84:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8007c86:	2300      	movs	r3, #0
 8007c88:	603b      	str	r3, [r7, #0]
 8007c8a:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <MX_DMA_Init+0x68>)
 8007c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8e:	4a0f      	ldr	r2, [pc, #60]	; (8007ccc <MX_DMA_Init+0x68>)
 8007c90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c94:	6313      	str	r3, [r2, #48]	; 0x30
 8007c96:	4b0d      	ldr	r3, [pc, #52]	; (8007ccc <MX_DMA_Init+0x68>)
 8007c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	2038      	movs	r0, #56	; 0x38
 8007ca8:	f7f9 faa3 	bl	80011f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007cac:	2038      	movs	r0, #56	; 0x38
 8007cae:	f7f9 fabc 	bl	800122a <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	203b      	movs	r0, #59	; 0x3b
 8007cb8:	f7f9 fa9b 	bl	80011f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8007cbc:	203b      	movs	r0, #59	; 0x3b
 8007cbe:	f7f9 fab4 	bl	800122a <HAL_NVIC_EnableIRQ>

}
 8007cc2:	bf00      	nop
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	40023800 	.word	0x40023800

08007cd0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08c      	sub	sp, #48	; 0x30
 8007cd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007cd6:	f107 031c 	add.w	r3, r7, #28
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	605a      	str	r2, [r3, #4]
 8007ce0:	609a      	str	r2, [r3, #8]
 8007ce2:	60da      	str	r2, [r3, #12]
 8007ce4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	61bb      	str	r3, [r7, #24]
 8007cea:	4b4e      	ldr	r3, [pc, #312]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cee:	4a4d      	ldr	r2, [pc, #308]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007cf0:	f043 0310 	orr.w	r3, r3, #16
 8007cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8007cf6:	4b4b      	ldr	r3, [pc, #300]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfa:	f003 0310 	and.w	r3, r3, #16
 8007cfe:	61bb      	str	r3, [r7, #24]
 8007d00:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8007d02:	2300      	movs	r3, #0
 8007d04:	617b      	str	r3, [r7, #20]
 8007d06:	4b47      	ldr	r3, [pc, #284]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0a:	4a46      	ldr	r2, [pc, #280]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d0c:	f043 0304 	orr.w	r3, r3, #4
 8007d10:	6313      	str	r3, [r2, #48]	; 0x30
 8007d12:	4b44      	ldr	r3, [pc, #272]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d16:	f003 0304 	and.w	r3, r3, #4
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8007d1e:	2300      	movs	r3, #0
 8007d20:	613b      	str	r3, [r7, #16]
 8007d22:	4b40      	ldr	r3, [pc, #256]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	4a3f      	ldr	r2, [pc, #252]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d2e:	4b3d      	ldr	r3, [pc, #244]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d36:	613b      	str	r3, [r7, #16]
 8007d38:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	4b39      	ldr	r3, [pc, #228]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d42:	4a38      	ldr	r2, [pc, #224]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d44:	f043 0301 	orr.w	r3, r3, #1
 8007d48:	6313      	str	r3, [r2, #48]	; 0x30
 8007d4a:	4b36      	ldr	r3, [pc, #216]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8007d56:	2300      	movs	r3, #0
 8007d58:	60bb      	str	r3, [r7, #8]
 8007d5a:	4b32      	ldr	r3, [pc, #200]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5e:	4a31      	ldr	r2, [pc, #196]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d60:	f043 0302 	orr.w	r3, r3, #2
 8007d64:	6313      	str	r3, [r2, #48]	; 0x30
 8007d66:	4b2f      	ldr	r3, [pc, #188]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	60bb      	str	r3, [r7, #8]
 8007d70:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8007d72:	2300      	movs	r3, #0
 8007d74:	607b      	str	r3, [r7, #4]
 8007d76:	4b2b      	ldr	r3, [pc, #172]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7a:	4a2a      	ldr	r2, [pc, #168]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d7c:	f043 0308 	orr.w	r3, r3, #8
 8007d80:	6313      	str	r3, [r2, #48]	; 0x30
 8007d82:	4b28      	ldr	r3, [pc, #160]	; (8007e24 <MX_GPIO_Init+0x154>)
 8007d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d86:	f003 0308 	and.w	r3, r3, #8
 8007d8a:	607b      	str	r3, [r7, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_2_Pin | LED_3_Pin, GPIO_PIN_RESET);
 8007d8e:	2200      	movs	r2, #0
 8007d90:	21c0      	movs	r1, #192	; 0xc0
 8007d92:	4825      	ldr	r0, [pc, #148]	; (8007e28 <MX_GPIO_Init+0x158>)
 8007d94:	f7fa f846 	bl	8001e24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, FLASH_CS_Pin | MPU_CS_Pin, GPIO_PIN_RESET);
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2103      	movs	r1, #3
 8007d9c:	4823      	ldr	r0, [pc, #140]	; (8007e2c <MX_GPIO_Init+0x15c>)
 8007d9e:	f7fa f841 	bl	8001e24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8007da2:	2200      	movs	r2, #0
 8007da4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8007da8:	4821      	ldr	r0, [pc, #132]	; (8007e30 <MX_GPIO_Init+0x160>)
 8007daa:	f7fa f83b 	bl	8001e24 <HAL_GPIO_WritePin>
	SERVO_1_Pin | SERVO_2_Pin | SERVO_3_Pin | SERVO_4_Pin | SERVO_5_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : BTN_1_Pin BTN_0_Pin */
	GPIO_InitStruct.Pin = BTN_1_Pin | BTN_0_Pin;
 8007dae:	2318      	movs	r3, #24
 8007db0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007db2:	2300      	movs	r3, #0
 8007db4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007db6:	2301      	movs	r3, #1
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007dba:	f107 031c 	add.w	r3, r7, #28
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	481c      	ldr	r0, [pc, #112]	; (8007e34 <MX_GPIO_Init+0x164>)
 8007dc2:	f7f9 fe7d 	bl	8001ac0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_2_Pin LED_3_Pin */
	GPIO_InitStruct.Pin = LED_2_Pin | LED_3_Pin;
 8007dc6:	23c0      	movs	r3, #192	; 0xc0
 8007dc8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dd6:	f107 031c 	add.w	r3, r7, #28
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4812      	ldr	r0, [pc, #72]	; (8007e28 <MX_GPIO_Init+0x158>)
 8007dde:	f7f9 fe6f 	bl	8001ac0 <HAL_GPIO_Init>

	/*Configure GPIO pins : FLASH_CS_Pin MPU_CS_Pin */
	GPIO_InitStruct.Pin = FLASH_CS_Pin | MPU_CS_Pin;
 8007de2:	2303      	movs	r3, #3
 8007de4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007de6:	2301      	movs	r3, #1
 8007de8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dee:	2300      	movs	r3, #0
 8007df0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007df2:	f107 031c 	add.w	r3, r7, #28
 8007df6:	4619      	mov	r1, r3
 8007df8:	480c      	ldr	r0, [pc, #48]	; (8007e2c <MX_GPIO_Init+0x15c>)
 8007dfa:	f7f9 fe61 	bl	8001ac0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SERVO_1_Pin SERVO_2_Pin SERVO_3_Pin SERVO_4_Pin
	 SERVO_5_Pin */
	GPIO_InitStruct.Pin = SERVO_1_Pin | SERVO_2_Pin | SERVO_3_Pin | SERVO_4_Pin
 8007dfe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007e02:	61fb      	str	r3, [r7, #28]
			| SERVO_5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e04:	2301      	movs	r3, #1
 8007e06:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e10:	f107 031c 	add.w	r3, r7, #28
 8007e14:	4619      	mov	r1, r3
 8007e16:	4806      	ldr	r0, [pc, #24]	; (8007e30 <MX_GPIO_Init+0x160>)
 8007e18:	f7f9 fe52 	bl	8001ac0 <HAL_GPIO_Init>

}
 8007e1c:	bf00      	nop
 8007e1e:	3730      	adds	r7, #48	; 0x30
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	40023800 	.word	0x40023800
 8007e28:	40020000 	.word	0x40020000
 8007e2c:	40020400 	.word	0x40020400
 8007e30:	40020c00 	.word	0x40020c00
 8007e34:	40021000 	.word	0x40021000

08007e38 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8007e3c:	bf00      	nop
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <mpu_init_std>:
#include "control.h"

uint16_t acc_scale = 1;
uint16_t gyro_scale = 1;

void mpu_init_std(I2C_HandleTypeDef *hi2c) {
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af04      	add	r7, sp, #16
 8007e4e:	6078      	str	r0, [r7, #4]
	print_uart("MPU init");
 8007e50:	481d      	ldr	r0, [pc, #116]	; (8007ec8 <mpu_init_std+0x80>)
 8007e52:	f7fe fe31 	bl	8006ab8 <print_uart>
	/*Scale Setting:
	 * 00 = +250dps, 01= +500 dps, 10 = +1000 dps, 11 = +2000 dps
	 * 0b000xx000
	 * */
	//Set scale gyro 500dps
	gyro_scale = 2000;
 8007e56:	4b1d      	ldr	r3, [pc, #116]	; (8007ecc <mpu_init_std+0x84>)
 8007e58:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007e5c:	801a      	strh	r2, [r3, #0]
	uint8_t da = 0b11 << 3; //0b00010000
 8007e5e:	2318      	movs	r3, #24
 8007e60:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, MPU_ADDR, 27, I2C_MEMADD_SIZE_8BIT, &da, 1,
 8007e62:	23a0      	movs	r3, #160	; 0xa0
 8007e64:	9302      	str	r3, [sp, #8]
 8007e66:	2301      	movs	r3, #1
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	f107 030f 	add.w	r3, r7, #15
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	2301      	movs	r3, #1
 8007e72:	221b      	movs	r2, #27
 8007e74:	21d0      	movs	r1, #208	; 0xd0
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7fa f930 	bl	80020dc <HAL_I2C_Mem_Write>
			HAL_I2C_STATE_TIMEOUT);
	while (hi2c->State != HAL_I2C_STATE_READY)
 8007e7c:	bf00      	nop
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b20      	cmp	r3, #32
 8007e88:	d1f9      	bne.n	8007e7e <mpu_init_std+0x36>
	/*Scale Setting:
	 * ±2g (00), ±4g (01), ±8g (10), ±16g (11)
	 * 0b000xx000
	 * */
	//set scale acc +-4g
	acc_scale = 4000;
 8007e8a:	4b11      	ldr	r3, [pc, #68]	; (8007ed0 <mpu_init_std+0x88>)
 8007e8c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8007e90:	801a      	strh	r2, [r3, #0]
	da = 0b01 << 3;
 8007e92:	2308      	movs	r3, #8
 8007e94:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, MPU_ADDR, 28, I2C_MEMADD_SIZE_8BIT, &da, 1,
 8007e96:	23a0      	movs	r3, #160	; 0xa0
 8007e98:	9302      	str	r3, [sp, #8]
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	f107 030f 	add.w	r3, r7, #15
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	221c      	movs	r2, #28
 8007ea8:	21d0      	movs	r1, #208	; 0xd0
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7fa f916 	bl	80020dc <HAL_I2C_Mem_Write>
			HAL_I2C_STATE_TIMEOUT);
	while (hi2c->State != HAL_I2C_STATE_READY)
 8007eb0:	bf00      	nop
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	d1f9      	bne.n	8007eb2 <mpu_init_std+0x6a>
		;
	//Start Sensor DONT!
	//HAL_I2C_Mem_Write(hi2c, MPU_ADDR, 107, I2C_MEMADD_SIZE_8BIT, 0x00, 1,
	//		HAL_I2C_STATE_TIMEOUT);
	//while (hi2c->State != HAL_I2C_STATE_READY);
}
 8007ebe:	bf00      	nop
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	0800aa78 	.word	0x0800aa78
 8007ecc:	2000000e 	.word	0x2000000e
 8007ed0:	2000000c 	.word	0x2000000c
 8007ed4:	00000000 	.word	0x00000000

08007ed8 <mpu_calibrate>:
	HAL_SPI_Transmit(hspi, sb, 2, 160);
	mpu_cs(SPI_DESELECT);
}

void mpu_calibrate(I2C_HandleTypeDef *hi2c, int8_t *gyro_offset,
		float *rot_start) {
 8007ed8:	b590      	push	{r4, r7, lr}
 8007eda:	b099      	sub	sp, #100	; 0x64
 8007edc:	af04      	add	r7, sp, #16
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
	//Offset des Gyro ermitteln
	//30 Gyrowerte aus allen achsen holen
	int16_t gygy[3] = { 0, 0, 0 };
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007ee8:	2300      	movs	r3, #0
 8007eea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007eec:	2300      	movs	r3, #0
 8007eee:	863b      	strh	r3, [r7, #48]	; 0x30
	int16_t acac[3] = { 0, 0, 0 };
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007ef8:	2300      	movs	r3, #0
 8007efa:	853b      	strh	r3, [r7, #40]	; 0x28
	uint8_t bubu[6];
	uint8_t i;
	for (i = 0; i < 30; i++) {
 8007efc:	2300      	movs	r3, #0
 8007efe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007f02:	e043      	b.n	8007f8c <mpu_calibrate+0xb4>
		HAL_I2C_Mem_Read(hi2c, MPU_ADDR, 67, I2C_MEMADD_SIZE_8BIT, bubu, 6,
 8007f04:	23a0      	movs	r3, #160	; 0xa0
 8007f06:	9302      	str	r3, [sp, #8]
 8007f08:	2306      	movs	r3, #6
 8007f0a:	9301      	str	r3, [sp, #4]
 8007f0c:	f107 031c 	add.w	r3, r7, #28
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	2301      	movs	r3, #1
 8007f14:	2243      	movs	r2, #67	; 0x43
 8007f16:	21d0      	movs	r1, #208	; 0xd0
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f7fa f9d9 	bl	80022d0 <HAL_I2C_Mem_Read>
				160);
		gygy[0] += ((int16_t) bubu[0] << 8) | bubu[1];
 8007f1e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	7f3b      	ldrb	r3, [r7, #28]
 8007f26:	021b      	lsls	r3, r3, #8
 8007f28:	b219      	sxth	r1, r3
 8007f2a:	7f7b      	ldrb	r3, [r7, #29]
 8007f2c:	b21b      	sxth	r3, r3
 8007f2e:	430b      	orrs	r3, r1
 8007f30:	b21b      	sxth	r3, r3
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	4413      	add	r3, r2
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	b21b      	sxth	r3, r3
 8007f3a:	85bb      	strh	r3, [r7, #44]	; 0x2c
		gygy[1] += ((int16_t) bubu[2] << 8) | bubu[3];
 8007f3c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	7fbb      	ldrb	r3, [r7, #30]
 8007f44:	021b      	lsls	r3, r3, #8
 8007f46:	b219      	sxth	r1, r3
 8007f48:	7ffb      	ldrb	r3, [r7, #31]
 8007f4a:	b21b      	sxth	r3, r3
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	b21b      	sxth	r3, r3
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	4413      	add	r3, r2
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	b21b      	sxth	r3, r3
 8007f58:	85fb      	strh	r3, [r7, #46]	; 0x2e
		gygy[2] += ((int16_t) bubu[4] << 8) | bubu[5];
 8007f5a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	b219      	sxth	r1, r3
 8007f68:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007f6c:	b21b      	sxth	r3, r3
 8007f6e:	430b      	orrs	r3, r1
 8007f70:	b21b      	sxth	r3, r3
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	4413      	add	r3, r2
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	b21b      	sxth	r3, r3
 8007f7a:	863b      	strh	r3, [r7, #48]	; 0x30
		HAL_Delay(10);
 8007f7c:	200a      	movs	r0, #10
 8007f7e:	f7f9 f819 	bl	8000fb4 <HAL_Delay>
	for (i = 0; i < 30; i++) {
 8007f82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007f86:	3301      	adds	r3, #1
 8007f88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007f8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007f90:	2b1d      	cmp	r3, #29
 8007f92:	d9b7      	bls.n	8007f04 <mpu_calibrate+0x2c>
	}
	//Offset mitteln
	gyro_offset[0] = gygy[0] / i;
 8007f94:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8007f98:	461a      	mov	r2, r3
 8007f9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007f9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8007fa2:	b25a      	sxtb	r2, r3
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	701a      	strb	r2, [r3, #0]
	gyro_offset[1] = gygy[1] / i;
 8007fa8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8007fac:	461a      	mov	r2, r3
 8007fae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007fb2:	fb92 f2f3 	sdiv	r2, r2, r3
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	b252      	sxtb	r2, r2
 8007fbc:	701a      	strb	r2, [r3, #0]
	gyro_offset[2] = gygy[2] / i;
 8007fbe:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007fc8:	fb92 f2f3 	sdiv	r2, r2, r3
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	3302      	adds	r3, #2
 8007fd0:	b252      	sxtb	r2, r2
 8007fd2:	701a      	strb	r2, [r3, #0]

	//Aktuelle Position aus Acc bestimmen, mittelwert aus 3 Messungen
	for (i = 0; i < 3; i++) {
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007fda:	e043      	b.n	8008064 <mpu_calibrate+0x18c>
		HAL_I2C_Mem_Read(hi2c, MPU_ADDR, 59, I2C_MEMADD_SIZE_8BIT, bubu, 6,
 8007fdc:	23a0      	movs	r3, #160	; 0xa0
 8007fde:	9302      	str	r3, [sp, #8]
 8007fe0:	2306      	movs	r3, #6
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	f107 031c 	add.w	r3, r7, #28
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	2301      	movs	r3, #1
 8007fec:	223b      	movs	r2, #59	; 0x3b
 8007fee:	21d0      	movs	r1, #208	; 0xd0
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f7fa f96d 	bl	80022d0 <HAL_I2C_Mem_Read>
				160);
		acac[0] += ((int16_t) bubu[0] << 8) | bubu[1];
 8007ff6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	7f3b      	ldrb	r3, [r7, #28]
 8007ffe:	021b      	lsls	r3, r3, #8
 8008000:	b219      	sxth	r1, r3
 8008002:	7f7b      	ldrb	r3, [r7, #29]
 8008004:	b21b      	sxth	r3, r3
 8008006:	430b      	orrs	r3, r1
 8008008:	b21b      	sxth	r3, r3
 800800a:	b29b      	uxth	r3, r3
 800800c:	4413      	add	r3, r2
 800800e:	b29b      	uxth	r3, r3
 8008010:	b21b      	sxth	r3, r3
 8008012:	84bb      	strh	r3, [r7, #36]	; 0x24
		acac[1] += ((int16_t) bubu[2] << 8) | bubu[3];
 8008014:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008018:	b29a      	uxth	r2, r3
 800801a:	7fbb      	ldrb	r3, [r7, #30]
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	b219      	sxth	r1, r3
 8008020:	7ffb      	ldrb	r3, [r7, #31]
 8008022:	b21b      	sxth	r3, r3
 8008024:	430b      	orrs	r3, r1
 8008026:	b21b      	sxth	r3, r3
 8008028:	b29b      	uxth	r3, r3
 800802a:	4413      	add	r3, r2
 800802c:	b29b      	uxth	r3, r3
 800802e:	b21b      	sxth	r3, r3
 8008030:	84fb      	strh	r3, [r7, #38]	; 0x26
		acac[2] += ((int16_t) bubu[4] << 8) | bubu[5];
 8008032:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008036:	b29a      	uxth	r2, r3
 8008038:	f897 3020 	ldrb.w	r3, [r7, #32]
 800803c:	021b      	lsls	r3, r3, #8
 800803e:	b219      	sxth	r1, r3
 8008040:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008044:	b21b      	sxth	r3, r3
 8008046:	430b      	orrs	r3, r1
 8008048:	b21b      	sxth	r3, r3
 800804a:	b29b      	uxth	r3, r3
 800804c:	4413      	add	r3, r2
 800804e:	b29b      	uxth	r3, r3
 8008050:	b21b      	sxth	r3, r3
 8008052:	853b      	strh	r3, [r7, #40]	; 0x28
		HAL_Delay(5);
 8008054:	2005      	movs	r0, #5
 8008056:	f7f8 ffad 	bl	8000fb4 <HAL_Delay>
	for (i = 0; i < 3; i++) {
 800805a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800805e:	3301      	adds	r3, #1
 8008060:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008064:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008068:	2b02      	cmp	r3, #2
 800806a:	d9b7      	bls.n	8007fdc <mpu_calibrate+0x104>
	}
	acac[0] = acac[0] / i;
 800806c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008070:	461a      	mov	r2, r3
 8008072:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008076:	fb92 f3f3 	sdiv	r3, r2, r3
 800807a:	b21b      	sxth	r3, r3
 800807c:	84bb      	strh	r3, [r7, #36]	; 0x24
	acac[1] = acac[1] / i;
 800807e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008082:	461a      	mov	r2, r3
 8008084:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008088:	fb92 f3f3 	sdiv	r3, r2, r3
 800808c:	b21b      	sxth	r3, r3
 800808e:	84fb      	strh	r3, [r7, #38]	; 0x26
	acac[2] = acac[2] / i;
 8008090:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008094:	461a      	mov	r2, r3
 8008096:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800809a:	fb92 f3f3 	sdiv	r3, r2, r3
 800809e:	b21b      	sxth	r3, r3
 80080a0:	853b      	strh	r3, [r7, #40]	; 0x28
	float length = sqrtf( // Berechne die laenge des Vektors
			(acac[0] * acac[0]) + (acac[1] * acac[1]) + (acac[2] * acac[2]));
 80080a2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80080a6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80080aa:	fb02 f203 	mul.w	r2, r2, r3
 80080ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80080b2:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 80080b6:	fb01 f303 	mul.w	r3, r1, r3
 80080ba:	441a      	add	r2, r3
 80080bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80080c0:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 80080c4:	fb01 f303 	mul.w	r3, r1, r3
 80080c8:	4413      	add	r3, r2
	float length = sqrtf( // Berechne die laenge des Vektors
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080d2:	eeb0 0a67 	vmov.f32	s0, s15
 80080d6:	f000 ff6b 	bl	8008fb0 <sqrtf>
 80080da:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	float ax, ay, az;
	ax = acac[0] / length;
 80080de:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80080ea:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80080ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080f2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	ay = acac[1] / length;
 80080f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80080fa:	ee07 3a90 	vmov	s15, r3
 80080fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008102:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800810a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	az = acac[2] / length;
 800810e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800811a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800811e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008122:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	rot_start[0] = 360.0 * asin(ay) / (M_PI * 2.0);
 8008126:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008128:	f7f8 f9b2 	bl	8000490 <__aeabi_f2d>
 800812c:	4603      	mov	r3, r0
 800812e:	460c      	mov	r4, r1
 8008130:	ec44 3b10 	vmov	d0, r3, r4
 8008134:	f000 fee4 	bl	8008f00 <asin>
 8008138:	ec51 0b10 	vmov	r0, r1, d0
 800813c:	f04f 0200 	mov.w	r2, #0
 8008140:	4b71      	ldr	r3, [pc, #452]	; (8008308 <mpu_calibrate+0x430>)
 8008142:	f7f8 f9fd 	bl	8000540 <__aeabi_dmul>
 8008146:	4603      	mov	r3, r0
 8008148:	460c      	mov	r4, r1
 800814a:	4618      	mov	r0, r3
 800814c:	4621      	mov	r1, r4
 800814e:	a36c      	add	r3, pc, #432	; (adr r3, 8008300 <mpu_calibrate+0x428>)
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 fb1e 	bl	8000794 <__aeabi_ddiv>
 8008158:	4603      	mov	r3, r0
 800815a:	460c      	mov	r4, r1
 800815c:	4618      	mov	r0, r3
 800815e:	4621      	mov	r1, r4
 8008160:	f7f8 fce6 	bl	8000b30 <__aeabi_d2f>
 8008164:	4602      	mov	r2, r0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	601a      	str	r2, [r3, #0]
	rot_start[1] = 360.0 * asin(-ax) / (M_PI * 2.0);
 800816a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800816e:	eef1 7a67 	vneg.f32	s15, s15
 8008172:	ee17 3a90 	vmov	r3, s15
 8008176:	4618      	mov	r0, r3
 8008178:	f7f8 f98a 	bl	8000490 <__aeabi_f2d>
 800817c:	4603      	mov	r3, r0
 800817e:	460c      	mov	r4, r1
 8008180:	ec44 3b10 	vmov	d0, r3, r4
 8008184:	f000 febc 	bl	8008f00 <asin>
 8008188:	ec51 0b10 	vmov	r0, r1, d0
 800818c:	f04f 0200 	mov.w	r2, #0
 8008190:	4b5d      	ldr	r3, [pc, #372]	; (8008308 <mpu_calibrate+0x430>)
 8008192:	f7f8 f9d5 	bl	8000540 <__aeabi_dmul>
 8008196:	4603      	mov	r3, r0
 8008198:	460c      	mov	r4, r1
 800819a:	4618      	mov	r0, r3
 800819c:	4621      	mov	r1, r4
 800819e:	a358      	add	r3, pc, #352	; (adr r3, 8008300 <mpu_calibrate+0x428>)
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	f7f8 faf6 	bl	8000794 <__aeabi_ddiv>
 80081a8:	4603      	mov	r3, r0
 80081aa:	460c      	mov	r4, r1
 80081ac:	4619      	mov	r1, r3
 80081ae:	4622      	mov	r2, r4
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	1d1c      	adds	r4, r3, #4
 80081b4:	4608      	mov	r0, r1
 80081b6:	4611      	mov	r1, r2
 80081b8:	f7f8 fcba 	bl	8000b30 <__aeabi_d2f>
 80081bc:	4603      	mov	r3, r0
 80081be:	6023      	str	r3, [r4, #0]
	rot_start[2] = 0; //360.0 * asin(az) / (M_PI * 2.0); //Z-Rot ist egal
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3308      	adds	r3, #8
 80081c4:	f04f 0200 	mov.w	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]

	//Quaternionen Kalibrieren
	float alpha = acos(acac[2] / length);
 80081ca:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081d6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80081da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80081de:	ee16 0a90 	vmov	r0, s13
 80081e2:	f7f8 f955 	bl	8000490 <__aeabi_f2d>
 80081e6:	4603      	mov	r3, r0
 80081e8:	460c      	mov	r4, r1
 80081ea:	ec44 3b10 	vmov	d0, r3, r4
 80081ee:	f000 fe2f 	bl	8008e50 <acos>
 80081f2:	ec54 3b10 	vmov	r3, r4, d0
 80081f6:	4618      	mov	r0, r3
 80081f8:	4621      	mov	r1, r4
 80081fa:	f7f8 fc99 	bl	8000b30 <__aeabi_d2f>
 80081fe:	4603      	mov	r3, r0
 8008200:	63bb      	str	r3, [r7, #56]	; 0x38
	float sin_alpha = sin(alpha / 2.0f);
 8008202:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008206:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800820a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800820e:	ee16 0a90 	vmov	r0, s13
 8008212:	f7f8 f93d 	bl	8000490 <__aeabi_f2d>
 8008216:	4603      	mov	r3, r0
 8008218:	460c      	mov	r4, r1
 800821a:	ec44 3b10 	vmov	d0, r3, r4
 800821e:	f000 fdcf 	bl	8008dc0 <sin>
 8008222:	ec54 3b10 	vmov	r3, r4, d0
 8008226:	4618      	mov	r0, r3
 8008228:	4621      	mov	r1, r4
 800822a:	f7f8 fc81 	bl	8000b30 <__aeabi_d2f>
 800822e:	4603      	mov	r3, r0
 8008230:	637b      	str	r3, [r7, #52]	; 0x34
	q_ist.q0 = cos(alpha / 2.0f);
 8008232:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008236:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800823a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800823e:	ee16 0a90 	vmov	r0, s13
 8008242:	f7f8 f925 	bl	8000490 <__aeabi_f2d>
 8008246:	4603      	mov	r3, r0
 8008248:	460c      	mov	r4, r1
 800824a:	ec44 3b10 	vmov	d0, r3, r4
 800824e:	f000 fd73 	bl	8008d38 <cos>
 8008252:	ec54 3b10 	vmov	r3, r4, d0
 8008256:	4618      	mov	r0, r3
 8008258:	4621      	mov	r1, r4
 800825a:	f7f8 fc69 	bl	8000b30 <__aeabi_d2f>
 800825e:	4602      	mov	r2, r0
 8008260:	4b2a      	ldr	r3, [pc, #168]	; (800830c <mpu_calibrate+0x434>)
 8008262:	601a      	str	r2, [r3, #0]
	//Normalen Vektor berechnen zu acc und z-achse (0,0,-1)
	float v_norm[3];
	v_norm[0] = -acac[1] / length;
 8008264:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008268:	425b      	negs	r3, r3
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008272:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800827a:	edc7 7a04 	vstr	s15, [r7, #16]
	v_norm[1] = acac[0] / length;
 800827e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800828a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800828e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008292:	edc7 7a05 	vstr	s15, [r7, #20]
	v_norm[2] = 0;
 8008296:	f04f 0300 	mov.w	r3, #0
 800829a:	61bb      	str	r3, [r7, #24]

	q_ist.q1 = v_norm[0] * sin_alpha;
 800829c:	ed97 7a04 	vldr	s14, [r7, #16]
 80082a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80082a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a8:	4b18      	ldr	r3, [pc, #96]	; (800830c <mpu_calibrate+0x434>)
 80082aa:	edc3 7a01 	vstr	s15, [r3, #4]
	q_ist.q2 = v_norm[1] * sin_alpha;
 80082ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80082b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80082b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ba:	4b14      	ldr	r3, [pc, #80]	; (800830c <mpu_calibrate+0x434>)
 80082bc:	edc3 7a02 	vstr	s15, [r3, #8]
	q_ist.q3 = v_norm[2] * sin_alpha;
 80082c0:	ed97 7a06 	vldr	s14, [r7, #24]
 80082c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80082c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082cc:	4b0f      	ldr	r3, [pc, #60]	; (800830c <mpu_calibrate+0x434>)
 80082ce:	edc3 7a03 	vstr	s15, [r3, #12]

	q_pos.q0 = q_ist.q0;
 80082d2:	4b0e      	ldr	r3, [pc, #56]	; (800830c <mpu_calibrate+0x434>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a0e      	ldr	r2, [pc, #56]	; (8008310 <mpu_calibrate+0x438>)
 80082d8:	6013      	str	r3, [r2, #0]
	q_pos.q1 = q_ist.q1;
 80082da:	4b0c      	ldr	r3, [pc, #48]	; (800830c <mpu_calibrate+0x434>)
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	4a0c      	ldr	r2, [pc, #48]	; (8008310 <mpu_calibrate+0x438>)
 80082e0:	6053      	str	r3, [r2, #4]
	q_pos.q2 = q_ist.q2;
 80082e2:	4b0a      	ldr	r3, [pc, #40]	; (800830c <mpu_calibrate+0x434>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	4a0a      	ldr	r2, [pc, #40]	; (8008310 <mpu_calibrate+0x438>)
 80082e8:	6093      	str	r3, [r2, #8]
	q_pos.q3 = q_ist.q3;
 80082ea:	4b08      	ldr	r3, [pc, #32]	; (800830c <mpu_calibrate+0x434>)
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	4a08      	ldr	r2, [pc, #32]	; (8008310 <mpu_calibrate+0x438>)
 80082f0:	60d3      	str	r3, [r2, #12]

	// */

}
 80082f2:	bf00      	nop
 80082f4:	3754      	adds	r7, #84	; 0x54
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd90      	pop	{r4, r7, pc}
 80082fa:	bf00      	nop
 80082fc:	f3af 8000 	nop.w
 8008300:	54442d18 	.word	0x54442d18
 8008304:	401921fb 	.word	0x401921fb
 8008308:	40768000 	.word	0x40768000
 800830c:	20000354 	.word	0x20000354
 8008310:	20000398 	.word	0x20000398

08008314 <mpu_get_all_dma>:
void mpu_get_gyro_dma(I2C_HandleTypeDef *hi2c) {
	HAL_I2C_Mem_Read_DMA(hi2c, MPU_ADDR, 67, I2C_MEMADD_SIZE_8BIT, buff_gyro,
			6);
}

void mpu_get_all_dma(I2C_HandleTypeDef *hi2c) {
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af02      	add	r7, sp, #8
 800831a:	6078      	str	r0, [r7, #4]
	/*
	 uint8_t ap = 59 | 0x80;
	 HAL_SPI_Transmit(hspi, &ap, 1, 160);
	 HAL_SPI_Receive_DMA(hspi, gruff, 2);
	 //mpu_cs(SPI_DESELECT); // */
	HAL_I2C_Mem_Read_DMA(hi2c, MPU_ADDR, 59, I2C_MEMADD_SIZE_8BIT, gruff, 14);
 800831c:	230e      	movs	r3, #14
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	4b05      	ldr	r3, [pc, #20]	; (8008338 <mpu_get_all_dma+0x24>)
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	2301      	movs	r3, #1
 8008326:	223b      	movs	r2, #59	; 0x3b
 8008328:	21d0      	movs	r1, #208	; 0xd0
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7fa f9f6 	bl	800271c <HAL_I2C_Mem_Read_DMA>
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	200004f0 	.word	0x200004f0

0800833c <quat_multiply>:
 *      Author: Valentin Marx
 */
#include "main.h"
#include "quaternion.h"

Quaternion* quat_multiply(Quaternion *q1, Quaternion *q2, Quaternion *qout) {
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
	Quaternion qtemp; //Zwischenspeicher anlegen, falls q1/q2 = qout
	qtemp.q0 = (q1->q0 * q2->q0) - (q1->q1 * q2->q1) - (q1->q2 * q2->q2)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	ed93 7a00 	vldr	s14, [r3]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	edd3 7a00 	vldr	s15, [r3]
 8008354:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	edd3 6a01 	vldr	s13, [r3, #4]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	edd3 7a01 	vldr	s15, [r3, #4]
 8008364:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008368:	ee37 7a67 	vsub.f32	s14, s14, s15
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	edd3 6a02 	vldr	s13, [r3, #8]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	edd3 7a02 	vldr	s15, [r3, #8]
 8008378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800837c:	ee37 7a67 	vsub.f32	s14, s14, s15
			- (q1->q3 * q2->q3);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	edd3 6a03 	vldr	s13, [r3, #12]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	edd3 7a03 	vldr	s15, [r3, #12]
 800838c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008390:	ee77 7a67 	vsub.f32	s15, s14, s15
	qtemp.q0 = (q1->q0 * q2->q0) - (q1->q1 * q2->q1) - (q1->q2 * q2->q2)
 8008394:	edc7 7a04 	vstr	s15, [r7, #16]
	qtemp.q1 = (q1->q0 * q2->q1) + (q1->q1 * q2->q0) + (q1->q2 * q2->q3)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	ed93 7a00 	vldr	s14, [r3]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80083a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	edd3 7a00 	vldr	s15, [r3]
 80083b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	edd3 6a02 	vldr	s13, [r3, #8]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80083c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083cc:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (q1->q3 * q2->q2);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	edd3 6a03 	vldr	s13, [r3, #12]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80083dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083e0:	ee77 7a67 	vsub.f32	s15, s14, s15
	qtemp.q1 = (q1->q0 * q2->q1) + (q1->q1 * q2->q0) + (q1->q2 * q2->q3)
 80083e4:	edc7 7a05 	vstr	s15, [r7, #20]
	qtemp.q2 = (q1->q0 * q2->q2) + (q1->q2 * q2->q0) + (q1->q3 * q2->q1)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	ed93 7a00 	vldr	s14, [r3]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80083f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	edd3 7a00 	vldr	s15, [r3]
 8008404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008408:	ee37 7a27 	vadd.f32	s14, s14, s15
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	edd3 6a03 	vldr	s13, [r3, #12]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	edd3 7a01 	vldr	s15, [r3, #4]
 8008418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800841c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (q1->q1 * q2->q3);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	edd3 6a01 	vldr	s13, [r3, #4]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	edd3 7a03 	vldr	s15, [r3, #12]
 800842c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008430:	ee77 7a67 	vsub.f32	s15, s14, s15
	qtemp.q2 = (q1->q0 * q2->q2) + (q1->q2 * q2->q0) + (q1->q3 * q2->q1)
 8008434:	edc7 7a06 	vstr	s15, [r7, #24]
	qtemp.q3 = (q1->q0 * q2->q3) + (q1->q3 * q2->q0) + (q1->q1 * q2->q2)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	ed93 7a00 	vldr	s14, [r3]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	edd3 7a03 	vldr	s15, [r3, #12]
 8008444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	edd3 6a03 	vldr	s13, [r3, #12]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	edd3 7a00 	vldr	s15, [r3]
 8008454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	edd3 6a01 	vldr	s13, [r3, #4]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	edd3 7a02 	vldr	s15, [r3, #8]
 8008468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800846c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (q1->q2 * q2->q1);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	edd3 6a02 	vldr	s13, [r3, #8]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	edd3 7a01 	vldr	s15, [r3, #4]
 800847c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008480:	ee77 7a67 	vsub.f32	s15, s14, s15
	qtemp.q3 = (q1->q0 * q2->q3) + (q1->q3 * q2->q0) + (q1->q1 * q2->q2)
 8008484:	edc7 7a07 	vstr	s15, [r7, #28]
	quat_copy(&qtemp, qout);
 8008488:	f107 0310 	add.w	r3, r7, #16
 800848c:	6879      	ldr	r1, [r7, #4]
 800848e:	4618      	mov	r0, r3
 8008490:	f000 f827 	bl	80084e2 <quat_copy>
	return qout;
 8008494:	687b      	ldr	r3, [r7, #4]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3720      	adds	r7, #32
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <quat_qpq>:
	qout->q2 = v->y;
	qout->q3 = v->z;
	return qout;
}

Quaternion* quat_qpq(Quaternion *q, Quaternion *p, Quaternion *qout) {
 800849e:	b580      	push	{r7, lr}
 80084a0:	b088      	sub	sp, #32
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	607a      	str	r2, [r7, #4]
	Quaternion qi;
	quat_copy(q, &qi);
 80084aa:	f107 0310 	add.w	r3, r7, #16
 80084ae:	4619      	mov	r1, r3
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 f816 	bl	80084e2 <quat_copy>
	quat_conj(&qi);
 80084b6:	f107 0310 	add.w	r3, r7, #16
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 f82c 	bl	8008518 <quat_conj>
	quat_multiply(q, p, qout);
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	68b9      	ldr	r1, [r7, #8]
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f7ff ff39 	bl	800833c <quat_multiply>
	quat_multiply(qout, &qi, qout);
 80084ca:	f107 0310 	add.w	r3, r7, #16
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7ff ff32 	bl	800833c <quat_multiply>
	return qout;
 80084d8:	687b      	ldr	r3, [r7, #4]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3720      	adds	r7, #32
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <quat_copy>:
	float l;
	l = 1.0f / quat_length(qt);
	quat_scale(qt, l);
}

void quat_copy(Quaternion *qin, Quaternion *qout) {
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	6039      	str	r1, [r7, #0]
	qout->q0 = qin->q0;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	601a      	str	r2, [r3, #0]
	qout->q1 = qin->q1;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	605a      	str	r2, [r3, #4]
	qout->q2 = qin->q2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	689a      	ldr	r2, [r3, #8]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	609a      	str	r2, [r3, #8]
	qout->q3 = qin->q3;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	60da      	str	r2, [r3, #12]
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <quat_conj>:
void quat_conj(Quaternion *qt) {
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
	qt->q1 *= -1.0f;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	edd3 7a01 	vldr	s15, [r3, #4]
 8008526:	eef1 7a67 	vneg.f32	s15, s15
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	edc3 7a01 	vstr	s15, [r3, #4]
	qt->q2 *= -1.0f;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	edd3 7a02 	vldr	s15, [r3, #8]
 8008536:	eef1 7a67 	vneg.f32	s15, s15
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	edc3 7a02 	vstr	s15, [r3, #8]
	qt->q3 *= -1.0f;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	edd3 7a03 	vldr	s15, [r3, #12]
 8008546:	eef1 7a67 	vneg.f32	s15, s15
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008562:	2300      	movs	r3, #0
 8008564:	607b      	str	r3, [r7, #4]
 8008566:	4b10      	ldr	r3, [pc, #64]	; (80085a8 <HAL_MspInit+0x4c>)
 8008568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856a:	4a0f      	ldr	r2, [pc, #60]	; (80085a8 <HAL_MspInit+0x4c>)
 800856c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008570:	6453      	str	r3, [r2, #68]	; 0x44
 8008572:	4b0d      	ldr	r3, [pc, #52]	; (80085a8 <HAL_MspInit+0x4c>)
 8008574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800857a:	607b      	str	r3, [r7, #4]
 800857c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800857e:	2300      	movs	r3, #0
 8008580:	603b      	str	r3, [r7, #0]
 8008582:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <HAL_MspInit+0x4c>)
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	4a08      	ldr	r2, [pc, #32]	; (80085a8 <HAL_MspInit+0x4c>)
 8008588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800858c:	6413      	str	r3, [r2, #64]	; 0x40
 800858e:	4b06      	ldr	r3, [pc, #24]	; (80085a8 <HAL_MspInit+0x4c>)
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	40023800 	.word	0x40023800

080085ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08a      	sub	sp, #40	; 0x28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085b4:	f107 0314 	add.w	r3, r7, #20
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	605a      	str	r2, [r3, #4]
 80085be:	609a      	str	r2, [r3, #8]
 80085c0:	60da      	str	r2, [r3, #12]
 80085c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a47      	ldr	r2, [pc, #284]	; (80086e8 <HAL_I2C_MspInit+0x13c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	f040 8088 	bne.w	80086e0 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085d0:	2300      	movs	r3, #0
 80085d2:	613b      	str	r3, [r7, #16]
 80085d4:	4b45      	ldr	r3, [pc, #276]	; (80086ec <HAL_I2C_MspInit+0x140>)
 80085d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d8:	4a44      	ldr	r2, [pc, #272]	; (80086ec <HAL_I2C_MspInit+0x140>)
 80085da:	f043 0302 	orr.w	r3, r3, #2
 80085de:	6313      	str	r3, [r2, #48]	; 0x30
 80085e0:	4b42      	ldr	r3, [pc, #264]	; (80086ec <HAL_I2C_MspInit+0x140>)
 80085e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	613b      	str	r3, [r7, #16]
 80085ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80085ec:	23c0      	movs	r3, #192	; 0xc0
 80085ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80085f0:	2312      	movs	r3, #18
 80085f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80085f4:	2301      	movs	r3, #1
 80085f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085f8:	2303      	movs	r3, #3
 80085fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80085fc:	2304      	movs	r3, #4
 80085fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008600:	f107 0314 	add.w	r3, r7, #20
 8008604:	4619      	mov	r1, r3
 8008606:	483a      	ldr	r0, [pc, #232]	; (80086f0 <HAL_I2C_MspInit+0x144>)
 8008608:	f7f9 fa5a 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	4b36      	ldr	r3, [pc, #216]	; (80086ec <HAL_I2C_MspInit+0x140>)
 8008612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008614:	4a35      	ldr	r2, [pc, #212]	; (80086ec <HAL_I2C_MspInit+0x140>)
 8008616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800861a:	6413      	str	r3, [r2, #64]	; 0x40
 800861c:	4b33      	ldr	r3, [pc, #204]	; (80086ec <HAL_I2C_MspInit+0x140>)
 800861e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008624:	60fb      	str	r3, [r7, #12]
 8008626:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8008628:	4b32      	ldr	r3, [pc, #200]	; (80086f4 <HAL_I2C_MspInit+0x148>)
 800862a:	4a33      	ldr	r2, [pc, #204]	; (80086f8 <HAL_I2C_MspInit+0x14c>)
 800862c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800862e:	4b31      	ldr	r3, [pc, #196]	; (80086f4 <HAL_I2C_MspInit+0x148>)
 8008630:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008634:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008636:	4b2f      	ldr	r3, [pc, #188]	; (80086f4 <HAL_I2C_MspInit+0x148>)
 8008638:	2200      	movs	r2, #0
 800863a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800863c:	4b2d      	ldr	r3, [pc, #180]	; (80086f4 <HAL_I2C_MspInit+0x148>)
 800863e:	2200      	movs	r2, #0
 8008640:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008642:	4b2c      	ldr	r3, [pc, #176]	; (80086f4 <HAL_I2C_MspInit+0x148>)
 8008644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008648:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800864a:	4b2a      	ldr	r3, [pc, #168]	; (80086f4 <HAL_I2C_MspInit+0x148>)
 800864c:	2200      	movs	r2, #0
 800864e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008650:	4b28      	ldr	r3, [pc, #160]	; (80086f4 <HAL_I2C_MspInit+0x148>)
 8008652:	2200      	movs	r2, #0
 8008654:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8008656:	4b27      	ldr	r3, [pc, #156]	; (80086f4 <HAL_I2C_MspInit+0x148>)
 8008658:	2200      	movs	r2, #0
 800865a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800865c:	4b25      	ldr	r3, [pc, #148]	; (80086f4 <HAL_I2C_MspInit+0x148>)
 800865e:	2200      	movs	r2, #0
 8008660:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008662:	4b24      	ldr	r3, [pc, #144]	; (80086f4 <HAL_I2C_MspInit+0x148>)
 8008664:	2200      	movs	r2, #0
 8008666:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8008668:	4822      	ldr	r0, [pc, #136]	; (80086f4 <HAL_I2C_MspInit+0x148>)
 800866a:	f7f8 fe07 	bl	800127c <HAL_DMA_Init>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8008674:	f7ff fbe0 	bl	8007e38 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a1e      	ldr	r2, [pc, #120]	; (80086f4 <HAL_I2C_MspInit+0x148>)
 800867c:	639a      	str	r2, [r3, #56]	; 0x38
 800867e:	4a1d      	ldr	r2, [pc, #116]	; (80086f4 <HAL_I2C_MspInit+0x148>)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8008684:	4b1d      	ldr	r3, [pc, #116]	; (80086fc <HAL_I2C_MspInit+0x150>)
 8008686:	4a1e      	ldr	r2, [pc, #120]	; (8008700 <HAL_I2C_MspInit+0x154>)
 8008688:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800868a:	4b1c      	ldr	r3, [pc, #112]	; (80086fc <HAL_I2C_MspInit+0x150>)
 800868c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008690:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008692:	4b1a      	ldr	r3, [pc, #104]	; (80086fc <HAL_I2C_MspInit+0x150>)
 8008694:	2240      	movs	r2, #64	; 0x40
 8008696:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008698:	4b18      	ldr	r3, [pc, #96]	; (80086fc <HAL_I2C_MspInit+0x150>)
 800869a:	2200      	movs	r2, #0
 800869c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800869e:	4b17      	ldr	r3, [pc, #92]	; (80086fc <HAL_I2C_MspInit+0x150>)
 80086a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086a4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80086a6:	4b15      	ldr	r3, [pc, #84]	; (80086fc <HAL_I2C_MspInit+0x150>)
 80086a8:	2200      	movs	r2, #0
 80086aa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80086ac:	4b13      	ldr	r3, [pc, #76]	; (80086fc <HAL_I2C_MspInit+0x150>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80086b2:	4b12      	ldr	r3, [pc, #72]	; (80086fc <HAL_I2C_MspInit+0x150>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80086b8:	4b10      	ldr	r3, [pc, #64]	; (80086fc <HAL_I2C_MspInit+0x150>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80086be:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <HAL_I2C_MspInit+0x150>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80086c4:	480d      	ldr	r0, [pc, #52]	; (80086fc <HAL_I2C_MspInit+0x150>)
 80086c6:	f7f8 fdd9 	bl	800127c <HAL_DMA_Init>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 80086d0:	f7ff fbb2 	bl	8007e38 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a09      	ldr	r2, [pc, #36]	; (80086fc <HAL_I2C_MspInit+0x150>)
 80086d8:	635a      	str	r2, [r3, #52]	; 0x34
 80086da:	4a08      	ldr	r2, [pc, #32]	; (80086fc <HAL_I2C_MspInit+0x150>)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80086e0:	bf00      	nop
 80086e2:	3728      	adds	r7, #40	; 0x28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	40005400 	.word	0x40005400
 80086ec:	40023800 	.word	0x40023800
 80086f0:	40020400 	.word	0x40020400
 80086f4:	200005a8 	.word	0x200005a8
 80086f8:	40026010 	.word	0x40026010
 80086fc:	200003f4 	.word	0x200003f4
 8008700:	400260a0 	.word	0x400260a0

08008704 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a05      	ldr	r2, [pc, #20]	; (8008728 <HAL_RTC_MspInit+0x24>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d102      	bne.n	800871c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008716:	4b05      	ldr	r3, [pc, #20]	; (800872c <HAL_RTC_MspInit+0x28>)
 8008718:	2201      	movs	r2, #1
 800871a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	40002800 	.word	0x40002800
 800872c:	42470e3c 	.word	0x42470e3c

08008730 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08a      	sub	sp, #40	; 0x28
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008738:	f107 0314 	add.w	r3, r7, #20
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	605a      	str	r2, [r3, #4]
 8008742:	609a      	str	r2, [r3, #8]
 8008744:	60da      	str	r2, [r3, #12]
 8008746:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a47      	ldr	r2, [pc, #284]	; (800886c <HAL_SPI_MspInit+0x13c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	f040 8088 	bne.w	8008864 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008754:	2300      	movs	r3, #0
 8008756:	613b      	str	r3, [r7, #16]
 8008758:	4b45      	ldr	r3, [pc, #276]	; (8008870 <HAL_SPI_MspInit+0x140>)
 800875a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800875c:	4a44      	ldr	r2, [pc, #272]	; (8008870 <HAL_SPI_MspInit+0x140>)
 800875e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008762:	6453      	str	r3, [r2, #68]	; 0x44
 8008764:	4b42      	ldr	r3, [pc, #264]	; (8008870 <HAL_SPI_MspInit+0x140>)
 8008766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800876c:	613b      	str	r3, [r7, #16]
 800876e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008770:	2300      	movs	r3, #0
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	4b3e      	ldr	r3, [pc, #248]	; (8008870 <HAL_SPI_MspInit+0x140>)
 8008776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008778:	4a3d      	ldr	r2, [pc, #244]	; (8008870 <HAL_SPI_MspInit+0x140>)
 800877a:	f043 0302 	orr.w	r3, r3, #2
 800877e:	6313      	str	r3, [r2, #48]	; 0x30
 8008780:	4b3b      	ldr	r3, [pc, #236]	; (8008870 <HAL_SPI_MspInit+0x140>)
 8008782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800878c:	2338      	movs	r3, #56	; 0x38
 800878e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008790:	2302      	movs	r3, #2
 8008792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008794:	2300      	movs	r3, #0
 8008796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008798:	2303      	movs	r3, #3
 800879a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800879c:	2305      	movs	r3, #5
 800879e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087a0:	f107 0314 	add.w	r3, r7, #20
 80087a4:	4619      	mov	r1, r3
 80087a6:	4833      	ldr	r0, [pc, #204]	; (8008874 <HAL_SPI_MspInit+0x144>)
 80087a8:	f7f9 f98a 	bl	8001ac0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80087ac:	4b32      	ldr	r3, [pc, #200]	; (8008878 <HAL_SPI_MspInit+0x148>)
 80087ae:	4a33      	ldr	r2, [pc, #204]	; (800887c <HAL_SPI_MspInit+0x14c>)
 80087b0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80087b2:	4b31      	ldr	r3, [pc, #196]	; (8008878 <HAL_SPI_MspInit+0x148>)
 80087b4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80087b8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80087ba:	4b2f      	ldr	r3, [pc, #188]	; (8008878 <HAL_SPI_MspInit+0x148>)
 80087bc:	2200      	movs	r2, #0
 80087be:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80087c0:	4b2d      	ldr	r3, [pc, #180]	; (8008878 <HAL_SPI_MspInit+0x148>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80087c6:	4b2c      	ldr	r3, [pc, #176]	; (8008878 <HAL_SPI_MspInit+0x148>)
 80087c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087cc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80087ce:	4b2a      	ldr	r3, [pc, #168]	; (8008878 <HAL_SPI_MspInit+0x148>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80087d4:	4b28      	ldr	r3, [pc, #160]	; (8008878 <HAL_SPI_MspInit+0x148>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80087da:	4b27      	ldr	r3, [pc, #156]	; (8008878 <HAL_SPI_MspInit+0x148>)
 80087dc:	2200      	movs	r2, #0
 80087de:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80087e0:	4b25      	ldr	r3, [pc, #148]	; (8008878 <HAL_SPI_MspInit+0x148>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80087e6:	4b24      	ldr	r3, [pc, #144]	; (8008878 <HAL_SPI_MspInit+0x148>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80087ec:	4822      	ldr	r0, [pc, #136]	; (8008878 <HAL_SPI_MspInit+0x148>)
 80087ee:	f7f8 fd45 	bl	800127c <HAL_DMA_Init>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80087f8:	f7ff fb1e 	bl	8007e38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a1e      	ldr	r2, [pc, #120]	; (8008878 <HAL_SPI_MspInit+0x148>)
 8008800:	64da      	str	r2, [r3, #76]	; 0x4c
 8008802:	4a1d      	ldr	r2, [pc, #116]	; (8008878 <HAL_SPI_MspInit+0x148>)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8008808:	4b1d      	ldr	r3, [pc, #116]	; (8008880 <HAL_SPI_MspInit+0x150>)
 800880a:	4a1e      	ldr	r2, [pc, #120]	; (8008884 <HAL_SPI_MspInit+0x154>)
 800880c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800880e:	4b1c      	ldr	r3, [pc, #112]	; (8008880 <HAL_SPI_MspInit+0x150>)
 8008810:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8008814:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008816:	4b1a      	ldr	r3, [pc, #104]	; (8008880 <HAL_SPI_MspInit+0x150>)
 8008818:	2240      	movs	r2, #64	; 0x40
 800881a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800881c:	4b18      	ldr	r3, [pc, #96]	; (8008880 <HAL_SPI_MspInit+0x150>)
 800881e:	2200      	movs	r2, #0
 8008820:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008822:	4b17      	ldr	r3, [pc, #92]	; (8008880 <HAL_SPI_MspInit+0x150>)
 8008824:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008828:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800882a:	4b15      	ldr	r3, [pc, #84]	; (8008880 <HAL_SPI_MspInit+0x150>)
 800882c:	2200      	movs	r2, #0
 800882e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008830:	4b13      	ldr	r3, [pc, #76]	; (8008880 <HAL_SPI_MspInit+0x150>)
 8008832:	2200      	movs	r2, #0
 8008834:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8008836:	4b12      	ldr	r3, [pc, #72]	; (8008880 <HAL_SPI_MspInit+0x150>)
 8008838:	2200      	movs	r2, #0
 800883a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800883c:	4b10      	ldr	r3, [pc, #64]	; (8008880 <HAL_SPI_MspInit+0x150>)
 800883e:	2200      	movs	r2, #0
 8008840:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008842:	4b0f      	ldr	r3, [pc, #60]	; (8008880 <HAL_SPI_MspInit+0x150>)
 8008844:	2200      	movs	r2, #0
 8008846:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8008848:	480d      	ldr	r0, [pc, #52]	; (8008880 <HAL_SPI_MspInit+0x150>)
 800884a:	f7f8 fd17 	bl	800127c <HAL_DMA_Init>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8008854:	f7ff faf0 	bl	8007e38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a09      	ldr	r2, [pc, #36]	; (8008880 <HAL_SPI_MspInit+0x150>)
 800885c:	649a      	str	r2, [r3, #72]	; 0x48
 800885e:	4a08      	ldr	r2, [pc, #32]	; (8008880 <HAL_SPI_MspInit+0x150>)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008864:	bf00      	nop
 8008866:	3728      	adds	r7, #40	; 0x28
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	40013000 	.word	0x40013000
 8008870:	40023800 	.word	0x40023800
 8008874:	40020400 	.word	0x40020400
 8008878:	200006a8 	.word	0x200006a8
 800887c:	40026410 	.word	0x40026410
 8008880:	20000708 	.word	0x20000708
 8008884:	40026458 	.word	0x40026458

08008888 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a15      	ldr	r2, [pc, #84]	; (80088ec <HAL_TIM_Base_MspInit+0x64>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d10e      	bne.n	80088b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800889a:	2300      	movs	r3, #0
 800889c:	60fb      	str	r3, [r7, #12]
 800889e:	4b14      	ldr	r3, [pc, #80]	; (80088f0 <HAL_TIM_Base_MspInit+0x68>)
 80088a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a2:	4a13      	ldr	r2, [pc, #76]	; (80088f0 <HAL_TIM_Base_MspInit+0x68>)
 80088a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088a8:	6453      	str	r3, [r2, #68]	; 0x44
 80088aa:	4b11      	ldr	r3, [pc, #68]	; (80088f0 <HAL_TIM_Base_MspInit+0x68>)
 80088ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80088b6:	e012      	b.n	80088de <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a0d      	ldr	r2, [pc, #52]	; (80088f4 <HAL_TIM_Base_MspInit+0x6c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d10d      	bne.n	80088de <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80088c2:	2300      	movs	r3, #0
 80088c4:	60bb      	str	r3, [r7, #8]
 80088c6:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <HAL_TIM_Base_MspInit+0x68>)
 80088c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ca:	4a09      	ldr	r2, [pc, #36]	; (80088f0 <HAL_TIM_Base_MspInit+0x68>)
 80088cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088d0:	6453      	str	r3, [r2, #68]	; 0x44
 80088d2:	4b07      	ldr	r3, [pc, #28]	; (80088f0 <HAL_TIM_Base_MspInit+0x68>)
 80088d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088da:	60bb      	str	r3, [r7, #8]
 80088dc:	68bb      	ldr	r3, [r7, #8]
}
 80088de:	bf00      	nop
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	40014400 	.word	0x40014400
 80088f0:	40023800 	.word	0x40023800
 80088f4:	40014800 	.word	0x40014800

080088f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08e      	sub	sp, #56	; 0x38
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008904:	2200      	movs	r2, #0
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	605a      	str	r2, [r3, #4]
 800890a:	609a      	str	r2, [r3, #8]
 800890c:	60da      	str	r2, [r3, #12]
 800890e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a4c      	ldr	r2, [pc, #304]	; (8008a48 <HAL_UART_MspInit+0x150>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d12d      	bne.n	8008976 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800891a:	2300      	movs	r3, #0
 800891c:	623b      	str	r3, [r7, #32]
 800891e:	4b4b      	ldr	r3, [pc, #300]	; (8008a4c <HAL_UART_MspInit+0x154>)
 8008920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008922:	4a4a      	ldr	r2, [pc, #296]	; (8008a4c <HAL_UART_MspInit+0x154>)
 8008924:	f043 0310 	orr.w	r3, r3, #16
 8008928:	6453      	str	r3, [r2, #68]	; 0x44
 800892a:	4b48      	ldr	r3, [pc, #288]	; (8008a4c <HAL_UART_MspInit+0x154>)
 800892c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892e:	f003 0310 	and.w	r3, r3, #16
 8008932:	623b      	str	r3, [r7, #32]
 8008934:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008936:	2300      	movs	r3, #0
 8008938:	61fb      	str	r3, [r7, #28]
 800893a:	4b44      	ldr	r3, [pc, #272]	; (8008a4c <HAL_UART_MspInit+0x154>)
 800893c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893e:	4a43      	ldr	r2, [pc, #268]	; (8008a4c <HAL_UART_MspInit+0x154>)
 8008940:	f043 0301 	orr.w	r3, r3, #1
 8008944:	6313      	str	r3, [r2, #48]	; 0x30
 8008946:	4b41      	ldr	r3, [pc, #260]	; (8008a4c <HAL_UART_MspInit+0x154>)
 8008948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	61fb      	str	r3, [r7, #28]
 8008950:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008952:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008958:	2302      	movs	r3, #2
 800895a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800895c:	2301      	movs	r3, #1
 800895e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008960:	2303      	movs	r3, #3
 8008962:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008964:	2307      	movs	r3, #7
 8008966:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800896c:	4619      	mov	r1, r3
 800896e:	4838      	ldr	r0, [pc, #224]	; (8008a50 <HAL_UART_MspInit+0x158>)
 8008970:	f7f9 f8a6 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008974:	e063      	b.n	8008a3e <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a36      	ldr	r2, [pc, #216]	; (8008a54 <HAL_UART_MspInit+0x15c>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d12c      	bne.n	80089da <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008980:	2300      	movs	r3, #0
 8008982:	61bb      	str	r3, [r7, #24]
 8008984:	4b31      	ldr	r3, [pc, #196]	; (8008a4c <HAL_UART_MspInit+0x154>)
 8008986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008988:	4a30      	ldr	r2, [pc, #192]	; (8008a4c <HAL_UART_MspInit+0x154>)
 800898a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800898e:	6413      	str	r3, [r2, #64]	; 0x40
 8008990:	4b2e      	ldr	r3, [pc, #184]	; (8008a4c <HAL_UART_MspInit+0x154>)
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008998:	61bb      	str	r3, [r7, #24]
 800899a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800899c:	2300      	movs	r3, #0
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	4b2a      	ldr	r3, [pc, #168]	; (8008a4c <HAL_UART_MspInit+0x154>)
 80089a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a4:	4a29      	ldr	r2, [pc, #164]	; (8008a4c <HAL_UART_MspInit+0x154>)
 80089a6:	f043 0301 	orr.w	r3, r3, #1
 80089aa:	6313      	str	r3, [r2, #48]	; 0x30
 80089ac:	4b27      	ldr	r3, [pc, #156]	; (8008a4c <HAL_UART_MspInit+0x154>)
 80089ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b0:	f003 0301 	and.w	r3, r3, #1
 80089b4:	617b      	str	r3, [r7, #20]
 80089b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80089b8:	230c      	movs	r3, #12
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089bc:	2302      	movs	r3, #2
 80089be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80089c0:	2301      	movs	r3, #1
 80089c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089c4:	2303      	movs	r3, #3
 80089c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80089c8:	2307      	movs	r3, #7
 80089ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089d0:	4619      	mov	r1, r3
 80089d2:	481f      	ldr	r0, [pc, #124]	; (8008a50 <HAL_UART_MspInit+0x158>)
 80089d4:	f7f9 f874 	bl	8001ac0 <HAL_GPIO_Init>
}
 80089d8:	e031      	b.n	8008a3e <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a1e      	ldr	r2, [pc, #120]	; (8008a58 <HAL_UART_MspInit+0x160>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d12c      	bne.n	8008a3e <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 80089e4:	2300      	movs	r3, #0
 80089e6:	613b      	str	r3, [r7, #16]
 80089e8:	4b18      	ldr	r3, [pc, #96]	; (8008a4c <HAL_UART_MspInit+0x154>)
 80089ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ec:	4a17      	ldr	r2, [pc, #92]	; (8008a4c <HAL_UART_MspInit+0x154>)
 80089ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089f2:	6413      	str	r3, [r2, #64]	; 0x40
 80089f4:	4b15      	ldr	r3, [pc, #84]	; (8008a4c <HAL_UART_MspInit+0x154>)
 80089f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089fc:	613b      	str	r3, [r7, #16]
 80089fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	4b11      	ldr	r3, [pc, #68]	; (8008a4c <HAL_UART_MspInit+0x154>)
 8008a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a08:	4a10      	ldr	r2, [pc, #64]	; (8008a4c <HAL_UART_MspInit+0x154>)
 8008a0a:	f043 0302 	orr.w	r3, r3, #2
 8008a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8008a10:	4b0e      	ldr	r3, [pc, #56]	; (8008a4c <HAL_UART_MspInit+0x154>)
 8008a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008a1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a22:	2302      	movs	r3, #2
 8008a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a26:	2301      	movs	r3, #1
 8008a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008a2e:	2307      	movs	r3, #7
 8008a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a36:	4619      	mov	r1, r3
 8008a38:	4808      	ldr	r0, [pc, #32]	; (8008a5c <HAL_UART_MspInit+0x164>)
 8008a3a:	f7f9 f841 	bl	8001ac0 <HAL_GPIO_Init>
}
 8008a3e:	bf00      	nop
 8008a40:	3738      	adds	r7, #56	; 0x38
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	40011000 	.word	0x40011000
 8008a4c:	40023800 	.word	0x40023800
 8008a50:	40020000 	.word	0x40020000
 8008a54:	40004400 	.word	0x40004400
 8008a58:	40004800 	.word	0x40004800
 8008a5c:	40020400 	.word	0x40020400

08008a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008a60:	b480      	push	{r7}
 8008a62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008a64:	bf00      	nop
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008a72:	e7fe      	b.n	8008a72 <HardFault_Handler+0x4>

08008a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a74:	b480      	push	{r7}
 8008a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a78:	e7fe      	b.n	8008a78 <MemManage_Handler+0x4>

08008a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a7e:	e7fe      	b.n	8008a7e <BusFault_Handler+0x4>

08008a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a80:	b480      	push	{r7}
 8008a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008a84:	e7fe      	b.n	8008a84 <UsageFault_Handler+0x4>

08008a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008a86:	b480      	push	{r7}
 8008a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008a8a:	bf00      	nop
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a98:	bf00      	nop
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008aa6:	bf00      	nop
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ab4:	f7f8 fa5e 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ab8:	bf00      	nop
 8008aba:	bd80      	pop	{r7, pc}

08008abc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8008ac0:	4802      	ldr	r0, [pc, #8]	; (8008acc <DMA1_Stream0_IRQHandler+0x10>)
 8008ac2:	f7f8 fd7b 	bl	80015bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008ac6:	bf00      	nop
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	200005a8 	.word	0x200005a8

08008ad0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8008ad4:	4802      	ldr	r0, [pc, #8]	; (8008ae0 <DMA1_Stream6_IRQHandler+0x10>)
 8008ad6:	f7f8 fd71 	bl	80015bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8008ada:	bf00      	nop
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	200003f4 	.word	0x200003f4

08008ae4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8008ae8:	4802      	ldr	r0, [pc, #8]	; (8008af4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8008aea:	f7fc fd4a 	bl	8005582 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8008aee:	bf00      	nop
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	200004a8 	.word	0x200004a8

08008af8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8008afc:	4802      	ldr	r0, [pc, #8]	; (8008b08 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8008afe:	f7fc fd40 	bl	8005582 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8008b02:	bf00      	nop
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20000540 	.word	0x20000540

08008b0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8008b10:	4802      	ldr	r0, [pc, #8]	; (8008b1c <I2C1_EV_IRQHandler+0x10>)
 8008b12:	f7f9 ff4f 	bl	80029b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8008b16:	bf00      	nop
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000454 	.word	0x20000454

08008b20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8008b24:	4802      	ldr	r0, [pc, #8]	; (8008b30 <DMA2_Stream0_IRQHandler+0x10>)
 8008b26:	f7f8 fd49 	bl	80015bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008b2a:	bf00      	nop
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	200006a8 	.word	0x200006a8

08008b34 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8008b38:	4802      	ldr	r0, [pc, #8]	; (8008b44 <DMA2_Stream3_IRQHandler+0x10>)
 8008b3a:	f7f8 fd3f 	bl	80015bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8008b3e:	bf00      	nop
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	20000708 	.word	0x20000708

08008b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008b4c:	4b16      	ldr	r3, [pc, #88]	; (8008ba8 <SystemInit+0x60>)
 8008b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b52:	4a15      	ldr	r2, [pc, #84]	; (8008ba8 <SystemInit+0x60>)
 8008b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008b5c:	4b13      	ldr	r3, [pc, #76]	; (8008bac <SystemInit+0x64>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a12      	ldr	r2, [pc, #72]	; (8008bac <SystemInit+0x64>)
 8008b62:	f043 0301 	orr.w	r3, r3, #1
 8008b66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008b68:	4b10      	ldr	r3, [pc, #64]	; (8008bac <SystemInit+0x64>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008b6e:	4b0f      	ldr	r3, [pc, #60]	; (8008bac <SystemInit+0x64>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a0e      	ldr	r2, [pc, #56]	; (8008bac <SystemInit+0x64>)
 8008b74:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008b7e:	4b0b      	ldr	r3, [pc, #44]	; (8008bac <SystemInit+0x64>)
 8008b80:	4a0b      	ldr	r2, [pc, #44]	; (8008bb0 <SystemInit+0x68>)
 8008b82:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008b84:	4b09      	ldr	r3, [pc, #36]	; (8008bac <SystemInit+0x64>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a08      	ldr	r2, [pc, #32]	; (8008bac <SystemInit+0x64>)
 8008b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008b90:	4b06      	ldr	r3, [pc, #24]	; (8008bac <SystemInit+0x64>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008b96:	4b04      	ldr	r3, [pc, #16]	; (8008ba8 <SystemInit+0x60>)
 8008b98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008b9c:	609a      	str	r2, [r3, #8]
#endif
}
 8008b9e:	bf00      	nop
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	e000ed00 	.word	0xe000ed00
 8008bac:	40023800 	.word	0x40023800
 8008bb0:	24003010 	.word	0x24003010

08008bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008bec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008bb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008bba:	e003      	b.n	8008bc4 <LoopCopyDataInit>

08008bbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008bbc:	4b0c      	ldr	r3, [pc, #48]	; (8008bf0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008bbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008bc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008bc2:	3104      	adds	r1, #4

08008bc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008bc4:	480b      	ldr	r0, [pc, #44]	; (8008bf4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008bc6:	4b0c      	ldr	r3, [pc, #48]	; (8008bf8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008bc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008bca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008bcc:	d3f6      	bcc.n	8008bbc <CopyDataInit>
  ldr  r2, =_sbss
 8008bce:	4a0b      	ldr	r2, [pc, #44]	; (8008bfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008bd0:	e002      	b.n	8008bd8 <LoopFillZerobss>

08008bd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008bd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008bd4:	f842 3b04 	str.w	r3, [r2], #4

08008bd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008bd8:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008bda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008bdc:	d3f9      	bcc.n	8008bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008bde:	f7ff ffb3 	bl	8008b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008be2:	f000 f817 	bl	8008c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008be6:	f7fe fc8d 	bl	8007504 <main>
  bx  lr    
 8008bea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008bec:	2001ffff 	.word	0x2001ffff
  ldr  r3, =_sidata
 8008bf0:	0800aec8 	.word	0x0800aec8
  ldr  r0, =_sdata
 8008bf4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008bf8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8008bfc:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8008c00:	20000768 	.word	0x20000768

08008c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008c04:	e7fe      	b.n	8008c04 <ADC_IRQHandler>
	...

08008c08 <__errno>:
 8008c08:	4b01      	ldr	r3, [pc, #4]	; (8008c10 <__errno+0x8>)
 8008c0a:	6818      	ldr	r0, [r3, #0]
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	20000014 	.word	0x20000014

08008c14 <__libc_init_array>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	4e0d      	ldr	r6, [pc, #52]	; (8008c4c <__libc_init_array+0x38>)
 8008c18:	4c0d      	ldr	r4, [pc, #52]	; (8008c50 <__libc_init_array+0x3c>)
 8008c1a:	1ba4      	subs	r4, r4, r6
 8008c1c:	10a4      	asrs	r4, r4, #2
 8008c1e:	2500      	movs	r5, #0
 8008c20:	42a5      	cmp	r5, r4
 8008c22:	d109      	bne.n	8008c38 <__libc_init_array+0x24>
 8008c24:	4e0b      	ldr	r6, [pc, #44]	; (8008c54 <__libc_init_array+0x40>)
 8008c26:	4c0c      	ldr	r4, [pc, #48]	; (8008c58 <__libc_init_array+0x44>)
 8008c28:	f001 ff08 	bl	800aa3c <_init>
 8008c2c:	1ba4      	subs	r4, r4, r6
 8008c2e:	10a4      	asrs	r4, r4, #2
 8008c30:	2500      	movs	r5, #0
 8008c32:	42a5      	cmp	r5, r4
 8008c34:	d105      	bne.n	8008c42 <__libc_init_array+0x2e>
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c3c:	4798      	blx	r3
 8008c3e:	3501      	adds	r5, #1
 8008c40:	e7ee      	b.n	8008c20 <__libc_init_array+0xc>
 8008c42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c46:	4798      	blx	r3
 8008c48:	3501      	adds	r5, #1
 8008c4a:	e7f2      	b.n	8008c32 <__libc_init_array+0x1e>
 8008c4c:	0800aec0 	.word	0x0800aec0
 8008c50:	0800aec0 	.word	0x0800aec0
 8008c54:	0800aec0 	.word	0x0800aec0
 8008c58:	0800aec4 	.word	0x0800aec4

08008c5c <__itoa>:
 8008c5c:	1e93      	subs	r3, r2, #2
 8008c5e:	2b22      	cmp	r3, #34	; 0x22
 8008c60:	b510      	push	{r4, lr}
 8008c62:	460c      	mov	r4, r1
 8008c64:	d904      	bls.n	8008c70 <__itoa+0x14>
 8008c66:	2300      	movs	r3, #0
 8008c68:	700b      	strb	r3, [r1, #0]
 8008c6a:	461c      	mov	r4, r3
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	bd10      	pop	{r4, pc}
 8008c70:	2a0a      	cmp	r2, #10
 8008c72:	d109      	bne.n	8008c88 <__itoa+0x2c>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	da07      	bge.n	8008c88 <__itoa+0x2c>
 8008c78:	232d      	movs	r3, #45	; 0x2d
 8008c7a:	700b      	strb	r3, [r1, #0]
 8008c7c:	4240      	negs	r0, r0
 8008c7e:	2101      	movs	r1, #1
 8008c80:	4421      	add	r1, r4
 8008c82:	f000 f819 	bl	8008cb8 <__utoa>
 8008c86:	e7f1      	b.n	8008c6c <__itoa+0x10>
 8008c88:	2100      	movs	r1, #0
 8008c8a:	e7f9      	b.n	8008c80 <__itoa+0x24>

08008c8c <itoa>:
 8008c8c:	f7ff bfe6 	b.w	8008c5c <__itoa>

08008c90 <memcpy>:
 8008c90:	b510      	push	{r4, lr}
 8008c92:	1e43      	subs	r3, r0, #1
 8008c94:	440a      	add	r2, r1
 8008c96:	4291      	cmp	r1, r2
 8008c98:	d100      	bne.n	8008c9c <memcpy+0xc>
 8008c9a:	bd10      	pop	{r4, pc}
 8008c9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ca0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ca4:	e7f7      	b.n	8008c96 <memcpy+0x6>

08008ca6 <memset>:
 8008ca6:	4402      	add	r2, r0
 8008ca8:	4603      	mov	r3, r0
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d100      	bne.n	8008cb0 <memset+0xa>
 8008cae:	4770      	bx	lr
 8008cb0:	f803 1b01 	strb.w	r1, [r3], #1
 8008cb4:	e7f9      	b.n	8008caa <memset+0x4>
	...

08008cb8 <__utoa>:
 8008cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cba:	4b1d      	ldr	r3, [pc, #116]	; (8008d30 <__utoa+0x78>)
 8008cbc:	b08b      	sub	sp, #44	; 0x2c
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	460c      	mov	r4, r1
 8008cc2:	466e      	mov	r6, sp
 8008cc4:	f103 0c20 	add.w	ip, r3, #32
 8008cc8:	6818      	ldr	r0, [r3, #0]
 8008cca:	6859      	ldr	r1, [r3, #4]
 8008ccc:	4637      	mov	r7, r6
 8008cce:	c703      	stmia	r7!, {r0, r1}
 8008cd0:	3308      	adds	r3, #8
 8008cd2:	4563      	cmp	r3, ip
 8008cd4:	463e      	mov	r6, r7
 8008cd6:	d1f7      	bne.n	8008cc8 <__utoa+0x10>
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	791b      	ldrb	r3, [r3, #4]
 8008cdc:	713b      	strb	r3, [r7, #4]
 8008cde:	1e93      	subs	r3, r2, #2
 8008ce0:	2b22      	cmp	r3, #34	; 0x22
 8008ce2:	6038      	str	r0, [r7, #0]
 8008ce4:	f04f 0300 	mov.w	r3, #0
 8008ce8:	d904      	bls.n	8008cf4 <__utoa+0x3c>
 8008cea:	7023      	strb	r3, [r4, #0]
 8008cec:	461c      	mov	r4, r3
 8008cee:	4620      	mov	r0, r4
 8008cf0:	b00b      	add	sp, #44	; 0x2c
 8008cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf4:	1e66      	subs	r6, r4, #1
 8008cf6:	fbb5 f0f2 	udiv	r0, r5, r2
 8008cfa:	af0a      	add	r7, sp, #40	; 0x28
 8008cfc:	fb02 5510 	mls	r5, r2, r0, r5
 8008d00:	443d      	add	r5, r7
 8008d02:	1c59      	adds	r1, r3, #1
 8008d04:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8008d08:	f806 5f01 	strb.w	r5, [r6, #1]!
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	b968      	cbnz	r0, 8008d2c <__utoa+0x74>
 8008d10:	5460      	strb	r0, [r4, r1]
 8008d12:	4423      	add	r3, r4
 8008d14:	4622      	mov	r2, r4
 8008d16:	1b19      	subs	r1, r3, r4
 8008d18:	1b10      	subs	r0, r2, r4
 8008d1a:	4281      	cmp	r1, r0
 8008d1c:	dde7      	ble.n	8008cee <__utoa+0x36>
 8008d1e:	7811      	ldrb	r1, [r2, #0]
 8008d20:	7818      	ldrb	r0, [r3, #0]
 8008d22:	f802 0b01 	strb.w	r0, [r2], #1
 8008d26:	f803 1901 	strb.w	r1, [r3], #-1
 8008d2a:	e7f4      	b.n	8008d16 <__utoa+0x5e>
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	e7e2      	b.n	8008cf6 <__utoa+0x3e>
 8008d30:	0800aca4 	.word	0x0800aca4
 8008d34:	00000000 	.word	0x00000000

08008d38 <cos>:
 8008d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d3a:	ec51 0b10 	vmov	r0, r1, d0
 8008d3e:	4a1e      	ldr	r2, [pc, #120]	; (8008db8 <cos+0x80>)
 8008d40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d44:	4293      	cmp	r3, r2
 8008d46:	dc06      	bgt.n	8008d56 <cos+0x1e>
 8008d48:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8008db0 <cos+0x78>
 8008d4c:	f001 f894 	bl	8009e78 <__kernel_cos>
 8008d50:	ec51 0b10 	vmov	r0, r1, d0
 8008d54:	e007      	b.n	8008d66 <cos+0x2e>
 8008d56:	4a19      	ldr	r2, [pc, #100]	; (8008dbc <cos+0x84>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	dd09      	ble.n	8008d70 <cos+0x38>
 8008d5c:	ee10 2a10 	vmov	r2, s0
 8008d60:	460b      	mov	r3, r1
 8008d62:	f7f7 fa35 	bl	80001d0 <__aeabi_dsub>
 8008d66:	ec41 0b10 	vmov	d0, r0, r1
 8008d6a:	b005      	add	sp, #20
 8008d6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d70:	4668      	mov	r0, sp
 8008d72:	f000 fdd9 	bl	8009928 <__ieee754_rem_pio2>
 8008d76:	f000 0003 	and.w	r0, r0, #3
 8008d7a:	2801      	cmp	r0, #1
 8008d7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008d80:	ed9d 0b00 	vldr	d0, [sp]
 8008d84:	d007      	beq.n	8008d96 <cos+0x5e>
 8008d86:	2802      	cmp	r0, #2
 8008d88:	d00e      	beq.n	8008da8 <cos+0x70>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d0de      	beq.n	8008d4c <cos+0x14>
 8008d8e:	2001      	movs	r0, #1
 8008d90:	f001 fc7a 	bl	800a688 <__kernel_sin>
 8008d94:	e7dc      	b.n	8008d50 <cos+0x18>
 8008d96:	f001 fc77 	bl	800a688 <__kernel_sin>
 8008d9a:	ec53 2b10 	vmov	r2, r3, d0
 8008d9e:	ee10 0a10 	vmov	r0, s0
 8008da2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008da6:	e7de      	b.n	8008d66 <cos+0x2e>
 8008da8:	f001 f866 	bl	8009e78 <__kernel_cos>
 8008dac:	e7f5      	b.n	8008d9a <cos+0x62>
 8008dae:	bf00      	nop
	...
 8008db8:	3fe921fb 	.word	0x3fe921fb
 8008dbc:	7fefffff 	.word	0x7fefffff

08008dc0 <sin>:
 8008dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dc2:	ec51 0b10 	vmov	r0, r1, d0
 8008dc6:	4a20      	ldr	r2, [pc, #128]	; (8008e48 <sin+0x88>)
 8008dc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	dc07      	bgt.n	8008de0 <sin+0x20>
 8008dd0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8008e40 <sin+0x80>
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	f001 fc57 	bl	800a688 <__kernel_sin>
 8008dda:	ec51 0b10 	vmov	r0, r1, d0
 8008dde:	e007      	b.n	8008df0 <sin+0x30>
 8008de0:	4a1a      	ldr	r2, [pc, #104]	; (8008e4c <sin+0x8c>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	dd09      	ble.n	8008dfa <sin+0x3a>
 8008de6:	ee10 2a10 	vmov	r2, s0
 8008dea:	460b      	mov	r3, r1
 8008dec:	f7f7 f9f0 	bl	80001d0 <__aeabi_dsub>
 8008df0:	ec41 0b10 	vmov	d0, r0, r1
 8008df4:	b005      	add	sp, #20
 8008df6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008dfa:	4668      	mov	r0, sp
 8008dfc:	f000 fd94 	bl	8009928 <__ieee754_rem_pio2>
 8008e00:	f000 0003 	and.w	r0, r0, #3
 8008e04:	2801      	cmp	r0, #1
 8008e06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e0a:	ed9d 0b00 	vldr	d0, [sp]
 8008e0e:	d004      	beq.n	8008e1a <sin+0x5a>
 8008e10:	2802      	cmp	r0, #2
 8008e12:	d005      	beq.n	8008e20 <sin+0x60>
 8008e14:	b970      	cbnz	r0, 8008e34 <sin+0x74>
 8008e16:	2001      	movs	r0, #1
 8008e18:	e7dd      	b.n	8008dd6 <sin+0x16>
 8008e1a:	f001 f82d 	bl	8009e78 <__kernel_cos>
 8008e1e:	e7dc      	b.n	8008dda <sin+0x1a>
 8008e20:	2001      	movs	r0, #1
 8008e22:	f001 fc31 	bl	800a688 <__kernel_sin>
 8008e26:	ec53 2b10 	vmov	r2, r3, d0
 8008e2a:	ee10 0a10 	vmov	r0, s0
 8008e2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008e32:	e7dd      	b.n	8008df0 <sin+0x30>
 8008e34:	f001 f820 	bl	8009e78 <__kernel_cos>
 8008e38:	e7f5      	b.n	8008e26 <sin+0x66>
 8008e3a:	bf00      	nop
 8008e3c:	f3af 8000 	nop.w
	...
 8008e48:	3fe921fb 	.word	0x3fe921fb
 8008e4c:	7fefffff 	.word	0x7fefffff

08008e50 <acos>:
 8008e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e52:	ed2d 8b02 	vpush	{d8}
 8008e56:	4e26      	ldr	r6, [pc, #152]	; (8008ef0 <acos+0xa0>)
 8008e58:	b08b      	sub	sp, #44	; 0x2c
 8008e5a:	ec55 4b10 	vmov	r4, r5, d0
 8008e5e:	f000 f8f7 	bl	8009050 <__ieee754_acos>
 8008e62:	f996 3000 	ldrsb.w	r3, [r6]
 8008e66:	eeb0 8a40 	vmov.f32	s16, s0
 8008e6a:	eef0 8a60 	vmov.f32	s17, s1
 8008e6e:	3301      	adds	r3, #1
 8008e70:	d036      	beq.n	8008ee0 <acos+0x90>
 8008e72:	4622      	mov	r2, r4
 8008e74:	462b      	mov	r3, r5
 8008e76:	4620      	mov	r0, r4
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f7f7 fdfb 	bl	8000a74 <__aeabi_dcmpun>
 8008e7e:	4607      	mov	r7, r0
 8008e80:	bb70      	cbnz	r0, 8008ee0 <acos+0x90>
 8008e82:	ec45 4b10 	vmov	d0, r4, r5
 8008e86:	f001 fcb9 	bl	800a7fc <fabs>
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	4b19      	ldr	r3, [pc, #100]	; (8008ef4 <acos+0xa4>)
 8008e8e:	ec51 0b10 	vmov	r0, r1, d0
 8008e92:	f7f7 fde5 	bl	8000a60 <__aeabi_dcmpgt>
 8008e96:	b318      	cbz	r0, 8008ee0 <acos+0x90>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	4816      	ldr	r0, [pc, #88]	; (8008ef8 <acos+0xa8>)
 8008e9e:	4b17      	ldr	r3, [pc, #92]	; (8008efc <acos+0xac>)
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	9708      	str	r7, [sp, #32]
 8008ea4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008ea8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008eac:	f001 fd38 	bl	800a920 <nan>
 8008eb0:	f996 3000 	ldrsb.w	r3, [r6]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008eba:	d104      	bne.n	8008ec6 <acos+0x76>
 8008ebc:	f7ff fea4 	bl	8008c08 <__errno>
 8008ec0:	2321      	movs	r3, #33	; 0x21
 8008ec2:	6003      	str	r3, [r0, #0]
 8008ec4:	e004      	b.n	8008ed0 <acos+0x80>
 8008ec6:	4668      	mov	r0, sp
 8008ec8:	f001 fd26 	bl	800a918 <matherr>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d0f5      	beq.n	8008ebc <acos+0x6c>
 8008ed0:	9b08      	ldr	r3, [sp, #32]
 8008ed2:	b11b      	cbz	r3, 8008edc <acos+0x8c>
 8008ed4:	f7ff fe98 	bl	8008c08 <__errno>
 8008ed8:	9b08      	ldr	r3, [sp, #32]
 8008eda:	6003      	str	r3, [r0, #0]
 8008edc:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008ee0:	eeb0 0a48 	vmov.f32	s0, s16
 8008ee4:	eef0 0a68 	vmov.f32	s1, s17
 8008ee8:	b00b      	add	sp, #44	; 0x2c
 8008eea:	ecbd 8b02 	vpop	{d8}
 8008eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ef0:	20000078 	.word	0x20000078
 8008ef4:	3ff00000 	.word	0x3ff00000
 8008ef8:	0800acd8 	.word	0x0800acd8
 8008efc:	0800acc9 	.word	0x0800acc9

08008f00 <asin>:
 8008f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f02:	ed2d 8b02 	vpush	{d8}
 8008f06:	4e26      	ldr	r6, [pc, #152]	; (8008fa0 <asin+0xa0>)
 8008f08:	b08b      	sub	sp, #44	; 0x2c
 8008f0a:	ec55 4b10 	vmov	r4, r5, d0
 8008f0e:	f000 fafb 	bl	8009508 <__ieee754_asin>
 8008f12:	f996 3000 	ldrsb.w	r3, [r6]
 8008f16:	eeb0 8a40 	vmov.f32	s16, s0
 8008f1a:	eef0 8a60 	vmov.f32	s17, s1
 8008f1e:	3301      	adds	r3, #1
 8008f20:	d036      	beq.n	8008f90 <asin+0x90>
 8008f22:	4622      	mov	r2, r4
 8008f24:	462b      	mov	r3, r5
 8008f26:	4620      	mov	r0, r4
 8008f28:	4629      	mov	r1, r5
 8008f2a:	f7f7 fda3 	bl	8000a74 <__aeabi_dcmpun>
 8008f2e:	4607      	mov	r7, r0
 8008f30:	bb70      	cbnz	r0, 8008f90 <asin+0x90>
 8008f32:	ec45 4b10 	vmov	d0, r4, r5
 8008f36:	f001 fc61 	bl	800a7fc <fabs>
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4b19      	ldr	r3, [pc, #100]	; (8008fa4 <asin+0xa4>)
 8008f3e:	ec51 0b10 	vmov	r0, r1, d0
 8008f42:	f7f7 fd8d 	bl	8000a60 <__aeabi_dcmpgt>
 8008f46:	b318      	cbz	r0, 8008f90 <asin+0x90>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	4816      	ldr	r0, [pc, #88]	; (8008fa8 <asin+0xa8>)
 8008f4e:	4b17      	ldr	r3, [pc, #92]	; (8008fac <asin+0xac>)
 8008f50:	9301      	str	r3, [sp, #4]
 8008f52:	9708      	str	r7, [sp, #32]
 8008f54:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008f58:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008f5c:	f001 fce0 	bl	800a920 <nan>
 8008f60:	f996 3000 	ldrsb.w	r3, [r6]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008f6a:	d104      	bne.n	8008f76 <asin+0x76>
 8008f6c:	f7ff fe4c 	bl	8008c08 <__errno>
 8008f70:	2321      	movs	r3, #33	; 0x21
 8008f72:	6003      	str	r3, [r0, #0]
 8008f74:	e004      	b.n	8008f80 <asin+0x80>
 8008f76:	4668      	mov	r0, sp
 8008f78:	f001 fcce 	bl	800a918 <matherr>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d0f5      	beq.n	8008f6c <asin+0x6c>
 8008f80:	9b08      	ldr	r3, [sp, #32]
 8008f82:	b11b      	cbz	r3, 8008f8c <asin+0x8c>
 8008f84:	f7ff fe40 	bl	8008c08 <__errno>
 8008f88:	9b08      	ldr	r3, [sp, #32]
 8008f8a:	6003      	str	r3, [r0, #0]
 8008f8c:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008f90:	eeb0 0a48 	vmov.f32	s0, s16
 8008f94:	eef0 0a68 	vmov.f32	s1, s17
 8008f98:	b00b      	add	sp, #44	; 0x2c
 8008f9a:	ecbd 8b02 	vpop	{d8}
 8008f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fa0:	20000078 	.word	0x20000078
 8008fa4:	3ff00000 	.word	0x3ff00000
 8008fa8:	0800acd8 	.word	0x0800acd8
 8008fac:	0800acce 	.word	0x0800acce

08008fb0 <sqrtf>:
 8008fb0:	b510      	push	{r4, lr}
 8008fb2:	ed2d 8b02 	vpush	{d8}
 8008fb6:	b08a      	sub	sp, #40	; 0x28
 8008fb8:	eeb0 8a40 	vmov.f32	s16, s0
 8008fbc:	f000 ff56 	bl	8009e6c <__ieee754_sqrtf>
 8008fc0:	4b21      	ldr	r3, [pc, #132]	; (8009048 <sqrtf+0x98>)
 8008fc2:	f993 4000 	ldrsb.w	r4, [r3]
 8008fc6:	1c63      	adds	r3, r4, #1
 8008fc8:	d02c      	beq.n	8009024 <sqrtf+0x74>
 8008fca:	eeb4 8a48 	vcmp.f32	s16, s16
 8008fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd2:	d627      	bvs.n	8009024 <sqrtf+0x74>
 8008fd4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fdc:	d522      	bpl.n	8009024 <sqrtf+0x74>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	4b1a      	ldr	r3, [pc, #104]	; (800904c <sqrtf+0x9c>)
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	ee18 0a10 	vmov	r0, s16
 8008fea:	2300      	movs	r3, #0
 8008fec:	9308      	str	r3, [sp, #32]
 8008fee:	f7f7 fa4f 	bl	8000490 <__aeabi_f2d>
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	b9ac      	cbnz	r4, 800902c <sqrtf+0x7c>
 8009000:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009004:	4668      	mov	r0, sp
 8009006:	f001 fc87 	bl	800a918 <matherr>
 800900a:	b1b8      	cbz	r0, 800903c <sqrtf+0x8c>
 800900c:	9b08      	ldr	r3, [sp, #32]
 800900e:	b11b      	cbz	r3, 8009018 <sqrtf+0x68>
 8009010:	f7ff fdfa 	bl	8008c08 <__errno>
 8009014:	9b08      	ldr	r3, [sp, #32]
 8009016:	6003      	str	r3, [r0, #0]
 8009018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800901c:	f7f7 fd88 	bl	8000b30 <__aeabi_d2f>
 8009020:	ee00 0a10 	vmov	s0, r0
 8009024:	b00a      	add	sp, #40	; 0x28
 8009026:	ecbd 8b02 	vpop	{d8}
 800902a:	bd10      	pop	{r4, pc}
 800902c:	4610      	mov	r0, r2
 800902e:	4619      	mov	r1, r3
 8009030:	f7f7 fbb0 	bl	8000794 <__aeabi_ddiv>
 8009034:	2c02      	cmp	r4, #2
 8009036:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800903a:	d1e3      	bne.n	8009004 <sqrtf+0x54>
 800903c:	f7ff fde4 	bl	8008c08 <__errno>
 8009040:	2321      	movs	r3, #33	; 0x21
 8009042:	6003      	str	r3, [r0, #0]
 8009044:	e7e2      	b.n	800900c <sqrtf+0x5c>
 8009046:	bf00      	nop
 8009048:	20000078 	.word	0x20000078
 800904c:	0800acd3 	.word	0x0800acd3

08009050 <__ieee754_acos>:
 8009050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	ec55 4b10 	vmov	r4, r5, d0
 8009058:	49b7      	ldr	r1, [pc, #732]	; (8009338 <__ieee754_acos+0x2e8>)
 800905a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800905e:	428b      	cmp	r3, r1
 8009060:	dd1b      	ble.n	800909a <__ieee754_acos+0x4a>
 8009062:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8009066:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800906a:	4323      	orrs	r3, r4
 800906c:	d109      	bne.n	8009082 <__ieee754_acos+0x32>
 800906e:	2d00      	cmp	r5, #0
 8009070:	f300 8211 	bgt.w	8009496 <__ieee754_acos+0x446>
 8009074:	a196      	add	r1, pc, #600	; (adr r1, 80092d0 <__ieee754_acos+0x280>)
 8009076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800907a:	ec41 0b10 	vmov	d0, r0, r1
 800907e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009082:	ee10 2a10 	vmov	r2, s0
 8009086:	462b      	mov	r3, r5
 8009088:	4620      	mov	r0, r4
 800908a:	4629      	mov	r1, r5
 800908c:	f7f7 f8a0 	bl	80001d0 <__aeabi_dsub>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	f7f7 fb7e 	bl	8000794 <__aeabi_ddiv>
 8009098:	e7ef      	b.n	800907a <__ieee754_acos+0x2a>
 800909a:	49a8      	ldr	r1, [pc, #672]	; (800933c <__ieee754_acos+0x2ec>)
 800909c:	428b      	cmp	r3, r1
 800909e:	f300 8087 	bgt.w	80091b0 <__ieee754_acos+0x160>
 80090a2:	4aa7      	ldr	r2, [pc, #668]	; (8009340 <__ieee754_acos+0x2f0>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	f340 81f9 	ble.w	800949c <__ieee754_acos+0x44c>
 80090aa:	ee10 2a10 	vmov	r2, s0
 80090ae:	ee10 0a10 	vmov	r0, s0
 80090b2:	462b      	mov	r3, r5
 80090b4:	4629      	mov	r1, r5
 80090b6:	f7f7 fa43 	bl	8000540 <__aeabi_dmul>
 80090ba:	a387      	add	r3, pc, #540	; (adr r3, 80092d8 <__ieee754_acos+0x288>)
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	4606      	mov	r6, r0
 80090c2:	460f      	mov	r7, r1
 80090c4:	f7f7 fa3c 	bl	8000540 <__aeabi_dmul>
 80090c8:	a385      	add	r3, pc, #532	; (adr r3, 80092e0 <__ieee754_acos+0x290>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	f7f7 f881 	bl	80001d4 <__adddf3>
 80090d2:	4632      	mov	r2, r6
 80090d4:	463b      	mov	r3, r7
 80090d6:	f7f7 fa33 	bl	8000540 <__aeabi_dmul>
 80090da:	a383      	add	r3, pc, #524	; (adr r3, 80092e8 <__ieee754_acos+0x298>)
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	f7f7 f876 	bl	80001d0 <__aeabi_dsub>
 80090e4:	4632      	mov	r2, r6
 80090e6:	463b      	mov	r3, r7
 80090e8:	f7f7 fa2a 	bl	8000540 <__aeabi_dmul>
 80090ec:	a380      	add	r3, pc, #512	; (adr r3, 80092f0 <__ieee754_acos+0x2a0>)
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	f7f7 f86f 	bl	80001d4 <__adddf3>
 80090f6:	4632      	mov	r2, r6
 80090f8:	463b      	mov	r3, r7
 80090fa:	f7f7 fa21 	bl	8000540 <__aeabi_dmul>
 80090fe:	a37e      	add	r3, pc, #504	; (adr r3, 80092f8 <__ieee754_acos+0x2a8>)
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	f7f7 f864 	bl	80001d0 <__aeabi_dsub>
 8009108:	4632      	mov	r2, r6
 800910a:	463b      	mov	r3, r7
 800910c:	f7f7 fa18 	bl	8000540 <__aeabi_dmul>
 8009110:	a37b      	add	r3, pc, #492	; (adr r3, 8009300 <__ieee754_acos+0x2b0>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	f7f7 f85d 	bl	80001d4 <__adddf3>
 800911a:	4632      	mov	r2, r6
 800911c:	463b      	mov	r3, r7
 800911e:	f7f7 fa0f 	bl	8000540 <__aeabi_dmul>
 8009122:	a379      	add	r3, pc, #484	; (adr r3, 8009308 <__ieee754_acos+0x2b8>)
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	4680      	mov	r8, r0
 800912a:	4689      	mov	r9, r1
 800912c:	4630      	mov	r0, r6
 800912e:	4639      	mov	r1, r7
 8009130:	f7f7 fa06 	bl	8000540 <__aeabi_dmul>
 8009134:	a376      	add	r3, pc, #472	; (adr r3, 8009310 <__ieee754_acos+0x2c0>)
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	f7f7 f849 	bl	80001d0 <__aeabi_dsub>
 800913e:	4632      	mov	r2, r6
 8009140:	463b      	mov	r3, r7
 8009142:	f7f7 f9fd 	bl	8000540 <__aeabi_dmul>
 8009146:	a374      	add	r3, pc, #464	; (adr r3, 8009318 <__ieee754_acos+0x2c8>)
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	f7f7 f842 	bl	80001d4 <__adddf3>
 8009150:	4632      	mov	r2, r6
 8009152:	463b      	mov	r3, r7
 8009154:	f7f7 f9f4 	bl	8000540 <__aeabi_dmul>
 8009158:	a371      	add	r3, pc, #452	; (adr r3, 8009320 <__ieee754_acos+0x2d0>)
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	f7f7 f837 	bl	80001d0 <__aeabi_dsub>
 8009162:	4632      	mov	r2, r6
 8009164:	463b      	mov	r3, r7
 8009166:	f7f7 f9eb 	bl	8000540 <__aeabi_dmul>
 800916a:	2200      	movs	r2, #0
 800916c:	4b75      	ldr	r3, [pc, #468]	; (8009344 <__ieee754_acos+0x2f4>)
 800916e:	f7f7 f831 	bl	80001d4 <__adddf3>
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	4640      	mov	r0, r8
 8009178:	4649      	mov	r1, r9
 800917a:	f7f7 fb0b 	bl	8000794 <__aeabi_ddiv>
 800917e:	4622      	mov	r2, r4
 8009180:	462b      	mov	r3, r5
 8009182:	f7f7 f9dd 	bl	8000540 <__aeabi_dmul>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	a167      	add	r1, pc, #412	; (adr r1, 8009328 <__ieee754_acos+0x2d8>)
 800918c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009190:	f7f7 f81e 	bl	80001d0 <__aeabi_dsub>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4620      	mov	r0, r4
 800919a:	4629      	mov	r1, r5
 800919c:	f7f7 f818 	bl	80001d0 <__aeabi_dsub>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	a162      	add	r1, pc, #392	; (adr r1, 8009330 <__ieee754_acos+0x2e0>)
 80091a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091aa:	f7f7 f811 	bl	80001d0 <__aeabi_dsub>
 80091ae:	e764      	b.n	800907a <__ieee754_acos+0x2a>
 80091b0:	2d00      	cmp	r5, #0
 80091b2:	f280 80cb 	bge.w	800934c <__ieee754_acos+0x2fc>
 80091b6:	ee10 0a10 	vmov	r0, s0
 80091ba:	2200      	movs	r2, #0
 80091bc:	4b61      	ldr	r3, [pc, #388]	; (8009344 <__ieee754_acos+0x2f4>)
 80091be:	4629      	mov	r1, r5
 80091c0:	f7f7 f808 	bl	80001d4 <__adddf3>
 80091c4:	2200      	movs	r2, #0
 80091c6:	4b60      	ldr	r3, [pc, #384]	; (8009348 <__ieee754_acos+0x2f8>)
 80091c8:	f7f7 f9ba 	bl	8000540 <__aeabi_dmul>
 80091cc:	a342      	add	r3, pc, #264	; (adr r3, 80092d8 <__ieee754_acos+0x288>)
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	4604      	mov	r4, r0
 80091d4:	460d      	mov	r5, r1
 80091d6:	f7f7 f9b3 	bl	8000540 <__aeabi_dmul>
 80091da:	a341      	add	r3, pc, #260	; (adr r3, 80092e0 <__ieee754_acos+0x290>)
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	f7f6 fff8 	bl	80001d4 <__adddf3>
 80091e4:	4622      	mov	r2, r4
 80091e6:	462b      	mov	r3, r5
 80091e8:	f7f7 f9aa 	bl	8000540 <__aeabi_dmul>
 80091ec:	a33e      	add	r3, pc, #248	; (adr r3, 80092e8 <__ieee754_acos+0x298>)
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f7f6 ffed 	bl	80001d0 <__aeabi_dsub>
 80091f6:	4622      	mov	r2, r4
 80091f8:	462b      	mov	r3, r5
 80091fa:	f7f7 f9a1 	bl	8000540 <__aeabi_dmul>
 80091fe:	a33c      	add	r3, pc, #240	; (adr r3, 80092f0 <__ieee754_acos+0x2a0>)
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f7f6 ffe6 	bl	80001d4 <__adddf3>
 8009208:	4622      	mov	r2, r4
 800920a:	462b      	mov	r3, r5
 800920c:	f7f7 f998 	bl	8000540 <__aeabi_dmul>
 8009210:	a339      	add	r3, pc, #228	; (adr r3, 80092f8 <__ieee754_acos+0x2a8>)
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	f7f6 ffdb 	bl	80001d0 <__aeabi_dsub>
 800921a:	4622      	mov	r2, r4
 800921c:	462b      	mov	r3, r5
 800921e:	f7f7 f98f 	bl	8000540 <__aeabi_dmul>
 8009222:	a337      	add	r3, pc, #220	; (adr r3, 8009300 <__ieee754_acos+0x2b0>)
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f7f6 ffd4 	bl	80001d4 <__adddf3>
 800922c:	4622      	mov	r2, r4
 800922e:	462b      	mov	r3, r5
 8009230:	f7f7 f986 	bl	8000540 <__aeabi_dmul>
 8009234:	ec45 4b10 	vmov	d0, r4, r5
 8009238:	4680      	mov	r8, r0
 800923a:	4689      	mov	r9, r1
 800923c:	f000 fd66 	bl	8009d0c <__ieee754_sqrt>
 8009240:	a331      	add	r3, pc, #196	; (adr r3, 8009308 <__ieee754_acos+0x2b8>)
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	4620      	mov	r0, r4
 8009248:	4629      	mov	r1, r5
 800924a:	ec57 6b10 	vmov	r6, r7, d0
 800924e:	f7f7 f977 	bl	8000540 <__aeabi_dmul>
 8009252:	a32f      	add	r3, pc, #188	; (adr r3, 8009310 <__ieee754_acos+0x2c0>)
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	f7f6 ffba 	bl	80001d0 <__aeabi_dsub>
 800925c:	4622      	mov	r2, r4
 800925e:	462b      	mov	r3, r5
 8009260:	f7f7 f96e 	bl	8000540 <__aeabi_dmul>
 8009264:	a32c      	add	r3, pc, #176	; (adr r3, 8009318 <__ieee754_acos+0x2c8>)
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	f7f6 ffb3 	bl	80001d4 <__adddf3>
 800926e:	4622      	mov	r2, r4
 8009270:	462b      	mov	r3, r5
 8009272:	f7f7 f965 	bl	8000540 <__aeabi_dmul>
 8009276:	a32a      	add	r3, pc, #168	; (adr r3, 8009320 <__ieee754_acos+0x2d0>)
 8009278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927c:	f7f6 ffa8 	bl	80001d0 <__aeabi_dsub>
 8009280:	4622      	mov	r2, r4
 8009282:	462b      	mov	r3, r5
 8009284:	f7f7 f95c 	bl	8000540 <__aeabi_dmul>
 8009288:	2200      	movs	r2, #0
 800928a:	4b2e      	ldr	r3, [pc, #184]	; (8009344 <__ieee754_acos+0x2f4>)
 800928c:	f7f6 ffa2 	bl	80001d4 <__adddf3>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4640      	mov	r0, r8
 8009296:	4649      	mov	r1, r9
 8009298:	f7f7 fa7c 	bl	8000794 <__aeabi_ddiv>
 800929c:	4632      	mov	r2, r6
 800929e:	463b      	mov	r3, r7
 80092a0:	f7f7 f94e 	bl	8000540 <__aeabi_dmul>
 80092a4:	a320      	add	r3, pc, #128	; (adr r3, 8009328 <__ieee754_acos+0x2d8>)
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	f7f6 ff91 	bl	80001d0 <__aeabi_dsub>
 80092ae:	4632      	mov	r2, r6
 80092b0:	463b      	mov	r3, r7
 80092b2:	f7f6 ff8f 	bl	80001d4 <__adddf3>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	f7f6 ff8b 	bl	80001d4 <__adddf3>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	a103      	add	r1, pc, #12	; (adr r1, 80092d0 <__ieee754_acos+0x280>)
 80092c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092c8:	e76f      	b.n	80091aa <__ieee754_acos+0x15a>
 80092ca:	bf00      	nop
 80092cc:	f3af 8000 	nop.w
 80092d0:	54442d18 	.word	0x54442d18
 80092d4:	400921fb 	.word	0x400921fb
 80092d8:	0dfdf709 	.word	0x0dfdf709
 80092dc:	3f023de1 	.word	0x3f023de1
 80092e0:	7501b288 	.word	0x7501b288
 80092e4:	3f49efe0 	.word	0x3f49efe0
 80092e8:	b5688f3b 	.word	0xb5688f3b
 80092ec:	3fa48228 	.word	0x3fa48228
 80092f0:	0e884455 	.word	0x0e884455
 80092f4:	3fc9c155 	.word	0x3fc9c155
 80092f8:	03eb6f7d 	.word	0x03eb6f7d
 80092fc:	3fd4d612 	.word	0x3fd4d612
 8009300:	55555555 	.word	0x55555555
 8009304:	3fc55555 	.word	0x3fc55555
 8009308:	b12e9282 	.word	0xb12e9282
 800930c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009310:	1b8d0159 	.word	0x1b8d0159
 8009314:	3fe6066c 	.word	0x3fe6066c
 8009318:	9c598ac8 	.word	0x9c598ac8
 800931c:	40002ae5 	.word	0x40002ae5
 8009320:	1c8a2d4b 	.word	0x1c8a2d4b
 8009324:	40033a27 	.word	0x40033a27
 8009328:	33145c07 	.word	0x33145c07
 800932c:	3c91a626 	.word	0x3c91a626
 8009330:	54442d18 	.word	0x54442d18
 8009334:	3ff921fb 	.word	0x3ff921fb
 8009338:	3fefffff 	.word	0x3fefffff
 800933c:	3fdfffff 	.word	0x3fdfffff
 8009340:	3c600000 	.word	0x3c600000
 8009344:	3ff00000 	.word	0x3ff00000
 8009348:	3fe00000 	.word	0x3fe00000
 800934c:	ee10 2a10 	vmov	r2, s0
 8009350:	462b      	mov	r3, r5
 8009352:	2000      	movs	r0, #0
 8009354:	496a      	ldr	r1, [pc, #424]	; (8009500 <__ieee754_acos+0x4b0>)
 8009356:	f7f6 ff3b 	bl	80001d0 <__aeabi_dsub>
 800935a:	2200      	movs	r2, #0
 800935c:	4b69      	ldr	r3, [pc, #420]	; (8009504 <__ieee754_acos+0x4b4>)
 800935e:	f7f7 f8ef 	bl	8000540 <__aeabi_dmul>
 8009362:	4604      	mov	r4, r0
 8009364:	460d      	mov	r5, r1
 8009366:	ec45 4b10 	vmov	d0, r4, r5
 800936a:	f000 fccf 	bl	8009d0c <__ieee754_sqrt>
 800936e:	a34e      	add	r3, pc, #312	; (adr r3, 80094a8 <__ieee754_acos+0x458>)
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	4620      	mov	r0, r4
 8009376:	4629      	mov	r1, r5
 8009378:	ec59 8b10 	vmov	r8, r9, d0
 800937c:	f7f7 f8e0 	bl	8000540 <__aeabi_dmul>
 8009380:	a34b      	add	r3, pc, #300	; (adr r3, 80094b0 <__ieee754_acos+0x460>)
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	f7f6 ff25 	bl	80001d4 <__adddf3>
 800938a:	4622      	mov	r2, r4
 800938c:	462b      	mov	r3, r5
 800938e:	f7f7 f8d7 	bl	8000540 <__aeabi_dmul>
 8009392:	a349      	add	r3, pc, #292	; (adr r3, 80094b8 <__ieee754_acos+0x468>)
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f7f6 ff1a 	bl	80001d0 <__aeabi_dsub>
 800939c:	4622      	mov	r2, r4
 800939e:	462b      	mov	r3, r5
 80093a0:	f7f7 f8ce 	bl	8000540 <__aeabi_dmul>
 80093a4:	a346      	add	r3, pc, #280	; (adr r3, 80094c0 <__ieee754_acos+0x470>)
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	f7f6 ff13 	bl	80001d4 <__adddf3>
 80093ae:	4622      	mov	r2, r4
 80093b0:	462b      	mov	r3, r5
 80093b2:	f7f7 f8c5 	bl	8000540 <__aeabi_dmul>
 80093b6:	a344      	add	r3, pc, #272	; (adr r3, 80094c8 <__ieee754_acos+0x478>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	f7f6 ff08 	bl	80001d0 <__aeabi_dsub>
 80093c0:	4622      	mov	r2, r4
 80093c2:	462b      	mov	r3, r5
 80093c4:	f7f7 f8bc 	bl	8000540 <__aeabi_dmul>
 80093c8:	a341      	add	r3, pc, #260	; (adr r3, 80094d0 <__ieee754_acos+0x480>)
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	f7f6 ff01 	bl	80001d4 <__adddf3>
 80093d2:	4622      	mov	r2, r4
 80093d4:	462b      	mov	r3, r5
 80093d6:	f7f7 f8b3 	bl	8000540 <__aeabi_dmul>
 80093da:	a33f      	add	r3, pc, #252	; (adr r3, 80094d8 <__ieee754_acos+0x488>)
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	4682      	mov	sl, r0
 80093e2:	468b      	mov	fp, r1
 80093e4:	4620      	mov	r0, r4
 80093e6:	4629      	mov	r1, r5
 80093e8:	f7f7 f8aa 	bl	8000540 <__aeabi_dmul>
 80093ec:	a33c      	add	r3, pc, #240	; (adr r3, 80094e0 <__ieee754_acos+0x490>)
 80093ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f2:	f7f6 feed 	bl	80001d0 <__aeabi_dsub>
 80093f6:	4622      	mov	r2, r4
 80093f8:	462b      	mov	r3, r5
 80093fa:	f7f7 f8a1 	bl	8000540 <__aeabi_dmul>
 80093fe:	a33a      	add	r3, pc, #232	; (adr r3, 80094e8 <__ieee754_acos+0x498>)
 8009400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009404:	f7f6 fee6 	bl	80001d4 <__adddf3>
 8009408:	4622      	mov	r2, r4
 800940a:	462b      	mov	r3, r5
 800940c:	f7f7 f898 	bl	8000540 <__aeabi_dmul>
 8009410:	a337      	add	r3, pc, #220	; (adr r3, 80094f0 <__ieee754_acos+0x4a0>)
 8009412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009416:	f7f6 fedb 	bl	80001d0 <__aeabi_dsub>
 800941a:	4622      	mov	r2, r4
 800941c:	462b      	mov	r3, r5
 800941e:	f7f7 f88f 	bl	8000540 <__aeabi_dmul>
 8009422:	2200      	movs	r2, #0
 8009424:	4b36      	ldr	r3, [pc, #216]	; (8009500 <__ieee754_acos+0x4b0>)
 8009426:	f7f6 fed5 	bl	80001d4 <__adddf3>
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	4650      	mov	r0, sl
 8009430:	4659      	mov	r1, fp
 8009432:	f7f7 f9af 	bl	8000794 <__aeabi_ddiv>
 8009436:	4642      	mov	r2, r8
 8009438:	464b      	mov	r3, r9
 800943a:	f7f7 f881 	bl	8000540 <__aeabi_dmul>
 800943e:	2600      	movs	r6, #0
 8009440:	4682      	mov	sl, r0
 8009442:	468b      	mov	fp, r1
 8009444:	4632      	mov	r2, r6
 8009446:	464b      	mov	r3, r9
 8009448:	4630      	mov	r0, r6
 800944a:	4649      	mov	r1, r9
 800944c:	f7f7 f878 	bl	8000540 <__aeabi_dmul>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	4620      	mov	r0, r4
 8009456:	4629      	mov	r1, r5
 8009458:	f7f6 feba 	bl	80001d0 <__aeabi_dsub>
 800945c:	4632      	mov	r2, r6
 800945e:	4604      	mov	r4, r0
 8009460:	460d      	mov	r5, r1
 8009462:	464b      	mov	r3, r9
 8009464:	4640      	mov	r0, r8
 8009466:	4649      	mov	r1, r9
 8009468:	f7f6 feb4 	bl	80001d4 <__adddf3>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4620      	mov	r0, r4
 8009472:	4629      	mov	r1, r5
 8009474:	f7f7 f98e 	bl	8000794 <__aeabi_ddiv>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	4650      	mov	r0, sl
 800947e:	4659      	mov	r1, fp
 8009480:	f7f6 fea8 	bl	80001d4 <__adddf3>
 8009484:	4632      	mov	r2, r6
 8009486:	464b      	mov	r3, r9
 8009488:	f7f6 fea4 	bl	80001d4 <__adddf3>
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	f7f6 fea0 	bl	80001d4 <__adddf3>
 8009494:	e5f1      	b.n	800907a <__ieee754_acos+0x2a>
 8009496:	2000      	movs	r0, #0
 8009498:	2100      	movs	r1, #0
 800949a:	e5ee      	b.n	800907a <__ieee754_acos+0x2a>
 800949c:	a116      	add	r1, pc, #88	; (adr r1, 80094f8 <__ieee754_acos+0x4a8>)
 800949e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094a2:	e5ea      	b.n	800907a <__ieee754_acos+0x2a>
 80094a4:	f3af 8000 	nop.w
 80094a8:	0dfdf709 	.word	0x0dfdf709
 80094ac:	3f023de1 	.word	0x3f023de1
 80094b0:	7501b288 	.word	0x7501b288
 80094b4:	3f49efe0 	.word	0x3f49efe0
 80094b8:	b5688f3b 	.word	0xb5688f3b
 80094bc:	3fa48228 	.word	0x3fa48228
 80094c0:	0e884455 	.word	0x0e884455
 80094c4:	3fc9c155 	.word	0x3fc9c155
 80094c8:	03eb6f7d 	.word	0x03eb6f7d
 80094cc:	3fd4d612 	.word	0x3fd4d612
 80094d0:	55555555 	.word	0x55555555
 80094d4:	3fc55555 	.word	0x3fc55555
 80094d8:	b12e9282 	.word	0xb12e9282
 80094dc:	3fb3b8c5 	.word	0x3fb3b8c5
 80094e0:	1b8d0159 	.word	0x1b8d0159
 80094e4:	3fe6066c 	.word	0x3fe6066c
 80094e8:	9c598ac8 	.word	0x9c598ac8
 80094ec:	40002ae5 	.word	0x40002ae5
 80094f0:	1c8a2d4b 	.word	0x1c8a2d4b
 80094f4:	40033a27 	.word	0x40033a27
 80094f8:	54442d18 	.word	0x54442d18
 80094fc:	3ff921fb 	.word	0x3ff921fb
 8009500:	3ff00000 	.word	0x3ff00000
 8009504:	3fe00000 	.word	0x3fe00000

08009508 <__ieee754_asin>:
 8009508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800950c:	ec55 4b10 	vmov	r4, r5, d0
 8009510:	4bcb      	ldr	r3, [pc, #812]	; (8009840 <__ieee754_asin+0x338>)
 8009512:	b087      	sub	sp, #28
 8009514:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8009518:	429f      	cmp	r7, r3
 800951a:	9501      	str	r5, [sp, #4]
 800951c:	dd31      	ble.n	8009582 <__ieee754_asin+0x7a>
 800951e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8009522:	ee10 3a10 	vmov	r3, s0
 8009526:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800952a:	433b      	orrs	r3, r7
 800952c:	d117      	bne.n	800955e <__ieee754_asin+0x56>
 800952e:	a3aa      	add	r3, pc, #680	; (adr r3, 80097d8 <__ieee754_asin+0x2d0>)
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	ee10 0a10 	vmov	r0, s0
 8009538:	4629      	mov	r1, r5
 800953a:	f7f7 f801 	bl	8000540 <__aeabi_dmul>
 800953e:	a3a8      	add	r3, pc, #672	; (adr r3, 80097e0 <__ieee754_asin+0x2d8>)
 8009540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009544:	4606      	mov	r6, r0
 8009546:	460f      	mov	r7, r1
 8009548:	4620      	mov	r0, r4
 800954a:	4629      	mov	r1, r5
 800954c:	f7f6 fff8 	bl	8000540 <__aeabi_dmul>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4630      	mov	r0, r6
 8009556:	4639      	mov	r1, r7
 8009558:	f7f6 fe3c 	bl	80001d4 <__adddf3>
 800955c:	e00a      	b.n	8009574 <__ieee754_asin+0x6c>
 800955e:	ee10 2a10 	vmov	r2, s0
 8009562:	462b      	mov	r3, r5
 8009564:	4620      	mov	r0, r4
 8009566:	4629      	mov	r1, r5
 8009568:	f7f6 fe32 	bl	80001d0 <__aeabi_dsub>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	f7f7 f910 	bl	8000794 <__aeabi_ddiv>
 8009574:	4604      	mov	r4, r0
 8009576:	460d      	mov	r5, r1
 8009578:	ec45 4b10 	vmov	d0, r4, r5
 800957c:	b007      	add	sp, #28
 800957e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009582:	4bb0      	ldr	r3, [pc, #704]	; (8009844 <__ieee754_asin+0x33c>)
 8009584:	429f      	cmp	r7, r3
 8009586:	dc11      	bgt.n	80095ac <__ieee754_asin+0xa4>
 8009588:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800958c:	f280 80ae 	bge.w	80096ec <__ieee754_asin+0x1e4>
 8009590:	a395      	add	r3, pc, #596	; (adr r3, 80097e8 <__ieee754_asin+0x2e0>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	ee10 0a10 	vmov	r0, s0
 800959a:	4629      	mov	r1, r5
 800959c:	f7f6 fe1a 	bl	80001d4 <__adddf3>
 80095a0:	2200      	movs	r2, #0
 80095a2:	4ba9      	ldr	r3, [pc, #676]	; (8009848 <__ieee754_asin+0x340>)
 80095a4:	f7f7 fa5c 	bl	8000a60 <__aeabi_dcmpgt>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d1e5      	bne.n	8009578 <__ieee754_asin+0x70>
 80095ac:	ec45 4b10 	vmov	d0, r4, r5
 80095b0:	f001 f924 	bl	800a7fc <fabs>
 80095b4:	2000      	movs	r0, #0
 80095b6:	ec53 2b10 	vmov	r2, r3, d0
 80095ba:	49a3      	ldr	r1, [pc, #652]	; (8009848 <__ieee754_asin+0x340>)
 80095bc:	f7f6 fe08 	bl	80001d0 <__aeabi_dsub>
 80095c0:	2200      	movs	r2, #0
 80095c2:	4ba2      	ldr	r3, [pc, #648]	; (800984c <__ieee754_asin+0x344>)
 80095c4:	f7f6 ffbc 	bl	8000540 <__aeabi_dmul>
 80095c8:	a389      	add	r3, pc, #548	; (adr r3, 80097f0 <__ieee754_asin+0x2e8>)
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	4604      	mov	r4, r0
 80095d0:	460d      	mov	r5, r1
 80095d2:	f7f6 ffb5 	bl	8000540 <__aeabi_dmul>
 80095d6:	a388      	add	r3, pc, #544	; (adr r3, 80097f8 <__ieee754_asin+0x2f0>)
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f7f6 fdfa 	bl	80001d4 <__adddf3>
 80095e0:	4622      	mov	r2, r4
 80095e2:	462b      	mov	r3, r5
 80095e4:	f7f6 ffac 	bl	8000540 <__aeabi_dmul>
 80095e8:	a385      	add	r3, pc, #532	; (adr r3, 8009800 <__ieee754_asin+0x2f8>)
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	f7f6 fdef 	bl	80001d0 <__aeabi_dsub>
 80095f2:	4622      	mov	r2, r4
 80095f4:	462b      	mov	r3, r5
 80095f6:	f7f6 ffa3 	bl	8000540 <__aeabi_dmul>
 80095fa:	a383      	add	r3, pc, #524	; (adr r3, 8009808 <__ieee754_asin+0x300>)
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	f7f6 fde8 	bl	80001d4 <__adddf3>
 8009604:	4622      	mov	r2, r4
 8009606:	462b      	mov	r3, r5
 8009608:	f7f6 ff9a 	bl	8000540 <__aeabi_dmul>
 800960c:	a380      	add	r3, pc, #512	; (adr r3, 8009810 <__ieee754_asin+0x308>)
 800960e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009612:	f7f6 fddd 	bl	80001d0 <__aeabi_dsub>
 8009616:	4622      	mov	r2, r4
 8009618:	462b      	mov	r3, r5
 800961a:	f7f6 ff91 	bl	8000540 <__aeabi_dmul>
 800961e:	a37e      	add	r3, pc, #504	; (adr r3, 8009818 <__ieee754_asin+0x310>)
 8009620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009624:	f7f6 fdd6 	bl	80001d4 <__adddf3>
 8009628:	4622      	mov	r2, r4
 800962a:	462b      	mov	r3, r5
 800962c:	f7f6 ff88 	bl	8000540 <__aeabi_dmul>
 8009630:	a37b      	add	r3, pc, #492	; (adr r3, 8009820 <__ieee754_asin+0x318>)
 8009632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009636:	4680      	mov	r8, r0
 8009638:	4689      	mov	r9, r1
 800963a:	4620      	mov	r0, r4
 800963c:	4629      	mov	r1, r5
 800963e:	f7f6 ff7f 	bl	8000540 <__aeabi_dmul>
 8009642:	a379      	add	r3, pc, #484	; (adr r3, 8009828 <__ieee754_asin+0x320>)
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	f7f6 fdc2 	bl	80001d0 <__aeabi_dsub>
 800964c:	4622      	mov	r2, r4
 800964e:	462b      	mov	r3, r5
 8009650:	f7f6 ff76 	bl	8000540 <__aeabi_dmul>
 8009654:	a376      	add	r3, pc, #472	; (adr r3, 8009830 <__ieee754_asin+0x328>)
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	f7f6 fdbb 	bl	80001d4 <__adddf3>
 800965e:	4622      	mov	r2, r4
 8009660:	462b      	mov	r3, r5
 8009662:	f7f6 ff6d 	bl	8000540 <__aeabi_dmul>
 8009666:	a374      	add	r3, pc, #464	; (adr r3, 8009838 <__ieee754_asin+0x330>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	f7f6 fdb0 	bl	80001d0 <__aeabi_dsub>
 8009670:	4622      	mov	r2, r4
 8009672:	462b      	mov	r3, r5
 8009674:	f7f6 ff64 	bl	8000540 <__aeabi_dmul>
 8009678:	4b73      	ldr	r3, [pc, #460]	; (8009848 <__ieee754_asin+0x340>)
 800967a:	2200      	movs	r2, #0
 800967c:	f7f6 fdaa 	bl	80001d4 <__adddf3>
 8009680:	ec45 4b10 	vmov	d0, r4, r5
 8009684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009688:	f000 fb40 	bl	8009d0c <__ieee754_sqrt>
 800968c:	4b70      	ldr	r3, [pc, #448]	; (8009850 <__ieee754_asin+0x348>)
 800968e:	429f      	cmp	r7, r3
 8009690:	ec5b ab10 	vmov	sl, fp, d0
 8009694:	f340 80de 	ble.w	8009854 <__ieee754_asin+0x34c>
 8009698:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800969c:	4640      	mov	r0, r8
 800969e:	4649      	mov	r1, r9
 80096a0:	f7f7 f878 	bl	8000794 <__aeabi_ddiv>
 80096a4:	4652      	mov	r2, sl
 80096a6:	465b      	mov	r3, fp
 80096a8:	f7f6 ff4a 	bl	8000540 <__aeabi_dmul>
 80096ac:	4652      	mov	r2, sl
 80096ae:	465b      	mov	r3, fp
 80096b0:	f7f6 fd90 	bl	80001d4 <__adddf3>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	f7f6 fd8c 	bl	80001d4 <__adddf3>
 80096bc:	a348      	add	r3, pc, #288	; (adr r3, 80097e0 <__ieee754_asin+0x2d8>)
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	f7f6 fd85 	bl	80001d0 <__aeabi_dsub>
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	a143      	add	r1, pc, #268	; (adr r1, 80097d8 <__ieee754_asin+0x2d0>)
 80096cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096d0:	f7f6 fd7e 	bl	80001d0 <__aeabi_dsub>
 80096d4:	9b01      	ldr	r3, [sp, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	bfdc      	itt	le
 80096da:	4602      	movle	r2, r0
 80096dc:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80096e0:	4604      	mov	r4, r0
 80096e2:	460d      	mov	r5, r1
 80096e4:	bfdc      	itt	le
 80096e6:	4614      	movle	r4, r2
 80096e8:	461d      	movle	r5, r3
 80096ea:	e745      	b.n	8009578 <__ieee754_asin+0x70>
 80096ec:	ee10 2a10 	vmov	r2, s0
 80096f0:	ee10 0a10 	vmov	r0, s0
 80096f4:	462b      	mov	r3, r5
 80096f6:	4629      	mov	r1, r5
 80096f8:	f7f6 ff22 	bl	8000540 <__aeabi_dmul>
 80096fc:	a33c      	add	r3, pc, #240	; (adr r3, 80097f0 <__ieee754_asin+0x2e8>)
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	4606      	mov	r6, r0
 8009704:	460f      	mov	r7, r1
 8009706:	f7f6 ff1b 	bl	8000540 <__aeabi_dmul>
 800970a:	a33b      	add	r3, pc, #236	; (adr r3, 80097f8 <__ieee754_asin+0x2f0>)
 800970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009710:	f7f6 fd60 	bl	80001d4 <__adddf3>
 8009714:	4632      	mov	r2, r6
 8009716:	463b      	mov	r3, r7
 8009718:	f7f6 ff12 	bl	8000540 <__aeabi_dmul>
 800971c:	a338      	add	r3, pc, #224	; (adr r3, 8009800 <__ieee754_asin+0x2f8>)
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	f7f6 fd55 	bl	80001d0 <__aeabi_dsub>
 8009726:	4632      	mov	r2, r6
 8009728:	463b      	mov	r3, r7
 800972a:	f7f6 ff09 	bl	8000540 <__aeabi_dmul>
 800972e:	a336      	add	r3, pc, #216	; (adr r3, 8009808 <__ieee754_asin+0x300>)
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	f7f6 fd4e 	bl	80001d4 <__adddf3>
 8009738:	4632      	mov	r2, r6
 800973a:	463b      	mov	r3, r7
 800973c:	f7f6 ff00 	bl	8000540 <__aeabi_dmul>
 8009740:	a333      	add	r3, pc, #204	; (adr r3, 8009810 <__ieee754_asin+0x308>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f7f6 fd43 	bl	80001d0 <__aeabi_dsub>
 800974a:	4632      	mov	r2, r6
 800974c:	463b      	mov	r3, r7
 800974e:	f7f6 fef7 	bl	8000540 <__aeabi_dmul>
 8009752:	a331      	add	r3, pc, #196	; (adr r3, 8009818 <__ieee754_asin+0x310>)
 8009754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009758:	f7f6 fd3c 	bl	80001d4 <__adddf3>
 800975c:	4632      	mov	r2, r6
 800975e:	463b      	mov	r3, r7
 8009760:	f7f6 feee 	bl	8000540 <__aeabi_dmul>
 8009764:	a32e      	add	r3, pc, #184	; (adr r3, 8009820 <__ieee754_asin+0x318>)
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	4680      	mov	r8, r0
 800976c:	4689      	mov	r9, r1
 800976e:	4630      	mov	r0, r6
 8009770:	4639      	mov	r1, r7
 8009772:	f7f6 fee5 	bl	8000540 <__aeabi_dmul>
 8009776:	a32c      	add	r3, pc, #176	; (adr r3, 8009828 <__ieee754_asin+0x320>)
 8009778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977c:	f7f6 fd28 	bl	80001d0 <__aeabi_dsub>
 8009780:	4632      	mov	r2, r6
 8009782:	463b      	mov	r3, r7
 8009784:	f7f6 fedc 	bl	8000540 <__aeabi_dmul>
 8009788:	a329      	add	r3, pc, #164	; (adr r3, 8009830 <__ieee754_asin+0x328>)
 800978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978e:	f7f6 fd21 	bl	80001d4 <__adddf3>
 8009792:	4632      	mov	r2, r6
 8009794:	463b      	mov	r3, r7
 8009796:	f7f6 fed3 	bl	8000540 <__aeabi_dmul>
 800979a:	a327      	add	r3, pc, #156	; (adr r3, 8009838 <__ieee754_asin+0x330>)
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f7f6 fd16 	bl	80001d0 <__aeabi_dsub>
 80097a4:	4632      	mov	r2, r6
 80097a6:	463b      	mov	r3, r7
 80097a8:	f7f6 feca 	bl	8000540 <__aeabi_dmul>
 80097ac:	2200      	movs	r2, #0
 80097ae:	4b26      	ldr	r3, [pc, #152]	; (8009848 <__ieee754_asin+0x340>)
 80097b0:	f7f6 fd10 	bl	80001d4 <__adddf3>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	4640      	mov	r0, r8
 80097ba:	4649      	mov	r1, r9
 80097bc:	f7f6 ffea 	bl	8000794 <__aeabi_ddiv>
 80097c0:	4622      	mov	r2, r4
 80097c2:	462b      	mov	r3, r5
 80097c4:	f7f6 febc 	bl	8000540 <__aeabi_dmul>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	4620      	mov	r0, r4
 80097ce:	4629      	mov	r1, r5
 80097d0:	e6c2      	b.n	8009558 <__ieee754_asin+0x50>
 80097d2:	bf00      	nop
 80097d4:	f3af 8000 	nop.w
 80097d8:	54442d18 	.word	0x54442d18
 80097dc:	3ff921fb 	.word	0x3ff921fb
 80097e0:	33145c07 	.word	0x33145c07
 80097e4:	3c91a626 	.word	0x3c91a626
 80097e8:	8800759c 	.word	0x8800759c
 80097ec:	7e37e43c 	.word	0x7e37e43c
 80097f0:	0dfdf709 	.word	0x0dfdf709
 80097f4:	3f023de1 	.word	0x3f023de1
 80097f8:	7501b288 	.word	0x7501b288
 80097fc:	3f49efe0 	.word	0x3f49efe0
 8009800:	b5688f3b 	.word	0xb5688f3b
 8009804:	3fa48228 	.word	0x3fa48228
 8009808:	0e884455 	.word	0x0e884455
 800980c:	3fc9c155 	.word	0x3fc9c155
 8009810:	03eb6f7d 	.word	0x03eb6f7d
 8009814:	3fd4d612 	.word	0x3fd4d612
 8009818:	55555555 	.word	0x55555555
 800981c:	3fc55555 	.word	0x3fc55555
 8009820:	b12e9282 	.word	0xb12e9282
 8009824:	3fb3b8c5 	.word	0x3fb3b8c5
 8009828:	1b8d0159 	.word	0x1b8d0159
 800982c:	3fe6066c 	.word	0x3fe6066c
 8009830:	9c598ac8 	.word	0x9c598ac8
 8009834:	40002ae5 	.word	0x40002ae5
 8009838:	1c8a2d4b 	.word	0x1c8a2d4b
 800983c:	40033a27 	.word	0x40033a27
 8009840:	3fefffff 	.word	0x3fefffff
 8009844:	3fdfffff 	.word	0x3fdfffff
 8009848:	3ff00000 	.word	0x3ff00000
 800984c:	3fe00000 	.word	0x3fe00000
 8009850:	3fef3332 	.word	0x3fef3332
 8009854:	ee10 2a10 	vmov	r2, s0
 8009858:	ee10 0a10 	vmov	r0, s0
 800985c:	465b      	mov	r3, fp
 800985e:	4659      	mov	r1, fp
 8009860:	f7f6 fcb8 	bl	80001d4 <__adddf3>
 8009864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009868:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800986c:	4640      	mov	r0, r8
 800986e:	4649      	mov	r1, r9
 8009870:	f7f6 ff90 	bl	8000794 <__aeabi_ddiv>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800987c:	f7f6 fe60 	bl	8000540 <__aeabi_dmul>
 8009880:	2600      	movs	r6, #0
 8009882:	4680      	mov	r8, r0
 8009884:	4689      	mov	r9, r1
 8009886:	4632      	mov	r2, r6
 8009888:	465b      	mov	r3, fp
 800988a:	4630      	mov	r0, r6
 800988c:	4659      	mov	r1, fp
 800988e:	f7f6 fe57 	bl	8000540 <__aeabi_dmul>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	4620      	mov	r0, r4
 8009898:	4629      	mov	r1, r5
 800989a:	f7f6 fc99 	bl	80001d0 <__aeabi_dsub>
 800989e:	4632      	mov	r2, r6
 80098a0:	4604      	mov	r4, r0
 80098a2:	460d      	mov	r5, r1
 80098a4:	465b      	mov	r3, fp
 80098a6:	4650      	mov	r0, sl
 80098a8:	4659      	mov	r1, fp
 80098aa:	f7f6 fc93 	bl	80001d4 <__adddf3>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4620      	mov	r0, r4
 80098b4:	4629      	mov	r1, r5
 80098b6:	f7f6 ff6d 	bl	8000794 <__aeabi_ddiv>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	f7f6 fc89 	bl	80001d4 <__adddf3>
 80098c2:	4602      	mov	r2, r0
 80098c4:	460b      	mov	r3, r1
 80098c6:	a114      	add	r1, pc, #80	; (adr r1, 8009918 <__ieee754_asin+0x410>)
 80098c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098cc:	f7f6 fc80 	bl	80001d0 <__aeabi_dsub>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	4640      	mov	r0, r8
 80098d6:	4649      	mov	r1, r9
 80098d8:	f7f6 fc7a 	bl	80001d0 <__aeabi_dsub>
 80098dc:	465f      	mov	r7, fp
 80098de:	4604      	mov	r4, r0
 80098e0:	460d      	mov	r5, r1
 80098e2:	4632      	mov	r2, r6
 80098e4:	465b      	mov	r3, fp
 80098e6:	4630      	mov	r0, r6
 80098e8:	4639      	mov	r1, r7
 80098ea:	f7f6 fc73 	bl	80001d4 <__adddf3>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	a10b      	add	r1, pc, #44	; (adr r1, 8009920 <__ieee754_asin+0x418>)
 80098f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098f8:	f7f6 fc6a 	bl	80001d0 <__aeabi_dsub>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	4620      	mov	r0, r4
 8009902:	4629      	mov	r1, r5
 8009904:	f7f6 fc64 	bl	80001d0 <__aeabi_dsub>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	a104      	add	r1, pc, #16	; (adr r1, 8009920 <__ieee754_asin+0x418>)
 800990e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009912:	e6dd      	b.n	80096d0 <__ieee754_asin+0x1c8>
 8009914:	f3af 8000 	nop.w
 8009918:	33145c07 	.word	0x33145c07
 800991c:	3c91a626 	.word	0x3c91a626
 8009920:	54442d18 	.word	0x54442d18
 8009924:	3fe921fb 	.word	0x3fe921fb

08009928 <__ieee754_rem_pio2>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	ec57 6b10 	vmov	r6, r7, d0
 8009930:	4bc3      	ldr	r3, [pc, #780]	; (8009c40 <__ieee754_rem_pio2+0x318>)
 8009932:	b08d      	sub	sp, #52	; 0x34
 8009934:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009938:	4598      	cmp	r8, r3
 800993a:	4604      	mov	r4, r0
 800993c:	9704      	str	r7, [sp, #16]
 800993e:	dc07      	bgt.n	8009950 <__ieee754_rem_pio2+0x28>
 8009940:	2200      	movs	r2, #0
 8009942:	2300      	movs	r3, #0
 8009944:	ed84 0b00 	vstr	d0, [r4]
 8009948:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800994c:	2500      	movs	r5, #0
 800994e:	e027      	b.n	80099a0 <__ieee754_rem_pio2+0x78>
 8009950:	4bbc      	ldr	r3, [pc, #752]	; (8009c44 <__ieee754_rem_pio2+0x31c>)
 8009952:	4598      	cmp	r8, r3
 8009954:	dc75      	bgt.n	8009a42 <__ieee754_rem_pio2+0x11a>
 8009956:	9b04      	ldr	r3, [sp, #16]
 8009958:	4dbb      	ldr	r5, [pc, #748]	; (8009c48 <__ieee754_rem_pio2+0x320>)
 800995a:	2b00      	cmp	r3, #0
 800995c:	ee10 0a10 	vmov	r0, s0
 8009960:	a3a9      	add	r3, pc, #676	; (adr r3, 8009c08 <__ieee754_rem_pio2+0x2e0>)
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	4639      	mov	r1, r7
 8009968:	dd36      	ble.n	80099d8 <__ieee754_rem_pio2+0xb0>
 800996a:	f7f6 fc31 	bl	80001d0 <__aeabi_dsub>
 800996e:	45a8      	cmp	r8, r5
 8009970:	4606      	mov	r6, r0
 8009972:	460f      	mov	r7, r1
 8009974:	d018      	beq.n	80099a8 <__ieee754_rem_pio2+0x80>
 8009976:	a3a6      	add	r3, pc, #664	; (adr r3, 8009c10 <__ieee754_rem_pio2+0x2e8>)
 8009978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997c:	f7f6 fc28 	bl	80001d0 <__aeabi_dsub>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	e9c4 2300 	strd	r2, r3, [r4]
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f6 fc20 	bl	80001d0 <__aeabi_dsub>
 8009990:	a39f      	add	r3, pc, #636	; (adr r3, 8009c10 <__ieee754_rem_pio2+0x2e8>)
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	f7f6 fc1b 	bl	80001d0 <__aeabi_dsub>
 800999a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800999e:	2501      	movs	r5, #1
 80099a0:	4628      	mov	r0, r5
 80099a2:	b00d      	add	sp, #52	; 0x34
 80099a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a8:	a39b      	add	r3, pc, #620	; (adr r3, 8009c18 <__ieee754_rem_pio2+0x2f0>)
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	f7f6 fc0f 	bl	80001d0 <__aeabi_dsub>
 80099b2:	a39b      	add	r3, pc, #620	; (adr r3, 8009c20 <__ieee754_rem_pio2+0x2f8>)
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	4606      	mov	r6, r0
 80099ba:	460f      	mov	r7, r1
 80099bc:	f7f6 fc08 	bl	80001d0 <__aeabi_dsub>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	e9c4 2300 	strd	r2, r3, [r4]
 80099c8:	4630      	mov	r0, r6
 80099ca:	4639      	mov	r1, r7
 80099cc:	f7f6 fc00 	bl	80001d0 <__aeabi_dsub>
 80099d0:	a393      	add	r3, pc, #588	; (adr r3, 8009c20 <__ieee754_rem_pio2+0x2f8>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	e7de      	b.n	8009996 <__ieee754_rem_pio2+0x6e>
 80099d8:	f7f6 fbfc 	bl	80001d4 <__adddf3>
 80099dc:	45a8      	cmp	r8, r5
 80099de:	4606      	mov	r6, r0
 80099e0:	460f      	mov	r7, r1
 80099e2:	d016      	beq.n	8009a12 <__ieee754_rem_pio2+0xea>
 80099e4:	a38a      	add	r3, pc, #552	; (adr r3, 8009c10 <__ieee754_rem_pio2+0x2e8>)
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	f7f6 fbf3 	bl	80001d4 <__adddf3>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	e9c4 2300 	strd	r2, r3, [r4]
 80099f6:	4630      	mov	r0, r6
 80099f8:	4639      	mov	r1, r7
 80099fa:	f7f6 fbe9 	bl	80001d0 <__aeabi_dsub>
 80099fe:	a384      	add	r3, pc, #528	; (adr r3, 8009c10 <__ieee754_rem_pio2+0x2e8>)
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f7f6 fbe6 	bl	80001d4 <__adddf3>
 8009a08:	f04f 35ff 	mov.w	r5, #4294967295
 8009a0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a10:	e7c6      	b.n	80099a0 <__ieee754_rem_pio2+0x78>
 8009a12:	a381      	add	r3, pc, #516	; (adr r3, 8009c18 <__ieee754_rem_pio2+0x2f0>)
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	f7f6 fbdc 	bl	80001d4 <__adddf3>
 8009a1c:	a380      	add	r3, pc, #512	; (adr r3, 8009c20 <__ieee754_rem_pio2+0x2f8>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	4606      	mov	r6, r0
 8009a24:	460f      	mov	r7, r1
 8009a26:	f7f6 fbd5 	bl	80001d4 <__adddf3>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	e9c4 2300 	strd	r2, r3, [r4]
 8009a32:	4630      	mov	r0, r6
 8009a34:	4639      	mov	r1, r7
 8009a36:	f7f6 fbcb 	bl	80001d0 <__aeabi_dsub>
 8009a3a:	a379      	add	r3, pc, #484	; (adr r3, 8009c20 <__ieee754_rem_pio2+0x2f8>)
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	e7e0      	b.n	8009a04 <__ieee754_rem_pio2+0xdc>
 8009a42:	4b82      	ldr	r3, [pc, #520]	; (8009c4c <__ieee754_rem_pio2+0x324>)
 8009a44:	4598      	cmp	r8, r3
 8009a46:	f300 80d0 	bgt.w	8009bea <__ieee754_rem_pio2+0x2c2>
 8009a4a:	f000 fed7 	bl	800a7fc <fabs>
 8009a4e:	ec57 6b10 	vmov	r6, r7, d0
 8009a52:	ee10 0a10 	vmov	r0, s0
 8009a56:	a374      	add	r3, pc, #464	; (adr r3, 8009c28 <__ieee754_rem_pio2+0x300>)
 8009a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	f7f6 fd6f 	bl	8000540 <__aeabi_dmul>
 8009a62:	2200      	movs	r2, #0
 8009a64:	4b7a      	ldr	r3, [pc, #488]	; (8009c50 <__ieee754_rem_pio2+0x328>)
 8009a66:	f7f6 fbb5 	bl	80001d4 <__adddf3>
 8009a6a:	f7f7 f819 	bl	8000aa0 <__aeabi_d2iz>
 8009a6e:	4605      	mov	r5, r0
 8009a70:	f7f6 fcfc 	bl	800046c <__aeabi_i2d>
 8009a74:	a364      	add	r3, pc, #400	; (adr r3, 8009c08 <__ieee754_rem_pio2+0x2e0>)
 8009a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a7e:	f7f6 fd5f 	bl	8000540 <__aeabi_dmul>
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4630      	mov	r0, r6
 8009a88:	4639      	mov	r1, r7
 8009a8a:	f7f6 fba1 	bl	80001d0 <__aeabi_dsub>
 8009a8e:	a360      	add	r3, pc, #384	; (adr r3, 8009c10 <__ieee754_rem_pio2+0x2e8>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	4682      	mov	sl, r0
 8009a96:	468b      	mov	fp, r1
 8009a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a9c:	f7f6 fd50 	bl	8000540 <__aeabi_dmul>
 8009aa0:	2d1f      	cmp	r5, #31
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	460f      	mov	r7, r1
 8009aa6:	dc0c      	bgt.n	8009ac2 <__ieee754_rem_pio2+0x19a>
 8009aa8:	1e6a      	subs	r2, r5, #1
 8009aaa:	4b6a      	ldr	r3, [pc, #424]	; (8009c54 <__ieee754_rem_pio2+0x32c>)
 8009aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab0:	4543      	cmp	r3, r8
 8009ab2:	d006      	beq.n	8009ac2 <__ieee754_rem_pio2+0x19a>
 8009ab4:	4632      	mov	r2, r6
 8009ab6:	463b      	mov	r3, r7
 8009ab8:	4650      	mov	r0, sl
 8009aba:	4659      	mov	r1, fp
 8009abc:	f7f6 fb88 	bl	80001d0 <__aeabi_dsub>
 8009ac0:	e00e      	b.n	8009ae0 <__ieee754_rem_pio2+0x1b8>
 8009ac2:	4632      	mov	r2, r6
 8009ac4:	463b      	mov	r3, r7
 8009ac6:	4650      	mov	r0, sl
 8009ac8:	4659      	mov	r1, fp
 8009aca:	f7f6 fb81 	bl	80001d0 <__aeabi_dsub>
 8009ace:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009ad2:	9305      	str	r3, [sp, #20]
 8009ad4:	9a05      	ldr	r2, [sp, #20]
 8009ad6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	2b10      	cmp	r3, #16
 8009ade:	dc02      	bgt.n	8009ae6 <__ieee754_rem_pio2+0x1be>
 8009ae0:	e9c4 0100 	strd	r0, r1, [r4]
 8009ae4:	e039      	b.n	8009b5a <__ieee754_rem_pio2+0x232>
 8009ae6:	a34c      	add	r3, pc, #304	; (adr r3, 8009c18 <__ieee754_rem_pio2+0x2f0>)
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009af0:	f7f6 fd26 	bl	8000540 <__aeabi_dmul>
 8009af4:	4606      	mov	r6, r0
 8009af6:	460f      	mov	r7, r1
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	4650      	mov	r0, sl
 8009afe:	4659      	mov	r1, fp
 8009b00:	f7f6 fb66 	bl	80001d0 <__aeabi_dsub>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4680      	mov	r8, r0
 8009b0a:	4689      	mov	r9, r1
 8009b0c:	4650      	mov	r0, sl
 8009b0e:	4659      	mov	r1, fp
 8009b10:	f7f6 fb5e 	bl	80001d0 <__aeabi_dsub>
 8009b14:	4632      	mov	r2, r6
 8009b16:	463b      	mov	r3, r7
 8009b18:	f7f6 fb5a 	bl	80001d0 <__aeabi_dsub>
 8009b1c:	a340      	add	r3, pc, #256	; (adr r3, 8009c20 <__ieee754_rem_pio2+0x2f8>)
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	4606      	mov	r6, r0
 8009b24:	460f      	mov	r7, r1
 8009b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b2a:	f7f6 fd09 	bl	8000540 <__aeabi_dmul>
 8009b2e:	4632      	mov	r2, r6
 8009b30:	463b      	mov	r3, r7
 8009b32:	f7f6 fb4d 	bl	80001d0 <__aeabi_dsub>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	460f      	mov	r7, r1
 8009b3e:	4640      	mov	r0, r8
 8009b40:	4649      	mov	r1, r9
 8009b42:	f7f6 fb45 	bl	80001d0 <__aeabi_dsub>
 8009b46:	9a05      	ldr	r2, [sp, #20]
 8009b48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	2b31      	cmp	r3, #49	; 0x31
 8009b50:	dc20      	bgt.n	8009b94 <__ieee754_rem_pio2+0x26c>
 8009b52:	e9c4 0100 	strd	r0, r1, [r4]
 8009b56:	46c2      	mov	sl, r8
 8009b58:	46cb      	mov	fp, r9
 8009b5a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009b5e:	4650      	mov	r0, sl
 8009b60:	4642      	mov	r2, r8
 8009b62:	464b      	mov	r3, r9
 8009b64:	4659      	mov	r1, fp
 8009b66:	f7f6 fb33 	bl	80001d0 <__aeabi_dsub>
 8009b6a:	463b      	mov	r3, r7
 8009b6c:	4632      	mov	r2, r6
 8009b6e:	f7f6 fb2f 	bl	80001d0 <__aeabi_dsub>
 8009b72:	9b04      	ldr	r3, [sp, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009b7a:	f6bf af11 	bge.w	80099a0 <__ieee754_rem_pio2+0x78>
 8009b7e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009b82:	6063      	str	r3, [r4, #4]
 8009b84:	f8c4 8000 	str.w	r8, [r4]
 8009b88:	60a0      	str	r0, [r4, #8]
 8009b8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b8e:	60e3      	str	r3, [r4, #12]
 8009b90:	426d      	negs	r5, r5
 8009b92:	e705      	b.n	80099a0 <__ieee754_rem_pio2+0x78>
 8009b94:	a326      	add	r3, pc, #152	; (adr r3, 8009c30 <__ieee754_rem_pio2+0x308>)
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b9e:	f7f6 fccf 	bl	8000540 <__aeabi_dmul>
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460f      	mov	r7, r1
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4640      	mov	r0, r8
 8009bac:	4649      	mov	r1, r9
 8009bae:	f7f6 fb0f 	bl	80001d0 <__aeabi_dsub>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	4682      	mov	sl, r0
 8009bb8:	468b      	mov	fp, r1
 8009bba:	4640      	mov	r0, r8
 8009bbc:	4649      	mov	r1, r9
 8009bbe:	f7f6 fb07 	bl	80001d0 <__aeabi_dsub>
 8009bc2:	4632      	mov	r2, r6
 8009bc4:	463b      	mov	r3, r7
 8009bc6:	f7f6 fb03 	bl	80001d0 <__aeabi_dsub>
 8009bca:	a31b      	add	r3, pc, #108	; (adr r3, 8009c38 <__ieee754_rem_pio2+0x310>)
 8009bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	460f      	mov	r7, r1
 8009bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bd8:	f7f6 fcb2 	bl	8000540 <__aeabi_dmul>
 8009bdc:	4632      	mov	r2, r6
 8009bde:	463b      	mov	r3, r7
 8009be0:	f7f6 faf6 	bl	80001d0 <__aeabi_dsub>
 8009be4:	4606      	mov	r6, r0
 8009be6:	460f      	mov	r7, r1
 8009be8:	e764      	b.n	8009ab4 <__ieee754_rem_pio2+0x18c>
 8009bea:	4b1b      	ldr	r3, [pc, #108]	; (8009c58 <__ieee754_rem_pio2+0x330>)
 8009bec:	4598      	cmp	r8, r3
 8009bee:	dd35      	ble.n	8009c5c <__ieee754_rem_pio2+0x334>
 8009bf0:	ee10 2a10 	vmov	r2, s0
 8009bf4:	463b      	mov	r3, r7
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	4639      	mov	r1, r7
 8009bfa:	f7f6 fae9 	bl	80001d0 <__aeabi_dsub>
 8009bfe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009c02:	e9c4 0100 	strd	r0, r1, [r4]
 8009c06:	e6a1      	b.n	800994c <__ieee754_rem_pio2+0x24>
 8009c08:	54400000 	.word	0x54400000
 8009c0c:	3ff921fb 	.word	0x3ff921fb
 8009c10:	1a626331 	.word	0x1a626331
 8009c14:	3dd0b461 	.word	0x3dd0b461
 8009c18:	1a600000 	.word	0x1a600000
 8009c1c:	3dd0b461 	.word	0x3dd0b461
 8009c20:	2e037073 	.word	0x2e037073
 8009c24:	3ba3198a 	.word	0x3ba3198a
 8009c28:	6dc9c883 	.word	0x6dc9c883
 8009c2c:	3fe45f30 	.word	0x3fe45f30
 8009c30:	2e000000 	.word	0x2e000000
 8009c34:	3ba3198a 	.word	0x3ba3198a
 8009c38:	252049c1 	.word	0x252049c1
 8009c3c:	397b839a 	.word	0x397b839a
 8009c40:	3fe921fb 	.word	0x3fe921fb
 8009c44:	4002d97b 	.word	0x4002d97b
 8009c48:	3ff921fb 	.word	0x3ff921fb
 8009c4c:	413921fb 	.word	0x413921fb
 8009c50:	3fe00000 	.word	0x3fe00000
 8009c54:	0800acdc 	.word	0x0800acdc
 8009c58:	7fefffff 	.word	0x7fefffff
 8009c5c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009c60:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009c64:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009c68:	4630      	mov	r0, r6
 8009c6a:	460f      	mov	r7, r1
 8009c6c:	f7f6 ff18 	bl	8000aa0 <__aeabi_d2iz>
 8009c70:	f7f6 fbfc 	bl	800046c <__aeabi_i2d>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	4630      	mov	r0, r6
 8009c7a:	4639      	mov	r1, r7
 8009c7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c80:	f7f6 faa6 	bl	80001d0 <__aeabi_dsub>
 8009c84:	2200      	movs	r2, #0
 8009c86:	4b1f      	ldr	r3, [pc, #124]	; (8009d04 <__ieee754_rem_pio2+0x3dc>)
 8009c88:	f7f6 fc5a 	bl	8000540 <__aeabi_dmul>
 8009c8c:	460f      	mov	r7, r1
 8009c8e:	4606      	mov	r6, r0
 8009c90:	f7f6 ff06 	bl	8000aa0 <__aeabi_d2iz>
 8009c94:	f7f6 fbea 	bl	800046c <__aeabi_i2d>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	4639      	mov	r1, r7
 8009ca0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ca4:	f7f6 fa94 	bl	80001d0 <__aeabi_dsub>
 8009ca8:	2200      	movs	r2, #0
 8009caa:	4b16      	ldr	r3, [pc, #88]	; (8009d04 <__ieee754_rem_pio2+0x3dc>)
 8009cac:	f7f6 fc48 	bl	8000540 <__aeabi_dmul>
 8009cb0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009cb4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009cb8:	f04f 0803 	mov.w	r8, #3
 8009cbc:	2600      	movs	r6, #0
 8009cbe:	2700      	movs	r7, #0
 8009cc0:	4632      	mov	r2, r6
 8009cc2:	463b      	mov	r3, r7
 8009cc4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009cc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8009ccc:	f7f6 fea0 	bl	8000a10 <__aeabi_dcmpeq>
 8009cd0:	b9b0      	cbnz	r0, 8009d00 <__ieee754_rem_pio2+0x3d8>
 8009cd2:	4b0d      	ldr	r3, [pc, #52]	; (8009d08 <__ieee754_rem_pio2+0x3e0>)
 8009cd4:	9301      	str	r3, [sp, #4]
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	462a      	mov	r2, r5
 8009cdc:	4643      	mov	r3, r8
 8009cde:	4621      	mov	r1, r4
 8009ce0:	a806      	add	r0, sp, #24
 8009ce2:	f000 f991 	bl	800a008 <__kernel_rem_pio2>
 8009ce6:	9b04      	ldr	r3, [sp, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	4605      	mov	r5, r0
 8009cec:	f6bf ae58 	bge.w	80099a0 <__ieee754_rem_pio2+0x78>
 8009cf0:	6863      	ldr	r3, [r4, #4]
 8009cf2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009cf6:	6063      	str	r3, [r4, #4]
 8009cf8:	68e3      	ldr	r3, [r4, #12]
 8009cfa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009cfe:	e746      	b.n	8009b8e <__ieee754_rem_pio2+0x266>
 8009d00:	46d0      	mov	r8, sl
 8009d02:	e7dd      	b.n	8009cc0 <__ieee754_rem_pio2+0x398>
 8009d04:	41700000 	.word	0x41700000
 8009d08:	0800ad5c 	.word	0x0800ad5c

08009d0c <__ieee754_sqrt>:
 8009d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d10:	4955      	ldr	r1, [pc, #340]	; (8009e68 <__ieee754_sqrt+0x15c>)
 8009d12:	ec55 4b10 	vmov	r4, r5, d0
 8009d16:	43a9      	bics	r1, r5
 8009d18:	462b      	mov	r3, r5
 8009d1a:	462a      	mov	r2, r5
 8009d1c:	d112      	bne.n	8009d44 <__ieee754_sqrt+0x38>
 8009d1e:	ee10 2a10 	vmov	r2, s0
 8009d22:	ee10 0a10 	vmov	r0, s0
 8009d26:	4629      	mov	r1, r5
 8009d28:	f7f6 fc0a 	bl	8000540 <__aeabi_dmul>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4620      	mov	r0, r4
 8009d32:	4629      	mov	r1, r5
 8009d34:	f7f6 fa4e 	bl	80001d4 <__adddf3>
 8009d38:	4604      	mov	r4, r0
 8009d3a:	460d      	mov	r5, r1
 8009d3c:	ec45 4b10 	vmov	d0, r4, r5
 8009d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d44:	2d00      	cmp	r5, #0
 8009d46:	ee10 0a10 	vmov	r0, s0
 8009d4a:	4621      	mov	r1, r4
 8009d4c:	dc0f      	bgt.n	8009d6e <__ieee754_sqrt+0x62>
 8009d4e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009d52:	4330      	orrs	r0, r6
 8009d54:	d0f2      	beq.n	8009d3c <__ieee754_sqrt+0x30>
 8009d56:	b155      	cbz	r5, 8009d6e <__ieee754_sqrt+0x62>
 8009d58:	ee10 2a10 	vmov	r2, s0
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	4629      	mov	r1, r5
 8009d60:	f7f6 fa36 	bl	80001d0 <__aeabi_dsub>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	f7f6 fd14 	bl	8000794 <__aeabi_ddiv>
 8009d6c:	e7e4      	b.n	8009d38 <__ieee754_sqrt+0x2c>
 8009d6e:	151b      	asrs	r3, r3, #20
 8009d70:	d073      	beq.n	8009e5a <__ieee754_sqrt+0x14e>
 8009d72:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009d76:	07dd      	lsls	r5, r3, #31
 8009d78:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009d7c:	bf48      	it	mi
 8009d7e:	0fc8      	lsrmi	r0, r1, #31
 8009d80:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009d84:	bf44      	itt	mi
 8009d86:	0049      	lslmi	r1, r1, #1
 8009d88:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009d8c:	2500      	movs	r5, #0
 8009d8e:	1058      	asrs	r0, r3, #1
 8009d90:	0fcb      	lsrs	r3, r1, #31
 8009d92:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009d96:	0049      	lsls	r1, r1, #1
 8009d98:	2316      	movs	r3, #22
 8009d9a:	462c      	mov	r4, r5
 8009d9c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009da0:	19a7      	adds	r7, r4, r6
 8009da2:	4297      	cmp	r7, r2
 8009da4:	bfde      	ittt	le
 8009da6:	19bc      	addle	r4, r7, r6
 8009da8:	1bd2      	suble	r2, r2, r7
 8009daa:	19ad      	addle	r5, r5, r6
 8009dac:	0fcf      	lsrs	r7, r1, #31
 8009dae:	3b01      	subs	r3, #1
 8009db0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009db4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009db8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009dbc:	d1f0      	bne.n	8009da0 <__ieee754_sqrt+0x94>
 8009dbe:	f04f 0c20 	mov.w	ip, #32
 8009dc2:	469e      	mov	lr, r3
 8009dc4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009dc8:	42a2      	cmp	r2, r4
 8009dca:	eb06 070e 	add.w	r7, r6, lr
 8009dce:	dc02      	bgt.n	8009dd6 <__ieee754_sqrt+0xca>
 8009dd0:	d112      	bne.n	8009df8 <__ieee754_sqrt+0xec>
 8009dd2:	428f      	cmp	r7, r1
 8009dd4:	d810      	bhi.n	8009df8 <__ieee754_sqrt+0xec>
 8009dd6:	2f00      	cmp	r7, #0
 8009dd8:	eb07 0e06 	add.w	lr, r7, r6
 8009ddc:	da42      	bge.n	8009e64 <__ieee754_sqrt+0x158>
 8009dde:	f1be 0f00 	cmp.w	lr, #0
 8009de2:	db3f      	blt.n	8009e64 <__ieee754_sqrt+0x158>
 8009de4:	f104 0801 	add.w	r8, r4, #1
 8009de8:	1b12      	subs	r2, r2, r4
 8009dea:	428f      	cmp	r7, r1
 8009dec:	bf88      	it	hi
 8009dee:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009df2:	1bc9      	subs	r1, r1, r7
 8009df4:	4433      	add	r3, r6
 8009df6:	4644      	mov	r4, r8
 8009df8:	0052      	lsls	r2, r2, #1
 8009dfa:	f1bc 0c01 	subs.w	ip, ip, #1
 8009dfe:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009e02:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e06:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009e0a:	d1dd      	bne.n	8009dc8 <__ieee754_sqrt+0xbc>
 8009e0c:	430a      	orrs	r2, r1
 8009e0e:	d006      	beq.n	8009e1e <__ieee754_sqrt+0x112>
 8009e10:	1c5c      	adds	r4, r3, #1
 8009e12:	bf13      	iteet	ne
 8009e14:	3301      	addne	r3, #1
 8009e16:	3501      	addeq	r5, #1
 8009e18:	4663      	moveq	r3, ip
 8009e1a:	f023 0301 	bicne.w	r3, r3, #1
 8009e1e:	106a      	asrs	r2, r5, #1
 8009e20:	085b      	lsrs	r3, r3, #1
 8009e22:	07e9      	lsls	r1, r5, #31
 8009e24:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009e28:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009e2c:	bf48      	it	mi
 8009e2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009e32:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009e36:	461c      	mov	r4, r3
 8009e38:	e780      	b.n	8009d3c <__ieee754_sqrt+0x30>
 8009e3a:	0aca      	lsrs	r2, r1, #11
 8009e3c:	3815      	subs	r0, #21
 8009e3e:	0549      	lsls	r1, r1, #21
 8009e40:	2a00      	cmp	r2, #0
 8009e42:	d0fa      	beq.n	8009e3a <__ieee754_sqrt+0x12e>
 8009e44:	02d6      	lsls	r6, r2, #11
 8009e46:	d50a      	bpl.n	8009e5e <__ieee754_sqrt+0x152>
 8009e48:	f1c3 0420 	rsb	r4, r3, #32
 8009e4c:	fa21 f404 	lsr.w	r4, r1, r4
 8009e50:	1e5d      	subs	r5, r3, #1
 8009e52:	4099      	lsls	r1, r3
 8009e54:	4322      	orrs	r2, r4
 8009e56:	1b43      	subs	r3, r0, r5
 8009e58:	e78b      	b.n	8009d72 <__ieee754_sqrt+0x66>
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	e7f0      	b.n	8009e40 <__ieee754_sqrt+0x134>
 8009e5e:	0052      	lsls	r2, r2, #1
 8009e60:	3301      	adds	r3, #1
 8009e62:	e7ef      	b.n	8009e44 <__ieee754_sqrt+0x138>
 8009e64:	46a0      	mov	r8, r4
 8009e66:	e7bf      	b.n	8009de8 <__ieee754_sqrt+0xdc>
 8009e68:	7ff00000 	.word	0x7ff00000

08009e6c <__ieee754_sqrtf>:
 8009e6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009e70:	4770      	bx	lr
 8009e72:	0000      	movs	r0, r0
 8009e74:	0000      	movs	r0, r0
	...

08009e78 <__kernel_cos>:
 8009e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	ec59 8b10 	vmov	r8, r9, d0
 8009e80:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8009e84:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009e88:	ed2d 8b02 	vpush	{d8}
 8009e8c:	eeb0 8a41 	vmov.f32	s16, s2
 8009e90:	eef0 8a61 	vmov.f32	s17, s3
 8009e94:	da07      	bge.n	8009ea6 <__kernel_cos+0x2e>
 8009e96:	ee10 0a10 	vmov	r0, s0
 8009e9a:	4649      	mov	r1, r9
 8009e9c:	f7f6 fe00 	bl	8000aa0 <__aeabi_d2iz>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	f000 8089 	beq.w	8009fb8 <__kernel_cos+0x140>
 8009ea6:	4642      	mov	r2, r8
 8009ea8:	464b      	mov	r3, r9
 8009eaa:	4640      	mov	r0, r8
 8009eac:	4649      	mov	r1, r9
 8009eae:	f7f6 fb47 	bl	8000540 <__aeabi_dmul>
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	4b4e      	ldr	r3, [pc, #312]	; (8009ff0 <__kernel_cos+0x178>)
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	460d      	mov	r5, r1
 8009eba:	f7f6 fb41 	bl	8000540 <__aeabi_dmul>
 8009ebe:	a340      	add	r3, pc, #256	; (adr r3, 8009fc0 <__kernel_cos+0x148>)
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	4682      	mov	sl, r0
 8009ec6:	468b      	mov	fp, r1
 8009ec8:	4620      	mov	r0, r4
 8009eca:	4629      	mov	r1, r5
 8009ecc:	f7f6 fb38 	bl	8000540 <__aeabi_dmul>
 8009ed0:	a33d      	add	r3, pc, #244	; (adr r3, 8009fc8 <__kernel_cos+0x150>)
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f7f6 f97d 	bl	80001d4 <__adddf3>
 8009eda:	4622      	mov	r2, r4
 8009edc:	462b      	mov	r3, r5
 8009ede:	f7f6 fb2f 	bl	8000540 <__aeabi_dmul>
 8009ee2:	a33b      	add	r3, pc, #236	; (adr r3, 8009fd0 <__kernel_cos+0x158>)
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	f7f6 f972 	bl	80001d0 <__aeabi_dsub>
 8009eec:	4622      	mov	r2, r4
 8009eee:	462b      	mov	r3, r5
 8009ef0:	f7f6 fb26 	bl	8000540 <__aeabi_dmul>
 8009ef4:	a338      	add	r3, pc, #224	; (adr r3, 8009fd8 <__kernel_cos+0x160>)
 8009ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efa:	f7f6 f96b 	bl	80001d4 <__adddf3>
 8009efe:	4622      	mov	r2, r4
 8009f00:	462b      	mov	r3, r5
 8009f02:	f7f6 fb1d 	bl	8000540 <__aeabi_dmul>
 8009f06:	a336      	add	r3, pc, #216	; (adr r3, 8009fe0 <__kernel_cos+0x168>)
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	f7f6 f960 	bl	80001d0 <__aeabi_dsub>
 8009f10:	4622      	mov	r2, r4
 8009f12:	462b      	mov	r3, r5
 8009f14:	f7f6 fb14 	bl	8000540 <__aeabi_dmul>
 8009f18:	a333      	add	r3, pc, #204	; (adr r3, 8009fe8 <__kernel_cos+0x170>)
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	f7f6 f959 	bl	80001d4 <__adddf3>
 8009f22:	4622      	mov	r2, r4
 8009f24:	462b      	mov	r3, r5
 8009f26:	f7f6 fb0b 	bl	8000540 <__aeabi_dmul>
 8009f2a:	4622      	mov	r2, r4
 8009f2c:	462b      	mov	r3, r5
 8009f2e:	f7f6 fb07 	bl	8000540 <__aeabi_dmul>
 8009f32:	ec53 2b18 	vmov	r2, r3, d8
 8009f36:	4604      	mov	r4, r0
 8009f38:	460d      	mov	r5, r1
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	f7f6 faff 	bl	8000540 <__aeabi_dmul>
 8009f42:	460b      	mov	r3, r1
 8009f44:	4602      	mov	r2, r0
 8009f46:	4629      	mov	r1, r5
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f7f6 f941 	bl	80001d0 <__aeabi_dsub>
 8009f4e:	4b29      	ldr	r3, [pc, #164]	; (8009ff4 <__kernel_cos+0x17c>)
 8009f50:	429e      	cmp	r6, r3
 8009f52:	4680      	mov	r8, r0
 8009f54:	4689      	mov	r9, r1
 8009f56:	dc11      	bgt.n	8009f7c <__kernel_cos+0x104>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4650      	mov	r0, sl
 8009f5e:	4659      	mov	r1, fp
 8009f60:	f7f6 f936 	bl	80001d0 <__aeabi_dsub>
 8009f64:	460b      	mov	r3, r1
 8009f66:	4924      	ldr	r1, [pc, #144]	; (8009ff8 <__kernel_cos+0x180>)
 8009f68:	4602      	mov	r2, r0
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	f7f6 f930 	bl	80001d0 <__aeabi_dsub>
 8009f70:	ecbd 8b02 	vpop	{d8}
 8009f74:	ec41 0b10 	vmov	d0, r0, r1
 8009f78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7c:	4b1f      	ldr	r3, [pc, #124]	; (8009ffc <__kernel_cos+0x184>)
 8009f7e:	491e      	ldr	r1, [pc, #120]	; (8009ff8 <__kernel_cos+0x180>)
 8009f80:	429e      	cmp	r6, r3
 8009f82:	bfcc      	ite	gt
 8009f84:	4d1e      	ldrgt	r5, [pc, #120]	; (800a000 <__kernel_cos+0x188>)
 8009f86:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009f8a:	2400      	movs	r4, #0
 8009f8c:	4622      	mov	r2, r4
 8009f8e:	462b      	mov	r3, r5
 8009f90:	2000      	movs	r0, #0
 8009f92:	f7f6 f91d 	bl	80001d0 <__aeabi_dsub>
 8009f96:	4622      	mov	r2, r4
 8009f98:	4606      	mov	r6, r0
 8009f9a:	460f      	mov	r7, r1
 8009f9c:	462b      	mov	r3, r5
 8009f9e:	4650      	mov	r0, sl
 8009fa0:	4659      	mov	r1, fp
 8009fa2:	f7f6 f915 	bl	80001d0 <__aeabi_dsub>
 8009fa6:	4642      	mov	r2, r8
 8009fa8:	464b      	mov	r3, r9
 8009faa:	f7f6 f911 	bl	80001d0 <__aeabi_dsub>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	e7d9      	b.n	8009f6c <__kernel_cos+0xf4>
 8009fb8:	2000      	movs	r0, #0
 8009fba:	490f      	ldr	r1, [pc, #60]	; (8009ff8 <__kernel_cos+0x180>)
 8009fbc:	e7d8      	b.n	8009f70 <__kernel_cos+0xf8>
 8009fbe:	bf00      	nop
 8009fc0:	be8838d4 	.word	0xbe8838d4
 8009fc4:	bda8fae9 	.word	0xbda8fae9
 8009fc8:	bdb4b1c4 	.word	0xbdb4b1c4
 8009fcc:	3e21ee9e 	.word	0x3e21ee9e
 8009fd0:	809c52ad 	.word	0x809c52ad
 8009fd4:	3e927e4f 	.word	0x3e927e4f
 8009fd8:	19cb1590 	.word	0x19cb1590
 8009fdc:	3efa01a0 	.word	0x3efa01a0
 8009fe0:	16c15177 	.word	0x16c15177
 8009fe4:	3f56c16c 	.word	0x3f56c16c
 8009fe8:	5555554c 	.word	0x5555554c
 8009fec:	3fa55555 	.word	0x3fa55555
 8009ff0:	3fe00000 	.word	0x3fe00000
 8009ff4:	3fd33332 	.word	0x3fd33332
 8009ff8:	3ff00000 	.word	0x3ff00000
 8009ffc:	3fe90000 	.word	0x3fe90000
 800a000:	3fd20000 	.word	0x3fd20000
 800a004:	00000000 	.word	0x00000000

0800a008 <__kernel_rem_pio2>:
 800a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00c:	ed2d 8b02 	vpush	{d8}
 800a010:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a014:	1ed4      	subs	r4, r2, #3
 800a016:	9308      	str	r3, [sp, #32]
 800a018:	9101      	str	r1, [sp, #4]
 800a01a:	4bc5      	ldr	r3, [pc, #788]	; (800a330 <__kernel_rem_pio2+0x328>)
 800a01c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a01e:	9009      	str	r0, [sp, #36]	; 0x24
 800a020:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a024:	9304      	str	r3, [sp, #16]
 800a026:	9b08      	ldr	r3, [sp, #32]
 800a028:	3b01      	subs	r3, #1
 800a02a:	9307      	str	r3, [sp, #28]
 800a02c:	2318      	movs	r3, #24
 800a02e:	fb94 f4f3 	sdiv	r4, r4, r3
 800a032:	f06f 0317 	mvn.w	r3, #23
 800a036:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a03a:	fb04 3303 	mla	r3, r4, r3, r3
 800a03e:	eb03 0a02 	add.w	sl, r3, r2
 800a042:	9b04      	ldr	r3, [sp, #16]
 800a044:	9a07      	ldr	r2, [sp, #28]
 800a046:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a320 <__kernel_rem_pio2+0x318>
 800a04a:	eb03 0802 	add.w	r8, r3, r2
 800a04e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a050:	1aa7      	subs	r7, r4, r2
 800a052:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a056:	ae22      	add	r6, sp, #136	; 0x88
 800a058:	2500      	movs	r5, #0
 800a05a:	4545      	cmp	r5, r8
 800a05c:	dd13      	ble.n	800a086 <__kernel_rem_pio2+0x7e>
 800a05e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800a320 <__kernel_rem_pio2+0x318>
 800a062:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a066:	2600      	movs	r6, #0
 800a068:	9b04      	ldr	r3, [sp, #16]
 800a06a:	429e      	cmp	r6, r3
 800a06c:	dc32      	bgt.n	800a0d4 <__kernel_rem_pio2+0xcc>
 800a06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a070:	9302      	str	r3, [sp, #8]
 800a072:	9b08      	ldr	r3, [sp, #32]
 800a074:	199d      	adds	r5, r3, r6
 800a076:	ab22      	add	r3, sp, #136	; 0x88
 800a078:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a07c:	9306      	str	r3, [sp, #24]
 800a07e:	ec59 8b18 	vmov	r8, r9, d8
 800a082:	2700      	movs	r7, #0
 800a084:	e01f      	b.n	800a0c6 <__kernel_rem_pio2+0xbe>
 800a086:	42ef      	cmn	r7, r5
 800a088:	d407      	bmi.n	800a09a <__kernel_rem_pio2+0x92>
 800a08a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a08e:	f7f6 f9ed 	bl	800046c <__aeabi_i2d>
 800a092:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a096:	3501      	adds	r5, #1
 800a098:	e7df      	b.n	800a05a <__kernel_rem_pio2+0x52>
 800a09a:	ec51 0b18 	vmov	r0, r1, d8
 800a09e:	e7f8      	b.n	800a092 <__kernel_rem_pio2+0x8a>
 800a0a0:	9906      	ldr	r1, [sp, #24]
 800a0a2:	9d02      	ldr	r5, [sp, #8]
 800a0a4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a0a8:	9106      	str	r1, [sp, #24]
 800a0aa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a0ae:	9502      	str	r5, [sp, #8]
 800a0b0:	f7f6 fa46 	bl	8000540 <__aeabi_dmul>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	4649      	mov	r1, r9
 800a0bc:	f7f6 f88a 	bl	80001d4 <__adddf3>
 800a0c0:	3701      	adds	r7, #1
 800a0c2:	4680      	mov	r8, r0
 800a0c4:	4689      	mov	r9, r1
 800a0c6:	9b07      	ldr	r3, [sp, #28]
 800a0c8:	429f      	cmp	r7, r3
 800a0ca:	dde9      	ble.n	800a0a0 <__kernel_rem_pio2+0x98>
 800a0cc:	e8eb 8902 	strd	r8, r9, [fp], #8
 800a0d0:	3601      	adds	r6, #1
 800a0d2:	e7c9      	b.n	800a068 <__kernel_rem_pio2+0x60>
 800a0d4:	9b04      	ldr	r3, [sp, #16]
 800a0d6:	aa0e      	add	r2, sp, #56	; 0x38
 800a0d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0dc:	930c      	str	r3, [sp, #48]	; 0x30
 800a0de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a0e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a0e4:	9c04      	ldr	r4, [sp, #16]
 800a0e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0e8:	ab9a      	add	r3, sp, #616	; 0x268
 800a0ea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800a0ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0f6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a0fa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a0fe:	ab9a      	add	r3, sp, #616	; 0x268
 800a100:	445b      	add	r3, fp
 800a102:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800a106:	2500      	movs	r5, #0
 800a108:	1b63      	subs	r3, r4, r5
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	dc78      	bgt.n	800a200 <__kernel_rem_pio2+0x1f8>
 800a10e:	4650      	mov	r0, sl
 800a110:	ec49 8b10 	vmov	d0, r8, r9
 800a114:	f000 fc0c 	bl	800a930 <scalbn>
 800a118:	ec57 6b10 	vmov	r6, r7, d0
 800a11c:	2200      	movs	r2, #0
 800a11e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a122:	ee10 0a10 	vmov	r0, s0
 800a126:	4639      	mov	r1, r7
 800a128:	f7f6 fa0a 	bl	8000540 <__aeabi_dmul>
 800a12c:	ec41 0b10 	vmov	d0, r0, r1
 800a130:	f000 fb6e 	bl	800a810 <floor>
 800a134:	2200      	movs	r2, #0
 800a136:	ec51 0b10 	vmov	r0, r1, d0
 800a13a:	4b7e      	ldr	r3, [pc, #504]	; (800a334 <__kernel_rem_pio2+0x32c>)
 800a13c:	f7f6 fa00 	bl	8000540 <__aeabi_dmul>
 800a140:	4602      	mov	r2, r0
 800a142:	460b      	mov	r3, r1
 800a144:	4630      	mov	r0, r6
 800a146:	4639      	mov	r1, r7
 800a148:	f7f6 f842 	bl	80001d0 <__aeabi_dsub>
 800a14c:	460f      	mov	r7, r1
 800a14e:	4606      	mov	r6, r0
 800a150:	f7f6 fca6 	bl	8000aa0 <__aeabi_d2iz>
 800a154:	9006      	str	r0, [sp, #24]
 800a156:	f7f6 f989 	bl	800046c <__aeabi_i2d>
 800a15a:	4602      	mov	r2, r0
 800a15c:	460b      	mov	r3, r1
 800a15e:	4630      	mov	r0, r6
 800a160:	4639      	mov	r1, r7
 800a162:	f7f6 f835 	bl	80001d0 <__aeabi_dsub>
 800a166:	f1ba 0f00 	cmp.w	sl, #0
 800a16a:	4606      	mov	r6, r0
 800a16c:	460f      	mov	r7, r1
 800a16e:	dd6c      	ble.n	800a24a <__kernel_rem_pio2+0x242>
 800a170:	1e62      	subs	r2, r4, #1
 800a172:	ab0e      	add	r3, sp, #56	; 0x38
 800a174:	f1ca 0118 	rsb	r1, sl, #24
 800a178:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a17c:	9d06      	ldr	r5, [sp, #24]
 800a17e:	fa40 f301 	asr.w	r3, r0, r1
 800a182:	441d      	add	r5, r3
 800a184:	408b      	lsls	r3, r1
 800a186:	1ac0      	subs	r0, r0, r3
 800a188:	ab0e      	add	r3, sp, #56	; 0x38
 800a18a:	9506      	str	r5, [sp, #24]
 800a18c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a190:	f1ca 0317 	rsb	r3, sl, #23
 800a194:	fa40 f303 	asr.w	r3, r0, r3
 800a198:	9302      	str	r3, [sp, #8]
 800a19a:	9b02      	ldr	r3, [sp, #8]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	dd62      	ble.n	800a266 <__kernel_rem_pio2+0x25e>
 800a1a0:	9b06      	ldr	r3, [sp, #24]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	9306      	str	r3, [sp, #24]
 800a1a8:	4615      	mov	r5, r2
 800a1aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a1ae:	4294      	cmp	r4, r2
 800a1b0:	f300 8095 	bgt.w	800a2de <__kernel_rem_pio2+0x2d6>
 800a1b4:	f1ba 0f00 	cmp.w	sl, #0
 800a1b8:	dd07      	ble.n	800a1ca <__kernel_rem_pio2+0x1c2>
 800a1ba:	f1ba 0f01 	cmp.w	sl, #1
 800a1be:	f000 80a2 	beq.w	800a306 <__kernel_rem_pio2+0x2fe>
 800a1c2:	f1ba 0f02 	cmp.w	sl, #2
 800a1c6:	f000 80c1 	beq.w	800a34c <__kernel_rem_pio2+0x344>
 800a1ca:	9b02      	ldr	r3, [sp, #8]
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d14a      	bne.n	800a266 <__kernel_rem_pio2+0x25e>
 800a1d0:	4632      	mov	r2, r6
 800a1d2:	463b      	mov	r3, r7
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	4958      	ldr	r1, [pc, #352]	; (800a338 <__kernel_rem_pio2+0x330>)
 800a1d8:	f7f5 fffa 	bl	80001d0 <__aeabi_dsub>
 800a1dc:	4606      	mov	r6, r0
 800a1de:	460f      	mov	r7, r1
 800a1e0:	2d00      	cmp	r5, #0
 800a1e2:	d040      	beq.n	800a266 <__kernel_rem_pio2+0x25e>
 800a1e4:	4650      	mov	r0, sl
 800a1e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a328 <__kernel_rem_pio2+0x320>
 800a1ea:	f000 fba1 	bl	800a930 <scalbn>
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	ec53 2b10 	vmov	r2, r3, d0
 800a1f6:	f7f5 ffeb 	bl	80001d0 <__aeabi_dsub>
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	460f      	mov	r7, r1
 800a1fe:	e032      	b.n	800a266 <__kernel_rem_pio2+0x25e>
 800a200:	2200      	movs	r2, #0
 800a202:	4b4e      	ldr	r3, [pc, #312]	; (800a33c <__kernel_rem_pio2+0x334>)
 800a204:	4640      	mov	r0, r8
 800a206:	4649      	mov	r1, r9
 800a208:	f7f6 f99a 	bl	8000540 <__aeabi_dmul>
 800a20c:	f7f6 fc48 	bl	8000aa0 <__aeabi_d2iz>
 800a210:	f7f6 f92c 	bl	800046c <__aeabi_i2d>
 800a214:	2200      	movs	r2, #0
 800a216:	4b4a      	ldr	r3, [pc, #296]	; (800a340 <__kernel_rem_pio2+0x338>)
 800a218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a21c:	f7f6 f990 	bl	8000540 <__aeabi_dmul>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4640      	mov	r0, r8
 800a226:	4649      	mov	r1, r9
 800a228:	f7f5 ffd2 	bl	80001d0 <__aeabi_dsub>
 800a22c:	f7f6 fc38 	bl	8000aa0 <__aeabi_d2iz>
 800a230:	ab0e      	add	r3, sp, #56	; 0x38
 800a232:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a236:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a23a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a23e:	f7f5 ffc9 	bl	80001d4 <__adddf3>
 800a242:	3501      	adds	r5, #1
 800a244:	4680      	mov	r8, r0
 800a246:	4689      	mov	r9, r1
 800a248:	e75e      	b.n	800a108 <__kernel_rem_pio2+0x100>
 800a24a:	d105      	bne.n	800a258 <__kernel_rem_pio2+0x250>
 800a24c:	1e63      	subs	r3, r4, #1
 800a24e:	aa0e      	add	r2, sp, #56	; 0x38
 800a250:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a254:	15c3      	asrs	r3, r0, #23
 800a256:	e79f      	b.n	800a198 <__kernel_rem_pio2+0x190>
 800a258:	2200      	movs	r2, #0
 800a25a:	4b3a      	ldr	r3, [pc, #232]	; (800a344 <__kernel_rem_pio2+0x33c>)
 800a25c:	f7f6 fbf6 	bl	8000a4c <__aeabi_dcmpge>
 800a260:	2800      	cmp	r0, #0
 800a262:	d139      	bne.n	800a2d8 <__kernel_rem_pio2+0x2d0>
 800a264:	9002      	str	r0, [sp, #8]
 800a266:	2200      	movs	r2, #0
 800a268:	2300      	movs	r3, #0
 800a26a:	4630      	mov	r0, r6
 800a26c:	4639      	mov	r1, r7
 800a26e:	f7f6 fbcf 	bl	8000a10 <__aeabi_dcmpeq>
 800a272:	2800      	cmp	r0, #0
 800a274:	f000 80c7 	beq.w	800a406 <__kernel_rem_pio2+0x3fe>
 800a278:	1e65      	subs	r5, r4, #1
 800a27a:	462b      	mov	r3, r5
 800a27c:	2200      	movs	r2, #0
 800a27e:	9904      	ldr	r1, [sp, #16]
 800a280:	428b      	cmp	r3, r1
 800a282:	da6a      	bge.n	800a35a <__kernel_rem_pio2+0x352>
 800a284:	2a00      	cmp	r2, #0
 800a286:	f000 8088 	beq.w	800a39a <__kernel_rem_pio2+0x392>
 800a28a:	ab0e      	add	r3, sp, #56	; 0x38
 800a28c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a290:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 80b4 	beq.w	800a402 <__kernel_rem_pio2+0x3fa>
 800a29a:	4650      	mov	r0, sl
 800a29c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800a328 <__kernel_rem_pio2+0x320>
 800a2a0:	f000 fb46 	bl	800a930 <scalbn>
 800a2a4:	00ec      	lsls	r4, r5, #3
 800a2a6:	ab72      	add	r3, sp, #456	; 0x1c8
 800a2a8:	191e      	adds	r6, r3, r4
 800a2aa:	ec59 8b10 	vmov	r8, r9, d0
 800a2ae:	f106 0a08 	add.w	sl, r6, #8
 800a2b2:	462f      	mov	r7, r5
 800a2b4:	2f00      	cmp	r7, #0
 800a2b6:	f280 80df 	bge.w	800a478 <__kernel_rem_pio2+0x470>
 800a2ba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800a320 <__kernel_rem_pio2+0x318>
 800a2be:	f04f 0a00 	mov.w	sl, #0
 800a2c2:	eba5 030a 	sub.w	r3, r5, sl
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f2c0 810a 	blt.w	800a4e0 <__kernel_rem_pio2+0x4d8>
 800a2cc:	f8df b078 	ldr.w	fp, [pc, #120]	; 800a348 <__kernel_rem_pio2+0x340>
 800a2d0:	ec59 8b18 	vmov	r8, r9, d8
 800a2d4:	2700      	movs	r7, #0
 800a2d6:	e0f5      	b.n	800a4c4 <__kernel_rem_pio2+0x4bc>
 800a2d8:	2302      	movs	r3, #2
 800a2da:	9302      	str	r3, [sp, #8]
 800a2dc:	e760      	b.n	800a1a0 <__kernel_rem_pio2+0x198>
 800a2de:	ab0e      	add	r3, sp, #56	; 0x38
 800a2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e4:	b94d      	cbnz	r5, 800a2fa <__kernel_rem_pio2+0x2f2>
 800a2e6:	b12b      	cbz	r3, 800a2f4 <__kernel_rem_pio2+0x2ec>
 800a2e8:	a80e      	add	r0, sp, #56	; 0x38
 800a2ea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a2ee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	3201      	adds	r2, #1
 800a2f6:	461d      	mov	r5, r3
 800a2f8:	e759      	b.n	800a1ae <__kernel_rem_pio2+0x1a6>
 800a2fa:	a80e      	add	r0, sp, #56	; 0x38
 800a2fc:	1acb      	subs	r3, r1, r3
 800a2fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a302:	462b      	mov	r3, r5
 800a304:	e7f6      	b.n	800a2f4 <__kernel_rem_pio2+0x2ec>
 800a306:	1e62      	subs	r2, r4, #1
 800a308:	ab0e      	add	r3, sp, #56	; 0x38
 800a30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a30e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a312:	a90e      	add	r1, sp, #56	; 0x38
 800a314:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a318:	e757      	b.n	800a1ca <__kernel_rem_pio2+0x1c2>
 800a31a:	bf00      	nop
 800a31c:	f3af 8000 	nop.w
	...
 800a32c:	3ff00000 	.word	0x3ff00000
 800a330:	0800aea8 	.word	0x0800aea8
 800a334:	40200000 	.word	0x40200000
 800a338:	3ff00000 	.word	0x3ff00000
 800a33c:	3e700000 	.word	0x3e700000
 800a340:	41700000 	.word	0x41700000
 800a344:	3fe00000 	.word	0x3fe00000
 800a348:	0800ae68 	.word	0x0800ae68
 800a34c:	1e62      	subs	r2, r4, #1
 800a34e:	ab0e      	add	r3, sp, #56	; 0x38
 800a350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a354:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a358:	e7db      	b.n	800a312 <__kernel_rem_pio2+0x30a>
 800a35a:	a90e      	add	r1, sp, #56	; 0x38
 800a35c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a360:	3b01      	subs	r3, #1
 800a362:	430a      	orrs	r2, r1
 800a364:	e78b      	b.n	800a27e <__kernel_rem_pio2+0x276>
 800a366:	3301      	adds	r3, #1
 800a368:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a36c:	2900      	cmp	r1, #0
 800a36e:	d0fa      	beq.n	800a366 <__kernel_rem_pio2+0x35e>
 800a370:	9a08      	ldr	r2, [sp, #32]
 800a372:	4422      	add	r2, r4
 800a374:	00d2      	lsls	r2, r2, #3
 800a376:	a922      	add	r1, sp, #136	; 0x88
 800a378:	18e3      	adds	r3, r4, r3
 800a37a:	9206      	str	r2, [sp, #24]
 800a37c:	440a      	add	r2, r1
 800a37e:	9302      	str	r3, [sp, #8]
 800a380:	f10b 0108 	add.w	r1, fp, #8
 800a384:	f102 0308 	add.w	r3, r2, #8
 800a388:	1c66      	adds	r6, r4, #1
 800a38a:	910a      	str	r1, [sp, #40]	; 0x28
 800a38c:	2500      	movs	r5, #0
 800a38e:	930d      	str	r3, [sp, #52]	; 0x34
 800a390:	9b02      	ldr	r3, [sp, #8]
 800a392:	42b3      	cmp	r3, r6
 800a394:	da04      	bge.n	800a3a0 <__kernel_rem_pio2+0x398>
 800a396:	461c      	mov	r4, r3
 800a398:	e6a6      	b.n	800a0e8 <__kernel_rem_pio2+0xe0>
 800a39a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a39c:	2301      	movs	r3, #1
 800a39e:	e7e3      	b.n	800a368 <__kernel_rem_pio2+0x360>
 800a3a0:	9b06      	ldr	r3, [sp, #24]
 800a3a2:	18ef      	adds	r7, r5, r3
 800a3a4:	ab22      	add	r3, sp, #136	; 0x88
 800a3a6:	441f      	add	r7, r3
 800a3a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a3ae:	f7f6 f85d 	bl	800046c <__aeabi_i2d>
 800a3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b4:	461c      	mov	r4, r3
 800a3b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3b8:	e9c7 0100 	strd	r0, r1, [r7]
 800a3bc:	eb03 0b05 	add.w	fp, r3, r5
 800a3c0:	2700      	movs	r7, #0
 800a3c2:	f04f 0800 	mov.w	r8, #0
 800a3c6:	f04f 0900 	mov.w	r9, #0
 800a3ca:	9b07      	ldr	r3, [sp, #28]
 800a3cc:	429f      	cmp	r7, r3
 800a3ce:	dd08      	ble.n	800a3e2 <__kernel_rem_pio2+0x3da>
 800a3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d2:	aa72      	add	r2, sp, #456	; 0x1c8
 800a3d4:	18eb      	adds	r3, r5, r3
 800a3d6:	4413      	add	r3, r2
 800a3d8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800a3dc:	3601      	adds	r6, #1
 800a3de:	3508      	adds	r5, #8
 800a3e0:	e7d6      	b.n	800a390 <__kernel_rem_pio2+0x388>
 800a3e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a3e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a3ea:	f7f6 f8a9 	bl	8000540 <__aeabi_dmul>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4640      	mov	r0, r8
 800a3f4:	4649      	mov	r1, r9
 800a3f6:	f7f5 feed 	bl	80001d4 <__adddf3>
 800a3fa:	3701      	adds	r7, #1
 800a3fc:	4680      	mov	r8, r0
 800a3fe:	4689      	mov	r9, r1
 800a400:	e7e3      	b.n	800a3ca <__kernel_rem_pio2+0x3c2>
 800a402:	3d01      	subs	r5, #1
 800a404:	e741      	b.n	800a28a <__kernel_rem_pio2+0x282>
 800a406:	f1ca 0000 	rsb	r0, sl, #0
 800a40a:	ec47 6b10 	vmov	d0, r6, r7
 800a40e:	f000 fa8f 	bl	800a930 <scalbn>
 800a412:	ec57 6b10 	vmov	r6, r7, d0
 800a416:	2200      	movs	r2, #0
 800a418:	4b99      	ldr	r3, [pc, #612]	; (800a680 <__kernel_rem_pio2+0x678>)
 800a41a:	ee10 0a10 	vmov	r0, s0
 800a41e:	4639      	mov	r1, r7
 800a420:	f7f6 fb14 	bl	8000a4c <__aeabi_dcmpge>
 800a424:	b1f8      	cbz	r0, 800a466 <__kernel_rem_pio2+0x45e>
 800a426:	2200      	movs	r2, #0
 800a428:	4b96      	ldr	r3, [pc, #600]	; (800a684 <__kernel_rem_pio2+0x67c>)
 800a42a:	4630      	mov	r0, r6
 800a42c:	4639      	mov	r1, r7
 800a42e:	f7f6 f887 	bl	8000540 <__aeabi_dmul>
 800a432:	f7f6 fb35 	bl	8000aa0 <__aeabi_d2iz>
 800a436:	4680      	mov	r8, r0
 800a438:	f7f6 f818 	bl	800046c <__aeabi_i2d>
 800a43c:	2200      	movs	r2, #0
 800a43e:	4b90      	ldr	r3, [pc, #576]	; (800a680 <__kernel_rem_pio2+0x678>)
 800a440:	f7f6 f87e 	bl	8000540 <__aeabi_dmul>
 800a444:	460b      	mov	r3, r1
 800a446:	4602      	mov	r2, r0
 800a448:	4639      	mov	r1, r7
 800a44a:	4630      	mov	r0, r6
 800a44c:	f7f5 fec0 	bl	80001d0 <__aeabi_dsub>
 800a450:	f7f6 fb26 	bl	8000aa0 <__aeabi_d2iz>
 800a454:	1c65      	adds	r5, r4, #1
 800a456:	ab0e      	add	r3, sp, #56	; 0x38
 800a458:	f10a 0a18 	add.w	sl, sl, #24
 800a45c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a460:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a464:	e719      	b.n	800a29a <__kernel_rem_pio2+0x292>
 800a466:	4630      	mov	r0, r6
 800a468:	4639      	mov	r1, r7
 800a46a:	f7f6 fb19 	bl	8000aa0 <__aeabi_d2iz>
 800a46e:	ab0e      	add	r3, sp, #56	; 0x38
 800a470:	4625      	mov	r5, r4
 800a472:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a476:	e710      	b.n	800a29a <__kernel_rem_pio2+0x292>
 800a478:	ab0e      	add	r3, sp, #56	; 0x38
 800a47a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a47e:	f7f5 fff5 	bl	800046c <__aeabi_i2d>
 800a482:	4642      	mov	r2, r8
 800a484:	464b      	mov	r3, r9
 800a486:	f7f6 f85b 	bl	8000540 <__aeabi_dmul>
 800a48a:	2200      	movs	r2, #0
 800a48c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a490:	4b7c      	ldr	r3, [pc, #496]	; (800a684 <__kernel_rem_pio2+0x67c>)
 800a492:	4640      	mov	r0, r8
 800a494:	4649      	mov	r1, r9
 800a496:	f7f6 f853 	bl	8000540 <__aeabi_dmul>
 800a49a:	3f01      	subs	r7, #1
 800a49c:	4680      	mov	r8, r0
 800a49e:	4689      	mov	r9, r1
 800a4a0:	e708      	b.n	800a2b4 <__kernel_rem_pio2+0x2ac>
 800a4a2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a4ae:	f7f6 f847 	bl	8000540 <__aeabi_dmul>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4640      	mov	r0, r8
 800a4b8:	4649      	mov	r1, r9
 800a4ba:	f7f5 fe8b 	bl	80001d4 <__adddf3>
 800a4be:	3701      	adds	r7, #1
 800a4c0:	4680      	mov	r8, r0
 800a4c2:	4689      	mov	r9, r1
 800a4c4:	9b04      	ldr	r3, [sp, #16]
 800a4c6:	429f      	cmp	r7, r3
 800a4c8:	dc01      	bgt.n	800a4ce <__kernel_rem_pio2+0x4c6>
 800a4ca:	45ba      	cmp	sl, r7
 800a4cc:	dae9      	bge.n	800a4a2 <__kernel_rem_pio2+0x49a>
 800a4ce:	ab4a      	add	r3, sp, #296	; 0x128
 800a4d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a4d4:	e9c3 8900 	strd	r8, r9, [r3]
 800a4d8:	f10a 0a01 	add.w	sl, sl, #1
 800a4dc:	3e08      	subs	r6, #8
 800a4de:	e6f0      	b.n	800a2c2 <__kernel_rem_pio2+0x2ba>
 800a4e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a4e2:	2b03      	cmp	r3, #3
 800a4e4:	d85b      	bhi.n	800a59e <__kernel_rem_pio2+0x596>
 800a4e6:	e8df f003 	tbb	[pc, r3]
 800a4ea:	264a      	.short	0x264a
 800a4ec:	0226      	.short	0x0226
 800a4ee:	ab9a      	add	r3, sp, #616	; 0x268
 800a4f0:	441c      	add	r4, r3
 800a4f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a4f6:	46a2      	mov	sl, r4
 800a4f8:	46ab      	mov	fp, r5
 800a4fa:	f1bb 0f00 	cmp.w	fp, #0
 800a4fe:	dc6c      	bgt.n	800a5da <__kernel_rem_pio2+0x5d2>
 800a500:	46a2      	mov	sl, r4
 800a502:	46ab      	mov	fp, r5
 800a504:	f1bb 0f01 	cmp.w	fp, #1
 800a508:	f300 8086 	bgt.w	800a618 <__kernel_rem_pio2+0x610>
 800a50c:	2000      	movs	r0, #0
 800a50e:	2100      	movs	r1, #0
 800a510:	2d01      	cmp	r5, #1
 800a512:	f300 80a0 	bgt.w	800a656 <__kernel_rem_pio2+0x64e>
 800a516:	9b02      	ldr	r3, [sp, #8]
 800a518:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a51c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800a520:	2b00      	cmp	r3, #0
 800a522:	f040 809e 	bne.w	800a662 <__kernel_rem_pio2+0x65a>
 800a526:	9b01      	ldr	r3, [sp, #4]
 800a528:	e9c3 7800 	strd	r7, r8, [r3]
 800a52c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a530:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a534:	e033      	b.n	800a59e <__kernel_rem_pio2+0x596>
 800a536:	3408      	adds	r4, #8
 800a538:	ab4a      	add	r3, sp, #296	; 0x128
 800a53a:	441c      	add	r4, r3
 800a53c:	462e      	mov	r6, r5
 800a53e:	2000      	movs	r0, #0
 800a540:	2100      	movs	r1, #0
 800a542:	2e00      	cmp	r6, #0
 800a544:	da3a      	bge.n	800a5bc <__kernel_rem_pio2+0x5b4>
 800a546:	9b02      	ldr	r3, [sp, #8]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d03d      	beq.n	800a5c8 <__kernel_rem_pio2+0x5c0>
 800a54c:	4602      	mov	r2, r0
 800a54e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a552:	9c01      	ldr	r4, [sp, #4]
 800a554:	e9c4 2300 	strd	r2, r3, [r4]
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a560:	f7f5 fe36 	bl	80001d0 <__aeabi_dsub>
 800a564:	ae4c      	add	r6, sp, #304	; 0x130
 800a566:	2401      	movs	r4, #1
 800a568:	42a5      	cmp	r5, r4
 800a56a:	da30      	bge.n	800a5ce <__kernel_rem_pio2+0x5c6>
 800a56c:	9b02      	ldr	r3, [sp, #8]
 800a56e:	b113      	cbz	r3, 800a576 <__kernel_rem_pio2+0x56e>
 800a570:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a574:	4619      	mov	r1, r3
 800a576:	9b01      	ldr	r3, [sp, #4]
 800a578:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a57c:	e00f      	b.n	800a59e <__kernel_rem_pio2+0x596>
 800a57e:	ab9a      	add	r3, sp, #616	; 0x268
 800a580:	441c      	add	r4, r3
 800a582:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a586:	2000      	movs	r0, #0
 800a588:	2100      	movs	r1, #0
 800a58a:	2d00      	cmp	r5, #0
 800a58c:	da10      	bge.n	800a5b0 <__kernel_rem_pio2+0x5a8>
 800a58e:	9b02      	ldr	r3, [sp, #8]
 800a590:	b113      	cbz	r3, 800a598 <__kernel_rem_pio2+0x590>
 800a592:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a596:	4619      	mov	r1, r3
 800a598:	9b01      	ldr	r3, [sp, #4]
 800a59a:	e9c3 0100 	strd	r0, r1, [r3]
 800a59e:	9b06      	ldr	r3, [sp, #24]
 800a5a0:	f003 0007 	and.w	r0, r3, #7
 800a5a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a5a8:	ecbd 8b02 	vpop	{d8}
 800a5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a5b4:	f7f5 fe0e 	bl	80001d4 <__adddf3>
 800a5b8:	3d01      	subs	r5, #1
 800a5ba:	e7e6      	b.n	800a58a <__kernel_rem_pio2+0x582>
 800a5bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a5c0:	f7f5 fe08 	bl	80001d4 <__adddf3>
 800a5c4:	3e01      	subs	r6, #1
 800a5c6:	e7bc      	b.n	800a542 <__kernel_rem_pio2+0x53a>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	e7c1      	b.n	800a552 <__kernel_rem_pio2+0x54a>
 800a5ce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a5d2:	f7f5 fdff 	bl	80001d4 <__adddf3>
 800a5d6:	3401      	adds	r4, #1
 800a5d8:	e7c6      	b.n	800a568 <__kernel_rem_pio2+0x560>
 800a5da:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800a5de:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	ec53 2b17 	vmov	r2, r3, d7
 800a5e8:	4649      	mov	r1, r9
 800a5ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a5ee:	f7f5 fdf1 	bl	80001d4 <__adddf3>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	460f      	mov	r7, r1
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	f7f5 fde7 	bl	80001d0 <__aeabi_dsub>
 800a602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a606:	f7f5 fde5 	bl	80001d4 <__adddf3>
 800a60a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a60e:	e9ca 0100 	strd	r0, r1, [sl]
 800a612:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800a616:	e770      	b.n	800a4fa <__kernel_rem_pio2+0x4f2>
 800a618:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800a61c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a620:	4630      	mov	r0, r6
 800a622:	ec53 2b17 	vmov	r2, r3, d7
 800a626:	4639      	mov	r1, r7
 800a628:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a62c:	f7f5 fdd2 	bl	80001d4 <__adddf3>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4680      	mov	r8, r0
 800a636:	4689      	mov	r9, r1
 800a638:	4630      	mov	r0, r6
 800a63a:	4639      	mov	r1, r7
 800a63c:	f7f5 fdc8 	bl	80001d0 <__aeabi_dsub>
 800a640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a644:	f7f5 fdc6 	bl	80001d4 <__adddf3>
 800a648:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a64c:	e9ca 0100 	strd	r0, r1, [sl]
 800a650:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800a654:	e756      	b.n	800a504 <__kernel_rem_pio2+0x4fc>
 800a656:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a65a:	f7f5 fdbb 	bl	80001d4 <__adddf3>
 800a65e:	3d01      	subs	r5, #1
 800a660:	e756      	b.n	800a510 <__kernel_rem_pio2+0x508>
 800a662:	9b01      	ldr	r3, [sp, #4]
 800a664:	9a01      	ldr	r2, [sp, #4]
 800a666:	601f      	str	r7, [r3, #0]
 800a668:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a66c:	605c      	str	r4, [r3, #4]
 800a66e:	609d      	str	r5, [r3, #8]
 800a670:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a674:	60d3      	str	r3, [r2, #12]
 800a676:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a67a:	6110      	str	r0, [r2, #16]
 800a67c:	6153      	str	r3, [r2, #20]
 800a67e:	e78e      	b.n	800a59e <__kernel_rem_pio2+0x596>
 800a680:	41700000 	.word	0x41700000
 800a684:	3e700000 	.word	0x3e700000

0800a688 <__kernel_sin>:
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	ec55 4b10 	vmov	r4, r5, d0
 800a690:	b085      	sub	sp, #20
 800a692:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a696:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a69a:	ed8d 1b00 	vstr	d1, [sp]
 800a69e:	9002      	str	r0, [sp, #8]
 800a6a0:	da06      	bge.n	800a6b0 <__kernel_sin+0x28>
 800a6a2:	ee10 0a10 	vmov	r0, s0
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	f7f6 f9fa 	bl	8000aa0 <__aeabi_d2iz>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d051      	beq.n	800a754 <__kernel_sin+0xcc>
 800a6b0:	4622      	mov	r2, r4
 800a6b2:	462b      	mov	r3, r5
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	f7f5 ff42 	bl	8000540 <__aeabi_dmul>
 800a6bc:	4682      	mov	sl, r0
 800a6be:	468b      	mov	fp, r1
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	f7f5 ff3a 	bl	8000540 <__aeabi_dmul>
 800a6cc:	a341      	add	r3, pc, #260	; (adr r3, 800a7d4 <__kernel_sin+0x14c>)
 800a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d2:	4680      	mov	r8, r0
 800a6d4:	4689      	mov	r9, r1
 800a6d6:	4650      	mov	r0, sl
 800a6d8:	4659      	mov	r1, fp
 800a6da:	f7f5 ff31 	bl	8000540 <__aeabi_dmul>
 800a6de:	a33f      	add	r3, pc, #252	; (adr r3, 800a7dc <__kernel_sin+0x154>)
 800a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e4:	f7f5 fd74 	bl	80001d0 <__aeabi_dsub>
 800a6e8:	4652      	mov	r2, sl
 800a6ea:	465b      	mov	r3, fp
 800a6ec:	f7f5 ff28 	bl	8000540 <__aeabi_dmul>
 800a6f0:	a33c      	add	r3, pc, #240	; (adr r3, 800a7e4 <__kernel_sin+0x15c>)
 800a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f6:	f7f5 fd6d 	bl	80001d4 <__adddf3>
 800a6fa:	4652      	mov	r2, sl
 800a6fc:	465b      	mov	r3, fp
 800a6fe:	f7f5 ff1f 	bl	8000540 <__aeabi_dmul>
 800a702:	a33a      	add	r3, pc, #232	; (adr r3, 800a7ec <__kernel_sin+0x164>)
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	f7f5 fd62 	bl	80001d0 <__aeabi_dsub>
 800a70c:	4652      	mov	r2, sl
 800a70e:	465b      	mov	r3, fp
 800a710:	f7f5 ff16 	bl	8000540 <__aeabi_dmul>
 800a714:	a337      	add	r3, pc, #220	; (adr r3, 800a7f4 <__kernel_sin+0x16c>)
 800a716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71a:	f7f5 fd5b 	bl	80001d4 <__adddf3>
 800a71e:	9b02      	ldr	r3, [sp, #8]
 800a720:	4606      	mov	r6, r0
 800a722:	460f      	mov	r7, r1
 800a724:	b9db      	cbnz	r3, 800a75e <__kernel_sin+0xd6>
 800a726:	4602      	mov	r2, r0
 800a728:	460b      	mov	r3, r1
 800a72a:	4650      	mov	r0, sl
 800a72c:	4659      	mov	r1, fp
 800a72e:	f7f5 ff07 	bl	8000540 <__aeabi_dmul>
 800a732:	a325      	add	r3, pc, #148	; (adr r3, 800a7c8 <__kernel_sin+0x140>)
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	f7f5 fd4a 	bl	80001d0 <__aeabi_dsub>
 800a73c:	4642      	mov	r2, r8
 800a73e:	464b      	mov	r3, r9
 800a740:	f7f5 fefe 	bl	8000540 <__aeabi_dmul>
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	4620      	mov	r0, r4
 800a74a:	4629      	mov	r1, r5
 800a74c:	f7f5 fd42 	bl	80001d4 <__adddf3>
 800a750:	4604      	mov	r4, r0
 800a752:	460d      	mov	r5, r1
 800a754:	ec45 4b10 	vmov	d0, r4, r5
 800a758:	b005      	add	sp, #20
 800a75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75e:	2200      	movs	r2, #0
 800a760:	4b1b      	ldr	r3, [pc, #108]	; (800a7d0 <__kernel_sin+0x148>)
 800a762:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a766:	f7f5 feeb 	bl	8000540 <__aeabi_dmul>
 800a76a:	4632      	mov	r2, r6
 800a76c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a770:	463b      	mov	r3, r7
 800a772:	4640      	mov	r0, r8
 800a774:	4649      	mov	r1, r9
 800a776:	f7f5 fee3 	bl	8000540 <__aeabi_dmul>
 800a77a:	4602      	mov	r2, r0
 800a77c:	460b      	mov	r3, r1
 800a77e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a782:	f7f5 fd25 	bl	80001d0 <__aeabi_dsub>
 800a786:	4652      	mov	r2, sl
 800a788:	465b      	mov	r3, fp
 800a78a:	f7f5 fed9 	bl	8000540 <__aeabi_dmul>
 800a78e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a792:	f7f5 fd1d 	bl	80001d0 <__aeabi_dsub>
 800a796:	a30c      	add	r3, pc, #48	; (adr r3, 800a7c8 <__kernel_sin+0x140>)
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	4606      	mov	r6, r0
 800a79e:	460f      	mov	r7, r1
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	4649      	mov	r1, r9
 800a7a4:	f7f5 fecc 	bl	8000540 <__aeabi_dmul>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	4639      	mov	r1, r7
 800a7b0:	f7f5 fd10 	bl	80001d4 <__adddf3>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	f7f5 fd08 	bl	80001d0 <__aeabi_dsub>
 800a7c0:	e7c6      	b.n	800a750 <__kernel_sin+0xc8>
 800a7c2:	bf00      	nop
 800a7c4:	f3af 8000 	nop.w
 800a7c8:	55555549 	.word	0x55555549
 800a7cc:	3fc55555 	.word	0x3fc55555
 800a7d0:	3fe00000 	.word	0x3fe00000
 800a7d4:	5acfd57c 	.word	0x5acfd57c
 800a7d8:	3de5d93a 	.word	0x3de5d93a
 800a7dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800a7e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800a7e4:	57b1fe7d 	.word	0x57b1fe7d
 800a7e8:	3ec71de3 	.word	0x3ec71de3
 800a7ec:	19c161d5 	.word	0x19c161d5
 800a7f0:	3f2a01a0 	.word	0x3f2a01a0
 800a7f4:	1110f8a6 	.word	0x1110f8a6
 800a7f8:	3f811111 	.word	0x3f811111

0800a7fc <fabs>:
 800a7fc:	ec51 0b10 	vmov	r0, r1, d0
 800a800:	ee10 2a10 	vmov	r2, s0
 800a804:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a808:	ec43 2b10 	vmov	d0, r2, r3
 800a80c:	4770      	bx	lr
	...

0800a810 <floor>:
 800a810:	ec51 0b10 	vmov	r0, r1, d0
 800a814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a818:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a81c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a820:	2e13      	cmp	r6, #19
 800a822:	460c      	mov	r4, r1
 800a824:	ee10 5a10 	vmov	r5, s0
 800a828:	4680      	mov	r8, r0
 800a82a:	dc34      	bgt.n	800a896 <floor+0x86>
 800a82c:	2e00      	cmp	r6, #0
 800a82e:	da16      	bge.n	800a85e <floor+0x4e>
 800a830:	a335      	add	r3, pc, #212	; (adr r3, 800a908 <floor+0xf8>)
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	f7f5 fccd 	bl	80001d4 <__adddf3>
 800a83a:	2200      	movs	r2, #0
 800a83c:	2300      	movs	r3, #0
 800a83e:	f7f6 f90f 	bl	8000a60 <__aeabi_dcmpgt>
 800a842:	b148      	cbz	r0, 800a858 <floor+0x48>
 800a844:	2c00      	cmp	r4, #0
 800a846:	da59      	bge.n	800a8fc <floor+0xec>
 800a848:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a84c:	4a30      	ldr	r2, [pc, #192]	; (800a910 <floor+0x100>)
 800a84e:	432b      	orrs	r3, r5
 800a850:	2500      	movs	r5, #0
 800a852:	42ab      	cmp	r3, r5
 800a854:	bf18      	it	ne
 800a856:	4614      	movne	r4, r2
 800a858:	4621      	mov	r1, r4
 800a85a:	4628      	mov	r0, r5
 800a85c:	e025      	b.n	800a8aa <floor+0x9a>
 800a85e:	4f2d      	ldr	r7, [pc, #180]	; (800a914 <floor+0x104>)
 800a860:	4137      	asrs	r7, r6
 800a862:	ea01 0307 	and.w	r3, r1, r7
 800a866:	4303      	orrs	r3, r0
 800a868:	d01f      	beq.n	800a8aa <floor+0x9a>
 800a86a:	a327      	add	r3, pc, #156	; (adr r3, 800a908 <floor+0xf8>)
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f7f5 fcb0 	bl	80001d4 <__adddf3>
 800a874:	2200      	movs	r2, #0
 800a876:	2300      	movs	r3, #0
 800a878:	f7f6 f8f2 	bl	8000a60 <__aeabi_dcmpgt>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d0eb      	beq.n	800a858 <floor+0x48>
 800a880:	2c00      	cmp	r4, #0
 800a882:	bfbe      	ittt	lt
 800a884:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a888:	fa43 f606 	asrlt.w	r6, r3, r6
 800a88c:	19a4      	addlt	r4, r4, r6
 800a88e:	ea24 0407 	bic.w	r4, r4, r7
 800a892:	2500      	movs	r5, #0
 800a894:	e7e0      	b.n	800a858 <floor+0x48>
 800a896:	2e33      	cmp	r6, #51	; 0x33
 800a898:	dd0b      	ble.n	800a8b2 <floor+0xa2>
 800a89a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a89e:	d104      	bne.n	800a8aa <floor+0x9a>
 800a8a0:	ee10 2a10 	vmov	r2, s0
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	f7f5 fc95 	bl	80001d4 <__adddf3>
 800a8aa:	ec41 0b10 	vmov	d0, r0, r1
 800a8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ba:	fa23 f707 	lsr.w	r7, r3, r7
 800a8be:	4207      	tst	r7, r0
 800a8c0:	d0f3      	beq.n	800a8aa <floor+0x9a>
 800a8c2:	a311      	add	r3, pc, #68	; (adr r3, 800a908 <floor+0xf8>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	f7f5 fc84 	bl	80001d4 <__adddf3>
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f7f6 f8c6 	bl	8000a60 <__aeabi_dcmpgt>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d0bf      	beq.n	800a858 <floor+0x48>
 800a8d8:	2c00      	cmp	r4, #0
 800a8da:	da02      	bge.n	800a8e2 <floor+0xd2>
 800a8dc:	2e14      	cmp	r6, #20
 800a8de:	d103      	bne.n	800a8e8 <floor+0xd8>
 800a8e0:	3401      	adds	r4, #1
 800a8e2:	ea25 0507 	bic.w	r5, r5, r7
 800a8e6:	e7b7      	b.n	800a858 <floor+0x48>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a8ee:	fa03 f606 	lsl.w	r6, r3, r6
 800a8f2:	4435      	add	r5, r6
 800a8f4:	4545      	cmp	r5, r8
 800a8f6:	bf38      	it	cc
 800a8f8:	18e4      	addcc	r4, r4, r3
 800a8fa:	e7f2      	b.n	800a8e2 <floor+0xd2>
 800a8fc:	2500      	movs	r5, #0
 800a8fe:	462c      	mov	r4, r5
 800a900:	e7aa      	b.n	800a858 <floor+0x48>
 800a902:	bf00      	nop
 800a904:	f3af 8000 	nop.w
 800a908:	8800759c 	.word	0x8800759c
 800a90c:	7e37e43c 	.word	0x7e37e43c
 800a910:	bff00000 	.word	0xbff00000
 800a914:	000fffff 	.word	0x000fffff

0800a918 <matherr>:
 800a918:	2000      	movs	r0, #0
 800a91a:	4770      	bx	lr
 800a91c:	0000      	movs	r0, r0
	...

0800a920 <nan>:
 800a920:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a928 <nan+0x8>
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	00000000 	.word	0x00000000
 800a92c:	7ff80000 	.word	0x7ff80000

0800a930 <scalbn>:
 800a930:	b570      	push	{r4, r5, r6, lr}
 800a932:	ec55 4b10 	vmov	r4, r5, d0
 800a936:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a93a:	4606      	mov	r6, r0
 800a93c:	462b      	mov	r3, r5
 800a93e:	b9aa      	cbnz	r2, 800a96c <scalbn+0x3c>
 800a940:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a944:	4323      	orrs	r3, r4
 800a946:	d03b      	beq.n	800a9c0 <scalbn+0x90>
 800a948:	4b31      	ldr	r3, [pc, #196]	; (800aa10 <scalbn+0xe0>)
 800a94a:	4629      	mov	r1, r5
 800a94c:	2200      	movs	r2, #0
 800a94e:	ee10 0a10 	vmov	r0, s0
 800a952:	f7f5 fdf5 	bl	8000540 <__aeabi_dmul>
 800a956:	4b2f      	ldr	r3, [pc, #188]	; (800aa14 <scalbn+0xe4>)
 800a958:	429e      	cmp	r6, r3
 800a95a:	4604      	mov	r4, r0
 800a95c:	460d      	mov	r5, r1
 800a95e:	da12      	bge.n	800a986 <scalbn+0x56>
 800a960:	a327      	add	r3, pc, #156	; (adr r3, 800aa00 <scalbn+0xd0>)
 800a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a966:	f7f5 fdeb 	bl	8000540 <__aeabi_dmul>
 800a96a:	e009      	b.n	800a980 <scalbn+0x50>
 800a96c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a970:	428a      	cmp	r2, r1
 800a972:	d10c      	bne.n	800a98e <scalbn+0x5e>
 800a974:	ee10 2a10 	vmov	r2, s0
 800a978:	4620      	mov	r0, r4
 800a97a:	4629      	mov	r1, r5
 800a97c:	f7f5 fc2a 	bl	80001d4 <__adddf3>
 800a980:	4604      	mov	r4, r0
 800a982:	460d      	mov	r5, r1
 800a984:	e01c      	b.n	800a9c0 <scalbn+0x90>
 800a986:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a98a:	460b      	mov	r3, r1
 800a98c:	3a36      	subs	r2, #54	; 0x36
 800a98e:	4432      	add	r2, r6
 800a990:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a994:	428a      	cmp	r2, r1
 800a996:	dd0b      	ble.n	800a9b0 <scalbn+0x80>
 800a998:	ec45 4b11 	vmov	d1, r4, r5
 800a99c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800aa08 <scalbn+0xd8>
 800a9a0:	f000 f83c 	bl	800aa1c <copysign>
 800a9a4:	a318      	add	r3, pc, #96	; (adr r3, 800aa08 <scalbn+0xd8>)
 800a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9aa:	ec51 0b10 	vmov	r0, r1, d0
 800a9ae:	e7da      	b.n	800a966 <scalbn+0x36>
 800a9b0:	2a00      	cmp	r2, #0
 800a9b2:	dd08      	ble.n	800a9c6 <scalbn+0x96>
 800a9b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a9b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a9c0:	ec45 4b10 	vmov	d0, r4, r5
 800a9c4:	bd70      	pop	{r4, r5, r6, pc}
 800a9c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a9ca:	da0d      	bge.n	800a9e8 <scalbn+0xb8>
 800a9cc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a9d0:	429e      	cmp	r6, r3
 800a9d2:	ec45 4b11 	vmov	d1, r4, r5
 800a9d6:	dce1      	bgt.n	800a99c <scalbn+0x6c>
 800a9d8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800aa00 <scalbn+0xd0>
 800a9dc:	f000 f81e 	bl	800aa1c <copysign>
 800a9e0:	a307      	add	r3, pc, #28	; (adr r3, 800aa00 <scalbn+0xd0>)
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	e7e0      	b.n	800a9aa <scalbn+0x7a>
 800a9e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a9ec:	3236      	adds	r2, #54	; 0x36
 800a9ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	4b06      	ldr	r3, [pc, #24]	; (800aa18 <scalbn+0xe8>)
 800a9fe:	e7b2      	b.n	800a966 <scalbn+0x36>
 800aa00:	c2f8f359 	.word	0xc2f8f359
 800aa04:	01a56e1f 	.word	0x01a56e1f
 800aa08:	8800759c 	.word	0x8800759c
 800aa0c:	7e37e43c 	.word	0x7e37e43c
 800aa10:	43500000 	.word	0x43500000
 800aa14:	ffff3cb0 	.word	0xffff3cb0
 800aa18:	3c900000 	.word	0x3c900000

0800aa1c <copysign>:
 800aa1c:	ec51 0b10 	vmov	r0, r1, d0
 800aa20:	ee11 0a90 	vmov	r0, s3
 800aa24:	ee10 2a10 	vmov	r2, s0
 800aa28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aa2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800aa30:	ea41 0300 	orr.w	r3, r1, r0
 800aa34:	ec43 2b10 	vmov	d0, r2, r3
 800aa38:	4770      	bx	lr
	...

0800aa3c <_init>:
 800aa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3e:	bf00      	nop
 800aa40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa42:	bc08      	pop	{r3}
 800aa44:	469e      	mov	lr, r3
 800aa46:	4770      	bx	lr

0800aa48 <_fini>:
 800aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4a:	bf00      	nop
 800aa4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa4e:	bc08      	pop	{r3}
 800aa50:	469e      	mov	lr, r3
 800aa52:	4770      	bx	lr
